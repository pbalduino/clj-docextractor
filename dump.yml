clojure.uuid:
  ns-name: "clojure.uuid"
  vars:
user:
  ns-name: "user"
  vars:
clj-yaml.core:
  ns-name: "clj-yaml.core"
  vars:
    "make-yaml":
      name: "make-yaml"
    "encode":
      name: "encode"
    "YAMLCodec":
      name: "YAMLCodec"
    "flow-styles":
      name: "flow-styles"
    "make-dumper-options":
      name: "make-dumper-options"
    "parse-string":
      name: "parse-string"
    "decode-key":
      name: "decode-key"
    "decode":
      name: "decode"
    "generate-string":
      name: "generate-string"
    "*keywordize*":
      name: "*keywordize*"
clojure.main:
  ns-name: "clojure.main"
  vars:
    "repl-requires":
      name: "repl-requires"
      doc: >
clojure.uuid:
  ns-name: "clojure.uuid"
  vars:
user:
  ns-name: "user"
  vars:
clj-yaml.core:
  ns-name: "clj-yaml.core"
  vars:
    "make-yaml":
      name: "make-yaml"
    "encode":
      name: "encode"
    "YAMLCodec":
      name: "YAMLCodec"
    "flow-styles":
      name: "flow-styles"
    "make-dumper-options":
      name: "make-dumper-options"
    "parse-string":
      name: "parse-string"
    "decode-key":
      name: "decode-key"
    "decode":
      name: "decode"
    "generate-string":
      name: "generate-string"
    "*keywordize*":
      name: "*keywordize*"
clojure.main:
  ns-name: "clojure.main"
  vars:
    "repl-requires":
      name: "repl-requires"
      doc: >
        A sequence of lib specs that are applied to `require`
        by default when a new command-line REPL is started.
    "repl-exception":
      name: "repl-exception"
      doc: >
        Returns the root cause of throwables
    "stack-element-str":
      name: "stack-element-str"
      doc: >
        Returns a (possibly unmunged) string representation of a StackTraceElement
    "repl-caught":
      name: "repl-caught"
      doc: >
        Default :caught hook for repl
    "demunge":
      name: "demunge"
      doc: >
        Given a string representation of a fn class,
          as in a stack trace element, returns a readable version.
    "load-script":
      name: "load-script"
      doc: >
        Loads Clojure source from a file or resource given its path. Paths
          beginning with @ or @/ are considered relative to classpath.
    "skip-whitespace":
      name: "skip-whitespace"
      doc: >
        Skips whitespace characters on stream s. Returns :line-start, :stream-end,
          or :body to indicate the relative location of the next character on s.
          Interprets comma as whitespace and semicolon as comment to end of line.
          Does not interpret #! as comment to end of line because only one
          character of lookahead is available. The stream must either be an
          instance of LineNumberingPushbackReader or duplicate its behavior of both
          supporting .unread and collapsing all of CR, LF, and CRLF to a single
          \newline.
    "skip-if-eol":
      name: "skip-if-eol"
      doc: >
        If the next character on stream s is a newline, skips it, otherwise
          leaves the stream untouched. Returns :line-start, :stream-end, or :body
          to indicate the relative location of the next character on s. The stream
          must either be an instance of LineNumberingPushbackReader or duplicate
          its behavior of both supporting .unread and collapsing all of CR, LF, and
          CRLF to a single \newline.
    "repl-read":
      name: "repl-read"
      doc: >
        Default :read hook for repl. Reads from *in* which must either be an
          instance of LineNumberingPushbackReader or duplicate its behavior of both
          supporting .unread and collapsing all of CR, LF, and CRLF into a single
          \newline. repl-read:
            - skips whitespace, then
              - returns request-prompt on start of line, or
              - returns request-exit on end of stream, or
              - reads an object from the input stream, then
                - skips the next input character if it's end of line, then
                - returns the object.
    "with-bindings":
      name: "with-bindings"
      doc: >
        Executes body in the context of thread-local bindings for several vars
          that often need to be set!: *ns* *warn-on-reflection* *math-context*
          *print-meta* *print-length* *print-level* *compile-path*
          *command-line-args* *1 *2 *3 *e
    "root-cause":
      name: "root-cause"
      doc: >
        Returns the initial cause of an exception or error by peeling off all of
          its wrappers
    "with-read-known":
      name: "with-read-known"
      doc: >
        Evaluates body with *read-eval* set to a "known" value,
           i.e. substituting true for :unknown if necessary.
    "repl-prompt":
      name: "repl-prompt"
      doc: >
        Default :prompt hook for repl
    "repl":
      name: "repl"
      doc: >
        Generic, reusable, read-eval-print loop. By default, reads from *in*,
          writes to *out*, and prints exception summaries to *err*. If you use the
          default :read hook, *in* must either be an instance of
          LineNumberingPushbackReader or duplicate its behavior of both supporting
          .unread and collapsing CR, LF, and CRLF into a single \newline. Options
          are sequential keyword-value pairs. Available options and their defaults:
        
             - :init, function of no arguments, initialization hook called with
               bindings for set!-able vars in place.
               default: #()
        
             - :need-prompt, function of no arguments, called before each
               read-eval-print except the first, the user will be prompted if it
               returns true.
               default: (if (instance? LineNumberingPushbackReader *in*)
                          #(.atLineStart *in*)
                          #(identity true))
        
             - :prompt, function of no arguments, prompts for more input.
               default: repl-prompt
        
             - :flush, function of no arguments, flushes output
               default: flush
        
             - :read, function of two arguments, reads from *in*:
                 - returns its first argument to request a fresh prompt
                   - depending on need-prompt, this may cause the repl to prompt
                     before reading again
                 - returns its second argument to request an exit from the repl
                 - else returns the next object read from the input stream
               default: repl-read
        
             - :eval, funtion of one argument, returns the evaluation of its
               argument
               default: eval
        
             - :print, function of one argument, prints its argument to the output
               default: prn
        
             - :caught, function of one argument, a throwable, called when
               read, eval, or print throws an exception or error
               default: repl-caught
    "main":
      name: "main"
      doc: >
        Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]
        
          With no options or args, runs an interactive Read-Eval-Print Loop
        
          init options:
            -i, --init path     Load a file or resource
            -e, --eval string   Evaluate expressions in string; print non-nil values
        
          main options:
            -m, --main ns-name  Call the -main function from a namespace with args
            -r, --repl          Run a repl
            path                Run a script from from a file or resource
            -                   Run a script from standard input
            -h, -?, --help      Print this help message and exit
        
          operation:
        
            - Establishes thread-local bindings for commonly set!-able vars
            - Enters the user namespace
            - Binds *command-line-args* to a seq of strings containing command line
              args that appear after any main option
            - Runs all init options in order
            - Calls a -main function or runs a repl or script if requested
        
          The init options may be repeated and mixed freely, but must appear before
          any main option. The appearance of any eval option before running a repl
          suppresses the usual repl greeting message: "Clojure ~(clojure-version)".
        
          Paths may be absolute or relative in the filesystem or relative to
          classpath. Classpath-relative paths have prefix of @ or @/
cljdoc.core:
  ns-name: "cljdoc.core"
  vars:
    "process-namespace-list":
      name: "process-namespace-list"
    "-main":
      name: "-main"
    "write":
      name: "write"
    "break":
      name: "break"
    "print-vars":
      name: "print-vars"
clojure.core:
  doc: "Fundamental library of the Clojure language"
  ns-name: "clojure.core"
  vars:
    "sorted-map":
      name: "sorted-map"
      doc: >
        keyval => key val
          Returns a new sorted map with supplied mappings.  If any keys are
          equal, they are handled as if by repeated uses of assoc.
    "read-line":
      name: "read-line"
      doc: >
        Reads the next line from stream that is the current value of *in* .
    "re-pattern":
      name: "re-pattern"
      doc: >
        Returns an instance of java.util.regex.Pattern, for use, e.g. in
          re-matcher.
    "cond->>":
      name: "cond->>"
      doc: >
        Takes an expression and a set of test/form pairs. Threads expr (via ->>)
          through each form for which the corresponding test expression
          is true.  Note that, unlike cond branching, cond->> threading does not short circuit
          after the first true test expression.
    "keyword?":
      name: "keyword?"
      doc: >
        Return true if x is a Keyword
    "unchecked-inc-int":
      name: "unchecked-inc-int"
      doc: >
        Returns a number one greater than x, an int.
          Note - uses a primitive operator subject to overflow.
    "val":
      name: "val"
      doc: >
        Returns the value in the map entry.
    "chunked-seq?":
      name: "chunked-seq?"
    "find-protocol-impl":
      name: "find-protocol-impl"
    "vector-of":
      name: "vector-of"
      doc: >
        Creates a new vector of a single primitive type t, where t is one
          of :int :long :float :double :byte :short :char or :boolean. The
          resulting vector complies with the interface of vectors in general,
          but stores the values unboxed internally.
        
          Optionally takes one or more elements to populate the vector.
    "object-array":
      name: "object-array"
      doc: >
        Creates an array of objects
    "*compile-path*":
      name: "*compile-path*"
      doc: >
        Specifies the directory where 'compile' will write out .class
          files. This directory must be in the classpath for 'compile' to
          work.
        
          Defaults to "classes"
    "max-key":
      name: "max-key"
      doc: >
        Returns the x for which (k x), a number, is greatest.
    "list*":
      name: "list*"
      doc: >
        Creates a new list containing the items prepended to the rest, the
          last of which will be treated as a sequence.
    "ns-aliases":
      name: "ns-aliases"
      doc: >
        Returns a map of the aliases for the namespace.
    "booleans":
      name: "booleans"
      doc: >
        Casts to boolean[]
    "the-ns":
      name: "the-ns"
      doc: >
        If passed a namespace, returns it. Else, when passed a symbol,
          returns the namespace named by it, throwing an exception if not
          found.
    "==":
      name: "=="
      doc: >
        Returns non-nil if nums all have the equivalent
          value (type-independent), otherwise false
    "chunk-buffer":
      name: "chunk-buffer"
    "longs":
      name: "longs"
      doc: >
        Casts to long[]
    "shorts":
      name: "shorts"
      doc: >
        Casts to shorts[]
    "instance?":
      name: "instance?"
      doc: >
        Evaluates x and tests if it is an instance of the class
            c. Returns true or false
    "format":
      name: "format"
      doc: >
        Formats a string using java.lang.String.format, see java.util.Formatter for format
          string syntax
    "sequential?":
      name: "sequential?"
      doc: >
        Returns true if coll implements Sequential
    "fn?":
      name: "fn?"
      doc: >
        Returns true if x implements Fn, i.e. is an object created via fn.
    "empty":
      name: "empty"
      doc: >
        Returns an empty collection of the same category as coll, or nil
    "bound-fn":
      name: "bound-fn"
      doc: >
        Returns a function defined by the given fntail, which will install the
          same bindings in effect as in the thread at the time bound-fn was called.
          This may be used to define a helper function which runs on a different
          thread, but needs the same bindings in place.
    "dorun":
      name: "dorun"
      doc: >
        When lazy sequences are produced via functions that have side
          effects, any effects other than those needed to produce the first
          element in the seq do not occur until the seq is consumed. dorun can
          be used to force any effects. Walks through the successive nexts of
          the seq, does not retain the head and returns nil.
    "time":
      name: "time"
      doc: >
        Evaluates expr and prints the time it took.  Returns the value of
         expr.
    "remove-method":
      name: "remove-method"
      doc: >
        Removes the method of multimethod associated with dispatch-value.
    "gensym":
      name: "gensym"
      doc: >
        Returns a new symbol with a unique name. If a prefix string is
          supplied, the name is prefix# where # is some unique number. If
          prefix is not supplied, the prefix is 'G__'.
    "not=":
      name: "not="
      doc: >
        Same as (not (= obj1 obj2))
    "*3":
      name: "*3"
      doc: >
        bound in a repl thread to the third most recent value printed
    "unchecked-multiply":
      name: "unchecked-multiply"
      doc: >
        Returns the product of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "doseq":
      name: "doseq"
      doc: >
        Repeatedly executes body (presumably for side-effects) with
          bindings and filtering as provided by "for".  Does not retain
          the head of the sequence. Returns nil.
    "bit-or":
      name: "bit-or"
      doc: >
        Bitwise or
    "aset-byte":
      name: "aset-byte"
      doc: >
        Sets the value at the index/indices. Works on arrays of byte. Returns val.
    "if-not":
      name: "if-not"
      doc: >
        Evaluates test. If logical false, evaluates and returns then expr, 
          otherwise else expr, if supplied, else nil.
    "send-via":
      name: "send-via"
      doc: >
        Dispatch an action to an agent. Returns the agent immediately.
          Subsequently, in a thread supplied by executor, the state of the agent
          will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "hash-set":
      name: "hash-set"
      doc: >
        Returns a new hash set with supplied keys.  Any equal keys are
          handled as if by repeated uses of conj.
    "->Vec":
      name: "->Vec"
      doc: >
        Positional factory function for class clojure.core.Vec.
    "add-watch":
      name: "add-watch"
      doc: >
        Alpha - subject to change.
          Adds a watch function to an agent/atom/var/ref reference. The watch
          fn must be a fn of 4 args: a key, the reference, its old-state, its
          new-state. Whenever the reference's state might have been changed,
          any registered watches will have their functions called. The watch fn
          will be called synchronously, on the agent's thread if an agent,
          before any pending sends if agent or ref. Note that an atom's or
          ref's state may have changed again prior to the fn call, so use
          old/new-state rather than derefing the reference. Note also that watch
          fns may be called from multiple threads simultaneously. Var watchers
          are triggered only by root binding changes, not thread-local
          set!s. Keys must be unique per reference, and can be used to remove
          the watch with remove-watch, but are otherwise considered opaque by
          the watch mechanism.
    "unchecked-dec":
      name: "unchecked-dec"
      doc: >
        Returns a number one less than x, a long.
          Note - uses a primitive operator subject to overflow.
    "some":
      name: "some"
      doc: >
        Returns the first logical true value of (pred x) for any x in coll,
          else nil.  One common idiom is to use a set as pred, for example
          this will return :fred if :fred is in the sequence, otherwise nil:
          (some #{:fred} coll)
    "nil?":
      name: "nil?"
      doc: >
        Returns true if x is nil, false otherwise.
    "string?":
      name: "string?"
      doc: >
        Return true if x is a String
    "boolean-array":
      name: "boolean-array"
      doc: >
        Creates an array of booleans
    "second":
      name: "second"
      doc: >
        Same as (first (next x))
    "letfn":
      name: "letfn"
      doc: >
        fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)
        
          Takes a vector of function specs and a body, and generates a set of
          bindings of functions to their names. All of the names are available
          in all of the definitions of the functions, as well as the body.
    "keys":
      name: "keys"
      doc: >
        Returns a sequence of the map's keys.
    "for":
      name: "for"
      doc: >
        List comprehension. Takes a vector of one or more
           binding-form/collection-expr pairs, each followed by zero or more
           modifiers, and yields a lazy sequence of evaluations of expr.
           Collections are iterated in a nested fashion, rightmost fastest,
           and nested coll-exprs can refer to bindings created in prior
           binding-forms.  Supported modifiers are: :let [binding-form expr ...],
           :while test, :when test.
        
          (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))
    "*2":
      name: "*2"
      doc: >
        bound in a repl thread to the second most recent value printed
    "long-array":
      name: "long-array"
      doc: >
        Creates an array of longs
    "pop-thread-bindings":
      name: "pop-thread-bindings"
      doc: >
        Pop one set of bindings pushed with push-binding before. It is an error to
          pop bindings without pushing before.
    "error-mode":
      name: "error-mode"
      doc: >
        Returns the error-mode of agent a.  See set-error-mode!
    "cond":
      name: "cond"
      doc: >
        Takes a set of test/expr pairs. It evaluates each test one at a
          time.  If a test returns logical true, cond evaluates and returns
          the value of the corresponding expr and doesn't evaluate any of the
          other tests or exprs. (cond) returns nil.
    "bit-set":
      name: "bit-set"
      doc: >
        Set bit at index n
    "spit":
      name: "spit"
      doc: >
        Opposite of slurp.  Opens f with writer, writes content, then
          closes f. Options passed to clojure.java.io/writer.
    "find-protocol-method":
      name: "find-protocol-method"
    "fn":
      name: "fn"
      doc: >
        params => positional-params* , or positional-params* & next-param
          positional-param => binding-form
          next-param => binding-form
          name => symbol
        
          Defines a function
    "sorted?":
      name: "sorted?"
      doc: >
        Returns true if coll implements Sorted
    "short-array":
      name: "short-array"
      doc: >
        Creates an array of shorts
    "ns-unalias":
      name: "ns-unalias"
      doc: >
        Removes the alias for the symbol from the namespace.
    "ns-publics":
      name: "ns-publics"
      doc: >
        Returns a map of the public intern mappings for the namespace.
    "EMPTY-NODE":
      name: "EMPTY-NODE"
    "char-array":
      name: "char-array"
      doc: >
        Creates an array of chars
    "dosync":
      name: "dosync"
      doc: >
        Runs the exprs (in an implicit do) in a transaction that encompasses
          exprs and any nested calls.  Starts a transaction if none is already
          running on this thread. Any uncaught exception will abort the
          transaction and flow out of dosync. The exprs may be run more than
          once, but any effects on Refs will be atomic.
    "all-ns":
      name: "all-ns"
      doc: >
        Returns a sequence of all namespaces.
    "long":
      name: "long"
      doc: >
        Coerce to long
    "with-open":
      name: "with-open"
      doc: >
        bindings => [name init ...]
        
          Evaluates body in a try expression with names bound to the values
          of the inits, and a finally clause that calls (.close name) on each
          name in reverse order.
    "init-proxy":
      name: "init-proxy"
      doc: >
        Takes a proxy instance and a map of strings (which must
          correspond to methods of the proxy superclass/superinterfaces) to
          fns (which must take arguments matching the corresponding method,
          plus an additional (explicit) first arg corresponding to this, and
          sets the proxy's fn map.  Returns the proxy.
    "add-classpath":
      name: "add-classpath"
      doc: >
        DEPRECATED 
        
          Adds the url (String or URL object) to the classpath per
          URLClassLoader.addURL
    "false?":
      name: "false?"
      doc: >
        Returns true if x is the value false, false otherwise.
    "await1":
      name: "await1"
    "true?":
      name: "true?"
      doc: >
        Returns true if x is the value true, false otherwise.
    "gen-interface":
      name: "gen-interface"
      doc: >
        When compiling, generates compiled bytecode for an interface with
          the given package-qualified :name (which, as all names in these
          parameters, can be a string or symbol), and writes the .class file
          to the *compile-path* directory.  When not compiling, does nothing.
         
          In all subsequent sections taking types, the primitive types can be
          referred to by their Java names (int, float etc), and classes in the
          java.lang package can be used without a package qualifier. All other
          classes must be fully qualified.
         
          Options should be a set of key/value pairs, all except for :name are
          optional:
        
          :name aname
        
          The package-qualified name of the class to be generated
        
          :extends [interface ...]
        
          One or more interfaces, which will be extended by this interface.
        
          :methods [ [name [param-types] return-type], ...]
        
          This parameter is used to specify the signatures of the methods of
          the generated interface.  Do not repeat superinterface signatures
          here.
    "sync":
      name: "sync"
      doc: >
        transaction-flags => TBD, pass nil for now
        
          Runs the exprs (in an implicit do) in a transaction that encompasses
          exprs and any nested calls.  Starts a transaction if none is already
          running on this thread. Any uncaught exception will abort the
          transaction and flow out of sync. The exprs may be run more than
          once, but any effects on Refs will be atomic.
    "short":
      name: "short"
      doc: >
        Coerce to short
    "ns-unmap":
      name: "ns-unmap"
      doc: >
        Removes the mappings for the symbol from the namespace.
    "repeat":
      name: "repeat"
      doc: >
        Returns a lazy (infinite!, or length n if supplied) sequence of xs.
    "zipmap":
      name: "zipmap"
      doc: >
        Returns a map with the keys mapped to the corresponding vals.
    "distinct":
      name: "distinct"
      doc: >
        Returns a lazy sequence of the elements of coll with duplicates removed
    "get-in":
      name: "get-in"
      doc: >
        Returns the value in a nested associative structure,
          where ks is a sequence of keys. Returns nil if the key
          is not present, or the not-found value if supplied.
    "bit-xor":
      name: "bit-xor"
      doc: >
        Bitwise exclusive or
    "char-escape-string":
      name: "char-escape-string"
      doc: >
        Returns escape string for char or nil if none
    "complement":
      name: "complement"
      doc: >
        Takes a fn f and returns a fn that takes the same arguments as f,
          has the same effects, if any, and returns the opposite truth value.
    "let":
      name: "let"
      doc: >
        binding => binding-form init-expr
        
          Evaluates the exprs in a lexical context in which the symbols in
          the binding-forms are bound to their respective init-exprs or parts
          therein.
    "get-validator":
      name: "get-validator"
      doc: >
        Gets the validator-fn for a var/ref/agent/atom.
    "dotimes":
      name: "dotimes"
      doc: >
        bindings => name n
        
          Repeatedly executes body (presumably for side-effects) with name
          bound to integers from 0 through n-1.
    "ref-max-history":
      name: "ref-max-history"
      doc: >
        Gets the max-history of a ref, or sets it and returns the ref
    "*ns*":
      name: "*ns*"
      doc: >
        A clojure.lang.Namespace object representing the current namespace.
    "promise":
      name: "promise"
      doc: >
        Alpha - subject to change.
          Returns a promise object that can be read with deref/@, and set,
          once only, with deliver. Calls to deref/@ prior to delivery will
          block, unless the variant of deref with timeout is used. All
          subsequent derefs will return the same delivered value without
          blocking. See also - realized?.
    "defmethod":
      name: "defmethod"
      doc: >
        Creates and installs a new method of multimethod associated with dispatch-value. 
    "set-agent-send-executor!":
      name: "set-agent-send-executor!"
      doc: >
        Sets the ExecutorService to be used by send
    "-'":
      name: "-'"
      doc: >
        If no ys are supplied, returns the negation of x, else subtracts
          the ys from x and returns the result. Supports arbitrary precision.
          See also: -
    "pop!":
      name: "pop!"
      doc: >
        Alpha - subject to change.
          Removes the last item from a transient vector. If
          the collection is empty, throws an exception. Returns coll
    "derive":
      name: "derive"
      doc: >
        Establishes a parent/child relationship between parent and
          tag. Parent must be a namespace-qualified symbol or keyword and
          child can be either a namespace-qualified symbol or keyword or a
          class. h must be a hierarchy obtained from make-hierarchy, if not
          supplied defaults to, and modifies, the global hierarchy.
    "aset-float":
      name: "aset-float"
      doc: >
        Sets the value at the index/indices. Works on arrays of float. Returns val.
    "extend":
      name: "extend"
      doc: >
        Implementations of protocol methods can be provided using the extend construct:
        
          (extend AType
            AProtocol
             {:foo an-existing-fn
              :bar (fn [a b] ...)
              :baz (fn ([a]...) ([a b] ...)...)}
            BProtocol 
              {...} 
            ...)
         
          extend takes a type/class (or interface, see below), and one or more
          protocol + method map pairs. It will extend the polymorphism of the
          protocol's methods to call the supplied methods when an AType is
          provided as the first argument. 
        
          Method maps are maps of the keyword-ized method names to ordinary
          fns. This facilitates easy reuse of existing fns and fn maps, for
          code reuse/mixins without derivation or composition. You can extend
          an interface to a protocol. This is primarily to facilitate interop
          with the host (e.g. Java) but opens the door to incidental multiple
          inheritance of implementation since a class can inherit from more
          than one interface, both of which extend the protocol. It is TBD how
          to specify which impl to use. You can extend a protocol on nil.
        
          If you are supplying the definitions explicitly (i.e. not reusing
          exsting functions or mixin maps), you may find it more convenient to
          use the extend-type or extend-protocol macros.
        
          Note that multiple independent extend clauses can exist for the same
          type, not all protocols need be defined in a single extend call.
        
          See also:
          extends?, satisfies?, extenders
    "-reset-methods":
      name: "-reset-methods"
    "lazy-cat":
      name: "lazy-cat"
      doc: >
        Expands to code which yields a lazy sequence of the concatenation
          of the supplied colls.  Each coll expr is not evaluated until it is
          needed. 
        
          (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))
    "commute":
      name: "commute"
      doc: >
        Must be called in a transaction. Sets the in-transaction-value of
          ref to:
        
          (apply fun in-transaction-value-of-ref args)
        
          and returns the in-transaction-value of ref.
        
          At the commit point of the transaction, sets the value of ref to be:
        
          (apply fun most-recently-committed-value-of-ref args)
        
          Thus fun should be commutative, or, failing that, you must accept
          last-one-in-wins behavior.  commute allows for more concurrency than
          ref-set.
    "defstruct":
      name: "defstruct"
      doc: >
        Same as (def name (create-struct keys...))
    "with-in-str":
      name: "with-in-str"
      doc: >
        Evaluates body in a context in which *in* is bound to a fresh
          StringReader initialized with the string s.
    "partition-by":
      name: "partition-by"
      doc: >
        Applies f to each value in coll, splitting it each time f returns
           a new value.  Returns a lazy seq of partitions.
    "rem":
      name: "rem"
      doc: >
        remainder of dividing numerator by denominator.
    "odd?":
      name: "odd?"
      doc: >
        Returns true if n is odd, throws an exception if n is not an integer
    "symbol?":
      name: "symbol?"
      doc: >
        Return true if x is a Symbol
    "mapv":
      name: "mapv"
      doc: >
        Returns a vector consisting of the result of applying f to the
          set of first items of each coll, followed by applying f to the set
          of second items in each coll, until any one of the colls is
          exhausted.  Any remaining items in other colls are ignored. Function
          f should accept number-of-colls arguments.
    "*print-level*":
      name: "*print-level*"
      doc: >
        *print-level* controls how many levels deep the printer will
          print nested objects. If it is bound to logical false, there is no
          limit. Otherwise, it must be bound to an integer indicating the maximum
          level to print. Each argument to print is at level 0; if an argument is a
          collection, its items are at level 1; and so on. If an object is a
          collection and is at a level greater than or equal to the value bound to
          *print-level*, the printer prints '#' to represent it. The root binding
          is nil indicating no limit.
    "*allow-unresolved-vars*":
      name: "*allow-unresolved-vars*"
    "thread-bound?":
      name: "thread-bound?"
      doc: >
        Returns true if all of the vars provided as arguments have thread-local bindings.
           Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.
    "*data-readers*":
      name: "*data-readers*"
      doc: >
        Map from reader tag symbols to data reader Vars.
        
          When Clojure starts, it searches for files named 'data_readers.clj'
          at the root of the classpath. Each such file must contain a literal
          map of symbols, like this:
        
              {foo/bar my.project.foo/bar
               foo/baz my.project/baz}
        
          The first symbol in each pair is a tag that will be recognized by
          the Clojure reader. The second symbol in the pair is the
          fully-qualified name of a Var which will be invoked by the reader to
          parse the form following the tag. For example, given the
          data_readers.clj file above, the Clojure reader would parse this
          form:
        
              #foo/bar [1 2 3]
        
          by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The
          data reader function is invoked on the form AFTER it has been read
          as a normal Clojure data structure by the reader.
        
          Reader tags without namespace qualifiers are reserved for
          Clojure. Default reader tags are defined in
          clojure.core/default-data-readers but may be overridden in
          data_readers.clj or by rebinding this Var.
    "filterv":
      name: "filterv"
      doc: >
        Returns a vector of the items in coll for which
          (pred item) returns true. pred must be free of side-effects.
    "proxy-call-with-super":
      name: "proxy-call-with-super"
    "*unchecked-math*":
      name: "*unchecked-math*"
      doc: >
        While bound to true, compilations of +, -, *, inc, dec and the
          coercions will be done without overflow checks. Default: false.
    "ns-interns":
      name: "ns-interns"
      doc: >
        Returns a map of the intern mappings for the namespace.
    "re-matches":
      name: "re-matches"
      doc: >
        Returns the match, if any, of string to pattern, using
          java.util.regex.Matcher.matches().  Uses re-groups to return the
          groups.
    "split-with":
      name: "split-with"
      doc: >
        Returns a vector of [(take-while pred coll) (drop-while pred coll)]
    "munge":
      name: "munge"
    "loop":
      name: "loop"
      doc: >
        Evaluates the exprs in a lexical context in which the symbols in
          the binding-forms are bound to their respective init-exprs or parts
          therein. Acts as a recur target.
    "future-done?":
      name: "future-done?"
      doc: >
        Returns true if future f is done
    "next":
      name: "next"
      doc: >
        Returns a seq of the items after the first. Calls seq on its
          argument.  If there are no more items, returns nil.
    "import":
      name: "import"
      doc: >
        import-list => (package-symbol class-name-symbols*)
        
          For each name in class-name-symbols, adds a mapping from name to the
          class named by package.name to the current namespace. Use :import in the ns
          macro in preference to calling this directly.
    "deliver":
      name: "deliver"
      doc: >
        Alpha - subject to change.
          Delivers the supplied value to the promise, releasing any pending
          derefs. A subsequent call to deliver on a promise will have no effect.
    "symbol":
      name: "symbol"
      doc: >
        Returns a Symbol with the given namespace and name.
    "vals":
      name: "vals"
      doc: >
        Returns a sequence of the map's values.
    "->ArrayChunk":
      name: "->ArrayChunk"
      doc: >
        Positional factory function for class clojure.core.ArrayChunk.
    "select-keys":
      name: "select-keys"
      doc: >
        Returns a map containing only those entries in map whose key is in keys
    "re-matcher":
      name: "re-matcher"
      doc: >
        Returns an instance of java.util.regex.Matcher, for use, e.g. in
          re-find.
    "rand":
      name: "rand"
      doc: >
        Returns a random floating point number between 0 (inclusive) and
          n (default 1) (exclusive).
    "deref":
      name: "deref"
      doc: >
        Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
          returns the in-transaction-value of ref, else returns the
          most-recently-committed value of ref. When applied to a var, agent
          or atom, returns its current state. When applied to a delay, forces
          it if not already forced. When applied to a future, will block if
          computation not complete. When applied to a promise, will block
          until a value is delivered.  The variant taking a timeout can be
          used for blocking references (futures and promises), and will return
          timeout-val if the timeout (in milliseconds) is reached before a
          value is available. See also - realized?.
    "some->":
      name: "some->"
      doc: >
        When expr is not nil, threads it into the first form (via ->),
          and when that result is not nil, through the next etc
    "unchecked-inc":
      name: "unchecked-inc"
      doc: >
        Returns a number one greater than x, a long.
          Note - uses a primitive operator subject to overflow.
    "*math-context*":
      name: "*math-context*"
    "read":
      name: "read"
      doc: >
        Reads the next object from stream, which must be an instance of
          java.io.PushbackReader or some derivee.  stream defaults to the
          current value of *in*.
        
          Note that read can execute code (controlled by *read-eval*),
          and as such should be used only with trusted sources.
        
          For data structure interop use clojure.edn/read
    "sequence":
      name: "sequence"
      doc: >
        Coerces coll to a (possibly empty) sequence, if it is not already
          one. Will not force a lazy seq. (sequence nil) yields ()
    "make-hierarchy":
      name: "make-hierarchy"
      doc: >
        Creates a hierarchy object for use with derive, isa? etc.
    "+":
      name: "+"
      doc: >
        Returns the sum of nums. (+) returns 0. Does not auto-promote
          longs, will throw on overflow. See also: +'
    "number?":
      name: "number?"
      doc: >
        Returns true if x is a Number
    "assoc!":
      name: "assoc!"
      doc: >
        Alpha - subject to change.
          When applied to a transient map, adds mapping of key(s) to
          val(s). When applied to a transient vector, sets the val at index.
          Note - index must be <= (count vector). Returns coll.
    "descendants":
      name: "descendants"
      doc: >
        Returns the immediate and indirect children of tag, through a
          relationship established via derive. h must be a hierarchy obtained
          from make-hierarchy, if not supplied defaults to the global
          hierarchy. Note: does not work on Java type inheritance
          relationships.
    "into-array":
      name: "into-array"
      doc: >
        Returns an array with components set to the values in aseq. The array's
          component type is type if provided, or the type of the first value in
          aseq if present, or Object. All values in aseq must be compatible with
          the component type. Class objects for the primitive types can be obtained
          using, e.g., Integer/TYPE.
    "last":
      name: "last"
      doc: >
        Return the last item in coll, in linear time
    "some-fn":
      name: "some-fn"
      doc: >
        Takes a set of predicates and returns a function f that returns the first logical true value
          returned by one of its composing predicates against any of its arguments, else it returns
          logical false. Note that f is short-circuiting in that it will stop execution on the first
          argument that triggers a logical true result against the original predicates.
    "unchecked-negate":
      name: "unchecked-negate"
      doc: >
        Returns the negation of x, a long.
          Note - uses a primitive operator subject to overflow.
    "integer?":
      name: "integer?"
      doc: >
        Returns true if n is an integer
    "defrecord":
      name: "defrecord"
      doc: >
        Alpha - subject to change
          
          (defrecord name [fields*]  options* specs*)
          
          Currently there are no options.
        
          Each spec consists of a protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args*] body)*
        
          Dynamically generates compiled bytecode for class with the given
          name, in a package with the same name as the current namespace, the
          given fields, and, optionally, methods for protocols and/or
          interfaces.
        
          The class will have the (immutable) fields named by
          fields, which can have type hints. Protocols/interfaces and methods
          are optional. The only methods that can be supplied are those
          declared in the protocols/interfaces.  Note that method bodies are
          not closures, the local environment includes only the named fields,
          and those fields can be accessed directy.
        
          Method definitions take the form:
        
          (methodname [args*] body)
        
          The argument and return types can be hinted on the arg and
          methodname symbols. If not supplied, they will be inferred, so type
          hints should be reserved for disambiguation.
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that a parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations. Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          In the method bodies, the (unqualified) name can be used to name the
          class (for calls to new, instance? etc).
        
          The class will have implementations of several (clojure.lang)
          interfaces generated automatically: IObj (metadata support) and
          IPersistentMap, and all of their superinterfaces.
        
          In addition, defrecord will define type-and-value-based =,
          and will defined Java .hashCode and .equals consistent with the
          contract for java.util.Map.
        
          When AOT compiling, generates compiled bytecode for a class with the
          given name (a symbol), prepends the current ns as the package, and
          writes the .class file to the *compile-path* directory.
        
          Two constructors will be defined, one taking the designated fields
          followed by a metadata map (nil for none) and an extension field
          map (nil for none), and one taking only the fields (using nil for
          meta and extension fields). Note that the field names __meta
          and __extmap are currently reserved and should not be used when
          defining your own records.
        
          Given (defrecord TypeName ...), two factory functions will be
          defined: ->TypeName, taking positional parameters for the fields,
          and map->TypeName, taking a map of keywords to field values.
    "reduced?":
      name: "reduced?"
      doc: >
        Returns true if x is the result of a call to reduced
    "*read-eval*":
      name: "*read-eval*"
      doc: >
        Defaults to true (or value specified by system property, see below)
          ***This setting implies that the full power of the reader is in play,
          including syntax that can cause code to execute. It should never be
          used with untrusted sources. See also: clojure.edn/read.***
        
          When set to logical false in the thread-local binding,
          the eval reader (#=) and record/type literal syntax are disabled in read/load.
          Example (will fail): (binding [*read-eval* false] (read-string "#=(* 2 21)"))
        
          The default binding can be controlled by the system property
          'clojure.read.eval' System properties can be set on the command line
          like this:
        
          java -Dclojure.read.eval=false ...
        
          The system property can also be set to 'unknown' via
          -Dclojure.read.eval=unknown, in which case the default binding
          is :unknown and all reads will fail in contexts where *read-eval*
          has not been explicitly bound to either true or false. This setting
          can be a useful diagnostic tool to ensure that all of your reads
          occur in considered contexts. You can also accomplish this in a
          particular scope by binding *read-eval* to :unknown
          
    "alter":
      name: "alter"
      doc: >
        Must be called in a transaction. Sets the in-transaction-value of
          ref to:
        
          (apply fun in-transaction-value-of-ref args)
        
          and returns the in-transaction-value of ref.
    "prn":
      name: "prn"
      doc: >
        Same as pr followed by (newline). Observes *flush-on-newline*
    "with-meta":
      name: "with-meta"
      doc: >
        Returns an object of the same type and value as obj, with
            map m as its metadata.
    "with-out-str":
      name: "with-out-str"
      doc: >
        Evaluates exprs in a context in which *out* is bound to a fresh
          StringWriter.  Returns the string created by any nested printing
          calls.
    "floats":
      name: "floats"
      doc: >
        Casts to float[]
    "*":
      name: "*"
      doc: >
        Returns the product of nums. (*) returns 1. Does not auto-promote
          longs, will throw on overflow. See also: *'
    "*compile-files*":
      name: "*compile-files*"
      doc: >
        Set to true when compiling files, false otherwise.
    "when-not":
      name: "when-not"
      doc: >
        Evaluates test. If logical false, evaluates body in an implicit do.
    "butlast":
      name: "butlast"
      doc: >
        Return a seq of all but the last item in coll, in linear time
    "-":
      name: "-"
      doc: >
        If no ys are supplied, returns the negation of x, else subtracts
          the ys from x and returns the result. Does not auto-promote
          longs, will throw on overflow. See also: -'
    "->>":
      name: "->>"
      doc: >
        Threads the expr through the forms. Inserts x as the
          last item in the first form, making a list of it if it is not a
          list already. If there are more forms, inserts the first form as the
          last item in second form, etc.
    "reversible?":
      name: "reversible?"
      doc: >
        Returns true if coll implements Reversible
    "rseq":
      name: "rseq"
      doc: >
        Returns, in constant time, a seq of the items in rev (which
          can be a vector or sorted-map), in reverse order. If rev is empty returns nil
    "send-off":
      name: "send-off"
      doc: >
        Dispatch a potentially blocking action to an agent. Returns the
          agent immediately. Subsequently, in a separate thread, the state of
          the agent will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "seq?":
      name: "seq?"
      doc: >
        Return true if x implements ISeq
    "refer-clojure":
      name: "refer-clojure"
      doc: >
        Same as (refer 'clojure.core <filters>)
    "identical?":
      name: "identical?"
      doc: >
        Tests if 2 arguments are the same object
    "..":
      name: ".."
      doc: >
        form => fieldName-symbol or (instanceMethodName-symbol args*)
        
          Expands into a member access (.) of the first member on the first
          argument, followed by the next member on the result, etc. For
          instance:
        
          (.. System (getProperties) (get "os.name"))
        
          expands to:
        
          (. (. System (getProperties)) (get "os.name"))
        
          but is easier to write, read, and understand.
    "print":
      name: "print"
      doc: >
        Prints the object(s) to the output stream that is the current value
          of *out*.  print and println produce output for human consumption.
    "vary-meta":
      name: "vary-meta"
      doc: >
        Returns an object of the same type and value as obj, with
          (apply f (meta obj) args) as its metadata.
    "with-loading-context":
      name: "with-loading-context"
    "agent-error":
      name: "agent-error"
      doc: >
        Returns the exception thrown during an asynchronous action of the
          agent if the agent is failed.  Returns nil if the agent is not
          failed.
    "*command-line-args*":
      name: "*command-line-args*"
      doc: >
        A sequence of the supplied command line arguments, or nil if
          none were supplied
    "bit-flip":
      name: "bit-flip"
      doc: >
        Flip bit at index n
    "zero?":
      name: "zero?"
      doc: >
        Returns true if num is zero, else false
    "bit-and":
      name: "bit-and"
      doc: >
        Bitwise and
    "unquote-splicing":
      name: "unquote-splicing"
    "future":
      name: "future"
      doc: >
        Takes a body of expressions and yields a future object that will
          invoke the body in another thread, and will cache the result and
          return it on all subsequent calls to deref/@. If the computation has
          not yet finished, calls to deref/@ will block, unless the variant of
          deref with timeout is used. See also - realized?.
    "re-groups":
      name: "re-groups"
      doc: >
        Returns the groups from the most recent match/find. If there are no
          nested groups, returns a string of the entire match. If there are
          nested groups, returns a vector of the groups, the first element
          being the entire match.
    "*warn-on-reflection*":
      name: "*warn-on-reflection*"
      doc: >
        When set to true, the compiler will emit warnings when reflection is
          needed to resolve Java method calls or field accesses.
        
          Defaults to false.
    "newline":
      name: "newline"
      doc: >
        Writes a platform-specific newline to *out*
    "replicate":
      name: "replicate"
      doc: >
        DEPRECATED: Use 'repeat' instead.
           Returns a lazy seq of n xs.
    "keep-indexed":
      name: "keep-indexed"
      doc: >
        Returns a lazy sequence of the non-nil results of (f index item). Note,
          this means false return values will be included.  f must be free of
          side-effects.
    "char?":
      name: "char?"
      doc: >
        Return true if x is a Character
    "distinct?":
      name: "distinct?"
      doc: >
        Returns true if no two of the arguments are =
    "remove-ns":
      name: "remove-ns"
      doc: >
        Removes the namespace named by the symbol. Use with caution.
          Cannot be used to remove the clojure namespace.
    "ratio?":
      name: "ratio?"
      doc: >
        Returns true if n is a Ratio
    "xml-seq":
      name: "xml-seq"
      doc: >
        A tree seq on the xml elements as per xml/parse
    "vec":
      name: "vec"
      doc: >
        Creates a new vector containing the contents of coll. Java arrays
          will be aliased and should not be modified.
    "concat":
      name: "concat"
      doc: >
        Returns a lazy seq representing the concatenation of the elements in the supplied colls.
    "update-in":
      name: "update-in"
      doc: >
        'Updates' a value in a nested associative structure, where ks is a
          sequence of keys and f is a function that will take the old value
          and any supplied args and return the new value, and returns a new
          nested structure.  If any levels do not exist, hash-maps will be
          created.
    "vector":
      name: "vector"
      doc: >
        Creates a new vector containing the args.
    "with-bindings*":
      name: "with-bindings*"
      doc: >
        Takes a map of Var/value pairs. Installs for the given Vars the associated
          values as thread-local bindings. Then calls f with the supplied arguments.
          Pops the installed bindings after f returned. Returns whatever f returns.
    "conj":
      name: "conj"
      doc: >
        conj[oin]. Returns a new collection with the xs
            'added'. (conj nil item) returns (item).  The 'addition' may
            happen at different 'places' depending on the concrete type.
    "bases":
      name: "bases"
      doc: >
        Returns the immediate superclass and direct interfaces of c, if any
    "with-redefs":
      name: "with-redefs"
      doc: >
        binding => var-symbol temp-value-expr
        
          Temporarily redefines Vars while executing the body.  The
          temp-value-exprs will be evaluated and each resulting value will
          replace in parallel the root value of its Var.  After the body is
          executed, the root values of all the Vars will be set back to their
          old values.  These temporary changes will be visible in all threads.
          Useful for mocking out functions during testing.
    "/":
      name: "/"
      doc: >
        If no denominators are supplied, returns 1/numerator,
          else returns numerator divided by all of the denominators.
    "unchecked-add":
      name: "unchecked-add"
      doc: >
        Returns the sum of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "ref-set":
      name: "ref-set"
      doc: >
        Must be called in a transaction. Sets the value of ref.
          Returns val.
    "assoc":
      name: "assoc"
      doc: >
        assoc[iate]. When applied to a map, returns a new map of the
            same (hashed/sorted) type, that contains the mapping of key(s) to
            val(s). When applied to a vector, returns a new vector that
            contains val at index. Note - index must be <= (count vector).
    "unchecked-remainder-int":
      name: "unchecked-remainder-int"
      doc: >
        Returns the remainder of division of x by y, both int.
          Note - uses a primitive operator subject to truncation.
    "seque":
      name: "seque"
      doc: >
        Creates a queued seq on another (presumably lazy) seq s. The queued
          seq will produce a concrete seq in the background, and can get up to
          n items ahead of the consumer. n-or-q can be an integer n buffer
          size, or an instance of java.util.concurrent BlockingQueue. Note
          that reading from a seque can block if the reader gets ahead of the
          producer.
    "aset-char":
      name: "aset-char"
      doc: >
        Sets the value at the index/indices. Works on arrays of char. Returns val.
    "boolean":
      name: "boolean"
      doc: >
        Coerce to boolean
    "read-string":
      name: "read-string"
      doc: >
        Reads one object from the string s.
        
          Note that read-string can execute code (controlled by *read-eval*),
          and as such should be used only with trusted sources.
        
          For data structure interop use clojure.edn/read-string
    "neg?":
      name: "neg?"
      doc: >
        Returns true if num is less than zero, else false
    "float-array":
      name: "float-array"
      doc: >
        Creates an array of floats
    "doubles":
      name: "doubles"
      doc: >
        Casts to double[]
    "isa?":
      name: "isa?"
      doc: >
        Returns true if (= child parent), or child is directly or indirectly derived from
          parent, either via a Java type inheritance relationship or a
          relationship established via derive. h must be a hierarchy obtained
          from make-hierarchy, if not supplied defaults to the global
          hierarchy
    "future-call":
      name: "future-call"
      doc: >
        Takes a function of no args and yields a future object that will
          invoke the function in another thread, and will cache the result and
          return it on all subsequent calls to deref/@. If the computation has
          not yet finished, calls to deref/@ will block, unless the variant
          of deref with timeout is used. See also - realized?.
    "doto":
      name: "doto"
      doc: >
        Evaluates x then calls all of the methods and functions with the
          value of x supplied at the front of the given arguments.  The forms
          are evaluated in order.  Returns x.
        
          (doto (new java.util.HashMap) (.put "a" 1) (.put "b" 2))
    "extends?":
      name: "extends?"
      doc: >
        Returns true if atype extends protocol
    "remove-watch":
      name: "remove-watch"
      doc: >
        Alpha - subject to change.
          Removes a watch (set by add-watch) from a reference
    "print-str":
      name: "print-str"
      doc: >
        print to a string, returning it
    "*e":
      name: "*e"
      doc: >
        bound in a repl thread to the most recent exception caught by the repl
    "ref-history-count":
      name: "ref-history-count"
      doc: >
        Returns the history count of a ref
    "rsubseq":
      name: "rsubseq"
      doc: >
        sc must be a sorted collection, test(s) one of <, <=, > or
          >=. Returns a reverse seq of those entries with keys ek for
          which (test (.. sc comparator (compare ek key)) 0) is true
    "*flush-on-newline*":
      name: "*flush-on-newline*"
      doc: >
        When set to true, output will be flushed whenever a newline is printed.
        
          Defaults to true.
    "*out*":
      name: "*out*"
      doc: >
        A java.io.Writer object representing standard output for print operations.
        
          Defaults to System/out, wrapped in an OutputStreamWriter
    "future?":
      name: "future?"
      doc: >
        Returns true if x is a future
    "vector?":
      name: "vector?"
      doc: >
        Return true if x implements IPersistentVector
    "split-at":
      name: "split-at"
      doc: >
        Returns a vector of [(take n coll) (drop n coll)]
    "chunk-cons":
      name: "chunk-cons"
    "ns-refers":
      name: "ns-refers"
      doc: >
        Returns a map of the refer mappings for the namespace.
    "create-struct":
      name: "create-struct"
      doc: >
        Returns a structure basis object.
    "proxy-super":
      name: "proxy-super"
      doc: >
        Use to call a superclass method in the body of a proxy method. 
          Note, expansion captures 'this
    "int-array":
      name: "int-array"
      doc: >
        Creates an array of ints
    "unchecked-long":
      name: "unchecked-long"
      doc: >
        Coerce to long. Subject to rounding or truncation.
    "float":
      name: "float"
      doc: >
        Coerce to float
    "assert":
      name: "assert"
      doc: >
        Evaluates expr and throws an exception if it does not evaluate to
          logical true.
    "map":
      name: "map"
      doc: >
        Returns a lazy sequence consisting of the result of applying f to the
          set of first items of each coll, followed by applying f to the set
          of second items in each coll, until any one of the colls is
          exhausted.  Any remaining items in other colls are ignored. Function
          f should accept number-of-colls arguments.
    "+'":
      name: "+'"
      doc: >
        Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
          See also: +
    "counted?":
      name: "counted?"
      doc: >
        Returns true if coll implements count in constant time
    "memfn":
      name: "memfn"
      doc: >
        Expands into code that creates a fn that expects to be passed an
          object and any args and calls the named instance method on the
          object passing the args. Use when you want to treat a Java method as
          a first-class fn. name may be type-hinted with the method receiver's
          type in order to avoid reflective calls.
    "double-array":
      name: "double-array"
      doc: >
        Creates an array of doubles
    "accessor":
      name: "accessor"
      doc: >
        Returns a fn that, given an instance of a structmap with the basis,
          returns the value at the key.  The key must be in the basis. The
          returned function should be (slightly) more efficient than using
          get, but such use of accessors should be limited to known
          performance-critical areas.
    "*print-length*":
      name: "*print-length*"
      doc: >
        *print-length* controls how many items of each collection the
          printer will print. If it is bound to logical false, there is no
          limit. Otherwise, it must be bound to an integer indicating the maximum
          number of items of each collection to print. If a collection contains
          more items, the printer will print items up to the limit followed by
          '...' to represent the remaining items. The root binding is nil
          indicating no limit.
    "frequencies":
      name: "frequencies"
      doc: >
        Returns a map from distinct items in coll to the number of times
          they appear.
    "chars":
      name: "chars"
      doc: >
        Casts to chars[]
    "class?":
      name: "class?"
      doc: >
        Returns true if x is an instance of Class
    "rand-int":
      name: "rand-int"
      doc: >
        Returns a random integer between 0 (inclusive) and n (exclusive).
    "*1":
      name: "*1"
      doc: >
        bound in a repl thread to the most recent value printed
    "aset-short":
      name: "aset-short"
      doc: >
        Sets the value at the index/indices. Works on arrays of short. Returns val.
    "unchecked-short":
      name: "unchecked-short"
      doc: >
        Coerce to short. Subject to rounding or truncation.
    "prn-str":
      name: "prn-str"
      doc: >
        prn to a string, returning it
    "iterate":
      name: "iterate"
      doc: >
        Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
    "chunk-append":
      name: "chunk-append"
    "when-first":
      name: "when-first"
      doc: >
        bindings => x xs
        
          Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once
    "unchecked-double":
      name: "unchecked-double"
      doc: >
        Coerce to double. Subject to rounding.
    "slurp":
      name: "slurp"
      doc: >
        Opens a reader on f and reads all its contents, returning a string.
          See clojure.java.io/reader for a complete list of supported arguments.
    "restart-agent":
      name: "restart-agent"
      doc: >
        When an agent is failed, changes the agent state to new-state and
          then un-fails the agent so that sends are allowed again.  If
          a :clear-actions true option is given, any actions queued on the
          agent that were being held while it was failed will be discarded,
          otherwise those held actions will proceed.  The new-state must pass
          the validator if any, or restart will throw an exception and the
          agent will remain failed with its old state and error.  Watchers, if
          any, will NOT be notified of the new state.  Throws an exception if
          the agent is not failed.
    "unchecked-int":
      name: "unchecked-int"
      doc: >
        Coerce to int. Subject to rounding or truncation.
    "mapcat":
      name: "mapcat"
      doc: >
        Returns the result of applying concat to the result of applying map
          to f and colls.  Thus function f should return a collection.
    "assoc-in":
      name: "assoc-in"
      doc: >
        Associates a value in a nested associative structure, where ks is a
          sequence of keys and v is the new value and returns a new nested structure.
          If any levels do not exist, hash-maps will be created.
    "get-thread-bindings":
      name: "get-thread-bindings"
      doc: >
        Get a map with the Var/value pairs which is currently in effect for the
          current thread.
    "special-symbol?":
      name: "special-symbol?"
      doc: >
        Returns true if s names a special form
    "ref":
      name: "ref"
      doc: >
        Creates and returns a Ref with an initial value of x and zero or
          more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          :min-history (default 0)
          :max-history (default 10)
        
          If metadata-map is supplied, it will become the metadata on the
          ref. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception. validate-fn will be called on
          transaction commit, when all refs have their final values.
        
          Normally refs accumulate history dynamically as needed to deal with
          read demands. If you know in advance you will need history you can
          set :min-history to ensure it will be available when first needed (instead
          of after a read fault). History is limited, and the limit can be set
          with :max-history.
    "conj!":
      name: "conj!"
      doc: >
        Alpha - subject to change.
          Adds x to the transient collection, and return coll. The 'addition'
          may happen at different 'places' depending on the concrete type.
    "find-var":
      name: "find-var"
      doc: >
        Returns the global var named by the namespace-qualified symbol, or
          nil if no var with that name.
    "inc":
      name: "inc"
      doc: >
        Returns a number one greater than num. Does not auto-promote
          longs, will throw on overflow. See also: inc'
    "future-cancel":
      name: "future-cancel"
      doc: >
        Cancels the future, if possible.
    "every-pred":
      name: "every-pred"
      doc: >
        Takes a set of predicates and returns a function f that returns true if all of its
          composing predicates return a logical true value against all of its arguments, else it returns
          false. Note that f is short-circuiting in that it will stop execution on the first
          argument that triggers a logical false result against the original predicates.
    "definline":
      name: "definline"
      doc: >
        Experimental - like defmacro, except defines a named function whose
          body is the expansion, calls to which may be expanded inline as if
          it were a macro. Cannot be used with variadic (&) args.
    "bound-fn*":
      name: "bound-fn*"
      doc: >
        Returns a function, which will install the same bindings in effect as in
          the thread at the time bound-fn* was called and then call f with any given
          arguments. This may be used to define a helper function which runs on a
          different thread, but needs the same bindings in place.
    "default-data-readers":
      name: "default-data-readers"
      doc: >
        Default map of data reader functions provided by Clojure. May be
          overridden by binding *data-readers*.
    "unchecked-subtract":
      name: "unchecked-subtract"
      doc: >
        Returns the difference of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "ns-name":
      name: "ns-name"
      doc: >
        Returns the name of the namespace, a symbol.
    "shuffle":
      name: "shuffle"
      doc: >
        Return a random permutation of coll
    "defn-":
      name: "defn-"
      doc: >
        same as defn, yielding non-public def
    "*file*":
      name: "*file*"
      doc: >
        The path of the file being evaluated, as a String.
        
          Evaluates to nil when there is no file, eg. in the REPL.
    "re-find":
      name: "re-find"
      doc: >
        Returns the next regex match, if any, of string to pattern, using
          java.util.regex.Matcher.find().  Uses re-groups to return the
          groups.
    "bit-not":
      name: "bit-not"
      doc: >
        Bitwise complement
    "construct-proxy":
      name: "construct-proxy"
      doc: >
        Takes a proxy class and any arguments for its superclass ctor and
          creates and returns an instance of the proxy.
    "ref-min-history":
      name: "ref-min-history"
      doc: >
        Gets the min-history of a ref, or sets it and returns the ref
    "destructure":
      name: "destructure"
    "seq":
      name: "seq"
      doc: >
        Returns a seq on the collection. If the collection is
            empty, returns nil.  (seq nil) returns nil. seq also works on
            Strings, native Java arrays (of reference types) and any objects
            that implement Iterable.
    "intern":
      name: "intern"
      doc: >
        Finds or creates a var named by the symbol name in the namespace
          ns (which can be a symbol or a namespace), setting its root binding
          to val if supplied. The namespace must exist. The var will adopt any
          metadata from the name symbol.  Returns the var.
    "unchecked-multiply-int":
      name: "unchecked-multiply-int"
      doc: >
        Returns the product of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "pvalues":
      name: "pvalues"
      doc: >
        Returns a lazy sequence of the values of the exprs, which are
          evaluated in parallel
    "to-array-2d":
      name: "to-array-2d"
      doc: >
        Returns a (potentially-ragged) 2-dimensional array of Objects
          containing the contents of coll, which can be any Collection of any
          Collection.
    "sorted-map-by":
      name: "sorted-map-by"
      doc: >
        keyval => key val
          Returns a new sorted map with supplied mappings, using the supplied
          comparator.  If any keys are equal, they are handled as if by
          repeated uses of assoc.
    "filter":
      name: "filter"
      doc: >
        Returns a lazy sequence of the items in coll for which
          (pred item) returns true. pred must be free of side-effects.
    "->VecNode":
      name: "->VecNode"
      doc: >
        Positional factory function for class clojure.core.VecNode.
    "*verbose-defrecords*":
      name: "*verbose-defrecords*"
    "*clojure-version*":
      name: "*clojure-version*"
      doc: >
        The version info for Clojure core, as a map containing :major :minor 
          :incremental and :qualifier keys. Feature releases may increment 
          :minor and/or :major, bugfix releases will increment :incremental. 
          Possible values of :qualifier include "GA", "SNAPSHOT", "RC-x" "BETA-x"
    "var?":
      name: "var?"
      doc: >
        Returns true if v is of type clojure.lang.Var
    "alter-meta!":
      name: "alter-meta!"
      doc: >
        Atomically sets the metadata for a namespace/var/ref/agent/atom to be:
        
          (apply f its-current-meta args)
        
          f must be free of side-effects
    "unchecked-dec-int":
      name: "unchecked-dec-int"
      doc: >
        Returns a number one less than x, an int.
          Note - uses a primitive operator subject to overflow.
    "comment":
      name: "comment"
      doc: >
        Ignores body, yields nil
    "key":
      name: "key"
      doc: >
        Returns the key of the map entry.
    "class":
      name: "class"
      doc: >
        Returns the Class of x
    "re-seq":
      name: "re-seq"
      doc: >
        Returns a lazy sequence of successive matches of pattern in string,
          using java.util.regex.Matcher.find(), each such match processed with
          re-groups.
    "-cache-protocol-fn":
      name: "-cache-protocol-fn"
    "ns":
      name: "ns"
      doc: >
        Sets *ns* to the namespace named by name (unevaluated), creating it
          if needed.  references can be zero or more of: (:refer-clojure ...)
          (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)
          with the syntax of refer-clojure/require/use/import/load/gen-class
          respectively, except the arguments are unevaluated and need not be
          quoted. (:gen-class ...), when supplied, defaults to :name
          corresponding to the ns name, :main true, :impl-ns same as ns, and
          :init-impl-ns true. All options of gen-class are
          supported. The :gen-class directive is ignored when not
          compiling. If :gen-class is not supplied, when compiled only an
          nsname__init.class will be generated. If :refer-clojure is not used, a
          default (refer 'clojure) is used.  Use of ns is preferred to
          individual calls to in-ns/require/use/import:
        
          (ns foo.bar
            (:refer-clojure :exclude [ancestors printf])
            (:require (clojure.contrib sql combinatorics))
            (:use (my.lib this that))
            (:import (java.util Date Timer Random)
                     (java.sql Connection Statement)))
    "empty?":
      name: "empty?"
      doc: >
        Returns true if coll has no items - same as (not (seq coll)).
          Please use the idiom (seq x) rather than (not (empty? x))
    "test":
      name: "test"
      doc: >
        test [v] finds fn at key :test in var metadata and calls it,
          presuming failure will throw exception
    "print-dup":
      name: "print-dup"
    "create-ns":
      name: "create-ns"
      doc: >
        Create a new namespace named by the symbol if one doesn't already
          exist, returns it or the already-existing namespace of the same
          name.
    "name":
      name: "name"
      doc: >
        Returns the name String of a string, symbol or keyword.
    "list?":
      name: "list?"
      doc: >
        Returns true if x implements IPersistentList
    "nthrest":
      name: "nthrest"
      doc: >
        Returns the nth rest of coll, coll when n is 0.
    "aset":
      name: "aset"
      doc: >
        Sets the value at the index/indices. Works on Java arrays of
          reference types. Returns val.
    "nnext":
      name: "nnext"
      doc: >
        Same as (next (next x))
    "doall":
      name: "doall"
      doc: >
        When lazy sequences are produced via functions that have side
          effects, any effects other than those needed to produce the first
          element in the seq do not occur until the seq is consumed. doall can
          be used to force any effects. Walks through the successive nexts of
          the seq, retains the head and returns it, thus causing the entire
          seq to reside in memory at one time.
    "extenders":
      name: "extenders"
      doc: >
        Returns a collection of the types explicitly extending protocol
    "macroexpand-1":
      name: "macroexpand-1"
      doc: >
        If form represents a macro form, returns its expansion,
          else returns form.
    "not-any?":
      name: "not-any?"
      doc: >
        Returns false if (pred x) is logical true for any x in coll,
          else true.
    "resultset-seq":
      name: "resultset-seq"
      doc: >
        Creates and returns a lazy sequence of structmaps corresponding to
          the rows in the java.sql.ResultSet rs
    "reductions":
      name: "reductions"
      doc: >
        Returns a lazy seq of the intermediate values of the reduction (as
          per reduce) of coll by f, starting with init.
    "into":
      name: "into"
      doc: >
        Returns a new coll consisting of to-coll with all of the items of
          from-coll conjoined.
    "with-precision":
      name: "with-precision"
      doc: >
        Sets the precision and rounding mode to be used for BigDecimal operations.
        
          Usage: (with-precision 10 (/ 1M 3))
          or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))
        
          The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,
          HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.
    "*use-context-classloader*":
      name: "*use-context-classloader*"
    "transient":
      name: "transient"
      doc: >
        Alpha - subject to change.
          Returns a new, transient version of the collection, in constant time.
    "ffirst":
      name: "ffirst"
      doc: >
        Same as (first (first x))
    "bit-clear":
      name: "bit-clear"
      doc: >
        Clear bit at index n
    "proxy-name":
      name: "proxy-name"
    "extend-type":
      name: "extend-type"
      doc: >
        A macro that expands into an extend call. Useful when you are
          supplying the definitions explicitly inline, extend-type
          automatically creates the maps required by extend.  Propagates the
          class as a type hint on the first argument of all fns.
        
          (extend-type MyType 
            Countable
              (cnt [c] ...)
            Foo
              (bar [x y] ...)
              (baz ([x] ...) ([x y & zs] ...)))
        
          expands into:
        
          (extend MyType
           Countable
             {:cnt (fn [c] ...)}
           Foo
             {:baz (fn ([x] ...) ([x y & zs] ...))
              :bar (fn [x y] ...)})
    "load-reader":
      name: "load-reader"
      doc: >
        Sequentially read and evaluate the set of forms contained in the
          stream/file
    "with-redefs-fn":
      name: "with-redefs-fn"
      doc: >
        Temporarily redefines Vars during a call to func.  Each val of
          binding-map will replace the root value of its key which must be
          a Var.  After func is called with no args, the root values of all
          the Vars will be set back to their old values.  These temporary
          changes will be visible in all threads.  Useful for mocking out
          functions during testing.
    "or":
      name: "or"
      doc: >
        Evaluates exprs one at a time, from left to right. If a form
          returns a logical true value, or returns that value and doesn't
          evaluate any of the other expressions, otherwise it returns the
          value of the last expression. (or) returns nil.
    "hash":
      name: "hash"
      doc: >
        Returns the hash code of its argument. Note this is the hash code
          consistent with =, and thus is different than .hashCode for Integer,
          Short, Byte and Clojure collections.
    "as->":
      name: "as->"
      doc: >
        Binds name to expr, evaluates the first form in the lexical context
          of that binding, then binds name to that result, repeating for each
          successive form, returning the result of the last form.
    "inc'":
      name: "inc'"
      doc: >
        Returns a number one greater than num. Supports arbitrary precision.
          See also: inc
    "print-ctor":
      name: "print-ctor"
    "associative?":
      name: "associative?"
      doc: >
        Returns true if coll implements Associative
    "float?":
      name: "float?"
      doc: >
        Returns true if n is a floating point number
    "drop-last":
      name: "drop-last"
      doc: >
        Return a lazy sequence of all but the last n (default 1) items in coll
    "replace":
      name: "replace"
      doc: >
        Given a map of replacement pairs and a vector/collection, returns a
          vector/seq with any elements = a key in smap replaced with the
          corresponding val in smap
    "decimal?":
      name: "decimal?"
      doc: >
        Returns true if n is a BigDecimal
    "defn":
      name: "defn"
      doc: >
        Same as (def name (fn [params* ] exprs*)) or (def
            name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
            to the var metadata. prepost-map defines a map with optional keys
            :pre and :post that contain collections of pre or post conditions.
    "parents":
      name: "parents"
      doc: >
        Returns the immediate parents of tag, either via a Java type
          inheritance relationship or a relationship established via derive. h
          must be a hierarchy obtained from make-hierarchy, if not supplied
          defaults to the global hierarchy
    "map?":
      name: "map?"
      doc: >
        Return true if x implements IPersistentMap
    "prefers":
      name: "prefers"
      doc: >
        Given a multimethod, returns a map of preferred value -> set of other values
    "numerator":
      name: "numerator"
      doc: >
        Returns the numerator part of a Ratio.
    "condp":
      name: "condp"
      doc: >
        Takes a binary predicate, an expression, and a set of clauses.
          Each clause can take the form of either:
        
          test-expr result-expr
        
          test-expr :>> result-fn
        
          Note :>> is an ordinary keyword.
        
          For each clause, (pred test-expr expr) is evaluated. If it returns
          logical true, the clause is a match. If a binary clause matches, the
          result-expr is returned, if a ternary clause matches, its result-fn,
          which must be a unary function, is called with the result of the
          predicate as its argument, the result of that call being the return
          value of condp. A single default expression can follow the clauses,
          and its value will be returned if no clause matches. If no default
          expression is provided and no clause matches, an
          IllegalArgumentException is thrown.
    "quot":
      name: "quot"
      doc: >
        quot[ient] of dividing numerator by denominator.
    "chunk-rest":
      name: "chunk-rest"
    "unchecked-negate-int":
      name: "unchecked-negate-int"
      doc: >
        Returns the negation of x, an int.
          Note - uses a primitive operator subject to overflow.
    "file-seq":
      name: "file-seq"
      doc: >
        A tree seq on java.io.Files
    "send":
      name: "send"
      doc: >
        Dispatch an action to an agent. Returns the agent immediately.
          Subsequently, in a thread from a thread pool, the state of the agent
          will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "with-local-vars":
      name: "with-local-vars"
      doc: >
        varbinding=> symbol init-expr
        
          Executes the exprs in a context in which the symbols are bound to
          vars with per-thread bindings to the init-exprs.  The symbols refer
          to the var objects themselves, and must be accessed with var-get and
          var-set
    "reverse":
      name: "reverse"
      doc: >
        Returns a seq of the items in coll in reverse order. Not lazy.
    "with-bindings":
      name: "with-bindings"
      doc: >
        Takes a map of Var/value pairs. Installs for the given Vars the associated
          values as thread-local bindings. The executes body. Pops the installed
          bindings after body was evaluated. Returns the value of body.
    "count":
      name: "count"
      doc: >
        Returns the number of items in the collection. (count nil) returns
          0.  Also works on strings, arrays, and Java Collections and Maps
    "get-proxy-class":
      name: "get-proxy-class"
      doc: >
        Takes an optional single class followed by zero or more
          interfaces. If not supplied class defaults to Object.  Creates an
          returns an instance of a proxy class derived from the supplied
          classes. The resulting value is cached and used for any subsequent
          requests for the same class set. Returns a Class object.
    "set":
      name: "set"
      doc: >
        Returns a set of the distinct elements of coll.
    "ex-info":
      name: "ex-info"
      doc: >
        Alpha - subject to change.
           Create an instance of ExceptionInfo, a RuntimeException subclass
           that carries a map of additional data.
    "unchecked-subtract-int":
      name: "unchecked-subtract-int"
      doc: >
        Returns the difference of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "when-let":
      name: "when-let"
      doc: >
        bindings => binding-form test
        
          When test is true, evaluates body with binding-form bound to the value of test
    "comp":
      name: "comp"
      doc: >
        Takes a set of functions and returns a fn that is the composition
          of those fns.  The returned fn takes a variable number of args,
          applies the rightmost of fns to the args, the next
          fn (right-to-left) to the result, etc.
    "nth":
      name: "nth"
      doc: >
        Returns the value at the index. get returns nil if index out of
          bounds, nth throws an exception unless not-found is supplied.  nth
          also works for strings, Java arrays, regex Matchers and Lists, and,
          in O(n) time, for sequences.
    "byte":
      name: "byte"
      doc: >
        Coerce to byte
    "dissoc!":
      name: "dissoc!"
      doc: >
        Alpha - subject to change.
          Returns a transient map that doesn't contain a mapping for key(s).
    "*err*":
      name: "*err*"
      doc: >
        A java.io.Writer object representing standard error for print operations.
        
          Defaults to System/err, wrapped in a PrintWriter
    "constantly":
      name: "constantly"
      doc: >
        Returns a function that takes any number of arguments and returns x.
    "load":
      name: "load"
      doc: >
        Loads Clojure code from resources in classpath. A path is interpreted as
          classpath-relative if it begins with a slash or relative to the root
          directory for the current namespace otherwise.
    "namespace":
      name: "namespace"
      doc: >
        Returns the namespace String of a symbol or keyword, or nil if not present.
    "pr-str":
      name: "pr-str"
      doc: >
        pr to a string, returning it
    "<":
      name: "<"
      doc: >
        Returns non-nil if nums are in monotonically increasing order,
          otherwise false.
    "rationalize":
      name: "rationalize"
      doc: >
        returns the rational value of num
    "sort-by":
      name: "sort-by"
      doc: >
        Returns a sorted sequence of the items in coll, where the sort
          order is determined by comparing (keyfn item).  If no comparator is
          supplied, uses compare.  comparator must implement
          java.util.Comparator.  If coll is a Java array, it will be modified.
          To avoid this, sort a copy of the array.
    "->VecSeq":
      name: "->VecSeq"
      doc: >
        Positional factory function for class clojure.core.VecSeq.
    "cycle":
      name: "cycle"
      doc: >
        Returns a lazy (infinite!) sequence of repetitions of the items in coll.
    "peek":
      name: "peek"
      doc: >
        For a list or queue, same as first, for a vector, same as, but much
          more efficient than, last. If the collection is empty, returns nil.
    "denominator":
      name: "denominator"
      doc: >
        Returns the denominator part of a Ratio.
    "reduce":
      name: "reduce"
      doc: >
        f should be a function of 2 arguments. If val is not supplied,
          returns the result of applying f to the first 2 items in coll, then
          applying f to that result and the 3rd item, etc. If coll contains no
          items, f must accept no arguments as well, and reduce returns the
          result of calling f with no arguments.  If coll has only 1 item, it
          is returned and f is not called.  If val is supplied, returns the
          result of applying f to val and the first item in coll, then
          applying f to that result and the 2nd item, etc. If coll contains no
          items, returns val and f is not called.
    "interleave":
      name: "interleave"
      doc: >
        Returns a lazy seq of the first item in each coll, then the second etc.
    "amap":
      name: "amap"
      doc: >
        Maps an expression across an array a, using an index named idx, and
          return value named ret, initialized to a clone of a, then setting 
          each element of ret to the evaluation of expr, returning the new 
          array ret.
    "->":
      name: "->"
      doc: >
        Threads the expr through the forms. Inserts x as the
          second item in the first form, making a list of it if it is not a
          list already. If there are more forms, inserts the first form as the
          second item in second form, etc.
    "cons":
      name: "cons"
      doc: >
        Returns a new seq where x is the first element and seq is
            the rest.
    "macroexpand":
      name: "macroexpand"
      doc: >
        Repeatedly calls macroexpand-1 on form until it no longer
          represents a macro form, then returns it.  Note neither
          macroexpand-1 nor macroexpand expand macros in subforms.
    "var-set":
      name: "var-set"
      doc: >
        Sets the value in the var object to val. The var must be
         thread-locally bound.
    "str":
      name: "str"
      doc: >
        With no args, returns the empty string. With one arg x, returns
          x.toString().  (str nil) returns the empty string. With more than
          one arg, returns the concatenation of the str values of the args.
    "aset-boolean":
      name: "aset-boolean"
      doc: >
        Sets the value at the index/indices. Works on arrays of boolean. Returns val.
    "ns-imports":
      name: "ns-imports"
      doc: >
        Returns a map of the import mappings for the namespace.
    "while":
      name: "while"
      doc: >
        Repeatedly executes body while test expression is true. Presumes
          some side-effect will cause test to become false/nil. Returns nil
    "remove-all-methods":
      name: "remove-all-methods"
      doc: >
        Removes all of the methods of multimethod.
    "first":
      name: "first"
      doc: >
        Returns the first item in the collection. Calls seq on its
            argument. If coll is nil, returns nil.
    "bean":
      name: "bean"
      doc: >
        Takes a Java object and returns a read-only implementation of the
          map abstraction based upon its JavaBean properties.
    "=":
      name: "="
      doc: >
        Equality. Returns true if x equals y, false if not. Same as
          Java x.equals(y) except it also works for nil, and compares
          numbers and collections in a type-independent manner.  Clojure's immutable data
          structures define equals() (and thus =) as a value, not an identity,
          comparison.
    "memoize":
      name: "memoize"
      doc: >
        Returns a memoized version of a referentially transparent function. The
          memoized version of the function keeps a cache of the mapping from arguments
          to results and, when calls with the same arguments are repeated often, has
          higher performance at the expense of higher memory use.
    "var-get":
      name: "var-get"
      doc: >
        Gets the value in the var object
    "unchecked-float":
      name: "unchecked-float"
      doc: >
        Coerce to float. Subject to rounding.
    "range":
      name: "range"
      doc: >
        Returns a lazy seq of nums from start (inclusive) to end
          (exclusive), by step, where start defaults to 0, step to 1, and end
          to infinity.
    "tree-seq":
      name: "tree-seq"
      doc: >
        Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
           branch? must be a fn of one arg that returns true if passed a node
           that can have children (but may not).  children must be a fn of one
           arg that returns a sequence of the children. Will only be called on
           nodes for which branch? returns true. Root is the root node of the
          tree.
    "defmacro":
      name: "defmacro"
      doc: >
        Like defn, but the resulting function name is declared as a
          macro and will be used as a macro by the compiler when it is
          called.
    "set-validator!":
      name: "set-validator!"
      doc: >
        Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a
          side-effect-free fn of one argument, which will be passed the intended
          new state on any state change. If the new state is unacceptable, the
          validator-fn should return false or throw an exception. If the current state (root
          value if var) is not acceptable to the new validator, an exception
          will be thrown and the validator will not be changed.
    "aset-double":
      name: "aset-double"
      doc: >
        Sets the value at the index/indices. Works on arrays of double. Returns val.
    "*'":
      name: "*'"
      doc: >
        Returns the product of nums. (*) returns 1. Supports arbitrary precision.
          See also: *
    "case":
      name: "case"
      doc: >
        Takes an expression, and a set of clauses.
        
          Each clause can take the form of either:
        
          test-constant result-expr
        
          (test-constant1 ... test-constantN)  result-expr
        
          The test-constants are not evaluated. They must be compile-time
          literals, and need not be quoted.  If the expression is equal to a
          test-constant, the corresponding result-expr is returned. A single
          default expression can follow the clauses, and its value will be
          returned if no clause matches. If no default expression is provided
          and no clause matches, an IllegalArgumentException is thrown.
        
          Unlike cond and condp, case does a constant-time dispatch, the
          clauses are not considered sequentially.  All manner of constant
          expressions are acceptable in case, including numbers, strings,
          symbols, keywords, and (Clojure) composites thereof. Note that since
          lists are used to group multiple constants that map to the same
          expression, a vector can be used to match a list if needed. The
          test-constants need not be all of the same type.
    "unchecked-divide-int":
      name: "unchecked-divide-int"
      doc: >
        Returns the division of x by y, both int.
          Note - uses a primitive operator subject to truncation.
    "enumeration-seq":
      name: "enumeration-seq"
      doc: >
        Returns a seq on a java.util.Enumeration
    "prefer-method":
      name: "prefer-method"
      doc: >
        Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y 
           when there is a conflict
    "partition-all":
      name: "partition-all"
      doc: >
        Returns a lazy sequence of lists like partition, but may include
          partitions with fewer than n items at the end.
    "ensure":
      name: "ensure"
      doc: >
        Must be called in a transaction. Protects the ref from modification
          by other transactions.  Returns the in-transaction-value of
          ref. Allows for more concurrency than (ref-set ref @ref)
    "reduced":
      name: "reduced"
      doc: >
        Wraps x in a way such that a reduce will terminate with the value x
    "find-ns":
      name: "find-ns"
      doc: >
        Returns the namespace named by the symbol or nil if it doesn't exist.
    "not-every?":
      name: "not-every?"
      doc: >
        Returns false if (pred x) is logical true for every x in
          coll, else true.
    "struct-map":
      name: "struct-map"
      doc: >
        Returns a new structmap instance with the keys of the
          structure-basis. keyvals may contain all, some or none of the basis
          keys - where values are not supplied they will default to nil.
          keyvals can also contain keys not in the basis.
    ">":
      name: ">"
      doc: >
        Returns non-nil if nums are in monotonically decreasing order,
          otherwise false.
    "max":
      name: "max"
      doc: >
        Returns the greatest of the nums.
    "proxy-mappings":
      name: "proxy-mappings"
      doc: >
        Takes a proxy instance and returns the proxy's fn map.
    "identity":
      name: "identity"
      doc: >
        Returns its argument.
    "ints":
      name: "ints"
      doc: >
        Casts to int[]
    "fnext":
      name: "fnext"
      doc: >
        Same as (first (next x))
    "biginteger":
      name: "biginteger"
      doc: >
        Coerce to BigInteger
    "min-key":
      name: "min-key"
      doc: >
        Returns the x for which (k x), a number, is least.
    "reset-meta!":
      name: "reset-meta!"
      doc: >
        Atomically resets the metadata for a namespace/var/ref/agent/atom
    "push-thread-bindings":
      name: "push-thread-bindings"
      doc: >
        WARNING: This is a low-level function. Prefer high-level macros like
          binding where ever possible.
        
          Takes a map of Var/value pairs. Binds each Var to the associated value for
          the current thread. Each call *MUST* be accompanied by a matching call to
          pop-thread-bindings wrapped in a try-finally!
          
              (push-thread-bindings bindings)
              (try
                ...
                (finally
                  (pop-thread-bindings)))
    "unchecked-add-int":
      name: "unchecked-add-int"
      doc: >
        Returns the sum of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "subs":
      name: "subs"
      doc: >
        Returns the substring of s beginning at start inclusive, and ending
          at end (defaults to length of string), exclusive.
    "compile":
      name: "compile"
      doc: >
        Compiles the namespace named by the symbol lib into a set of
          classfiles. The source for the lib must be in a proper
          classpath-relative directory. The output files will go into the
          directory specified by *compile-path*, and that directory too must
          be in the classpath.
    "agent-errors":
      name: "agent-errors"
      doc: >
        DEPRECATED: Use 'agent-error' instead.
          Returns a sequence of the exceptions thrown during asynchronous
          actions of the agent.
    "clear-agent-errors":
      name: "clear-agent-errors"
      doc: >
        DEPRECATED: Use 'restart-agent' instead.
          Clears any exceptions thrown during asynchronous actions of the
          agent, allowing subsequent actions to occur.
    "printf":
      name: "printf"
      doc: >
        Prints formatted output, as per format
    "ns-resolve":
      name: "ns-resolve"
      doc: >
        Returns the var or Class to which a symbol will be resolved in the
          namespace (unless found in the environment), else nil.  Note that
          if the symbol is fully qualified, the var/Class to which it resolves
          need not be present in the namespace.
    "method-sig":
      name: "method-sig"
    "*default-data-reader-fn*":
      name: "*default-data-reader-fn*"
      doc: >
        When no data reader is found for a tag and *default-data-reader-fn*
          is non-nil, it will be called with two arguments,
          the tag and the value.  If *default-data-reader-fn* is nil (the
          default), an exception will be thrown for the unknown tag.
    ">=":
      name: ">="
      doc: >
        Returns non-nil if nums are in monotonically non-increasing order,
          otherwise false.
    "shutdown-agents":
      name: "shutdown-agents"
      doc: >
        Initiates a shutdown of the thread pools that back the agent
          system. Running actions will complete, but no new actions will be
          accepted
    "reduce-kv":
      name: "reduce-kv"
      doc: >
        Reduces an associative collection. f should be a function of 3
          arguments. Returns the result of applying f to init, the first key
          and the first value in coll, then applying f to that result and the
          2nd key and value, etc. If coll contains no entries, returns init
          and f is not called. Note that reduce-kv is supported on vectors,
          where the keys will be the ordinals.
    "reset!":
      name: "reset!"
      doc: >
        Sets the value of atom to newval without regard for the
          current value. Returns newval.
    "even?":
      name: "even?"
      doc: >
        Returns true if n is even, throws an exception if n is not an integer
    "require":
      name: "require"
      doc: >
        Loads libs, skipping any that are already loaded. Each argument is
          either a libspec that identifies a lib, a prefix list that identifies
          multiple libs whose names share a common prefix, or a flag that modifies
          how all the identified libs are loaded. Use :require in the ns macro
          in preference to calling this directly.
        
          Libs
        
          A 'lib' is a named set of resources in classpath whose contents define a
          library of Clojure code. Lib names are symbols and each lib is associated
          with a Clojure namespace and a Java package that share its name. A lib's
          name also locates its root directory within classpath using Java's
          package name to classpath-relative path mapping. All resources in a lib
          should be contained in the directory structure under its root directory.
          All definitions a lib makes should be in its associated namespace.
        
          'require loads a lib by loading its root resource. The root resource path
          is derived from the lib name in the following manner:
          Consider a lib named by the symbol 'x.y.z; it has the root directory
          <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root
          resource should contain code to create the lib's namespace (usually by using
          the ns macro) and load any additional lib resources.
        
          Libspecs
        
          A libspec is a lib name or a vector containing a lib name followed by
          options expressed as sequential keywords and arguments.
        
          Recognized options:
          :as takes a symbol as its argument and makes that symbol an alias to the
            lib's namespace in the current namespace.
          :refer takes a list of symbols to refer from the namespace or the :all
            keyword to bring in all public vars.
        
          Prefix Lists
        
          It's common for Clojure code to depend on several libs whose names have
          the same prefix. When specifying libs, prefix lists can be used to reduce
          repetition. A prefix list contains the shared prefix followed by libspecs
          with the shared prefix removed from the lib names. After removing the
          prefix, the names that remain must not contain any periods.
        
          Flags
        
          A flag is a keyword.
          Recognized flags: :reload, :reload-all, :verbose
          :reload forces loading of all the identified libs even if they are
            already loaded
          :reload-all implies :reload and also forces loading of all libs that the
            identified libs directly or indirectly load via require or use
          :verbose triggers printing information about each load, alias, and refer
        
          Example:
        
          The following would load the libraries clojure.zip and clojure.set
          abbreviated as 's'.
        
          (require '(clojure zip [set :as s]))
    "bit-shift-left":
      name: "bit-shift-left"
      doc: >
        Bitwise shift left
    "dec'":
      name: "dec'"
      doc: >
        Returns a number one less than num. Supports arbitrary precision.
          See also: dec
    "methods":
      name: "methods"
      doc: >
        Given a multimethod, returns a map of dispatch values -> dispatch fns
    "future-cancelled?":
      name: "future-cancelled?"
      doc: >
        Returns true if future f is cancelled
    "compare":
      name: "compare"
      doc: >
        Comparator. Returns a negative number, zero, or a positive number
          when x is logically 'less than', 'equal to', or 'greater than'
          y. Same as Java x.compareTo(y) except it also works for nil, and
          compares numbers and collections in a type-independent manner. x
          must implement Comparable
    "deftype":
      name: "deftype"
      doc: >
        Alpha - subject to change
          
          (deftype name [fields*]  options* specs*)
          
          Currently there are no options.
        
          Each spec consists of a protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args*] body)*
        
          Dynamically generates compiled bytecode for class with the given
          name, in a package with the same name as the current namespace, the
          given fields, and, optionally, methods for protocols and/or
          interfaces. 
        
          The class will have the (by default, immutable) fields named by
          fields, which can have type hints. Protocols/interfaces and methods
          are optional. The only methods that can be supplied are those
          declared in the protocols/interfaces.  Note that method bodies are
          not closures, the local environment includes only the named fields,
          and those fields can be accessed directy. Fields can be qualified
          with the metadata :volatile-mutable true or :unsynchronized-mutable
          true, at which point (set! afield aval) will be supported in method
          bodies. Note well that mutable fields are extremely difficult to use
          correctly, and are present only to facilitate the building of higher
          level constructs, such as Clojure's reference types, in Clojure
          itself. They are for experts only - if the semantics and
          implications of :volatile-mutable or :unsynchronized-mutable are not
          immediately apparent to you, you should not be using them.
        
          Method definitions take the form:
        
          (methodname [args*] body)
        
          The argument and return types can be hinted on the arg and
          methodname symbols. If not supplied, they will be inferred, so type
          hints should be reserved for disambiguation.
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that a parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations. Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          In the method bodies, the (unqualified) name can be used to name the
          class (for calls to new, instance? etc).
        
          When AOT compiling, generates compiled bytecode for a class with the
          given name (a symbol), prepends the current ns as the package, and
          writes the .class file to the *compile-path* directory.
        
          One constructor will be defined, taking the designated fields.  Note
          that the field names __meta and __extmap are currently reserved and
          should not be used when defining your own types.
        
          Given (deftype TypeName ...), a factory function called ->TypeName
          will be defined, taking positional parameters for the fields
    "sorted-set-by":
      name: "sorted-set-by"
      doc: >
        Returns a new sorted set with supplied keys, using the supplied
          comparator.  Any equal keys are handled as if by repeated uses of
          conj.
    "cast":
      name: "cast"
      doc: >
        Throws a ClassCastException if x is not a c, else returns x.
    "namespace-munge":
      name: "namespace-munge"
      doc: >
        Convert a Clojure namespace name to a legal Java package name.
    "supers":
      name: "supers"
      doc: >
        Returns the immediate and indirect superclasses and interfaces of c, if any
    "pcalls":
      name: "pcalls"
      doc: >
        Executes the no-arg fns in parallel, returning a lazy sequence of
          their values
    "load-string":
      name: "load-string"
      doc: >
        Sequentially read and evaluate the set of forms contained in the
          string
    "group-by":
      name: "group-by"
      doc: >
        Returns a map of the elements of coll keyed by the result of
          f on each element. The value at each key will be a vector of the
          corresponding elements, in the order they appeared in coll.
    "get":
      name: "get"
      doc: >
        Returns the value mapped to key, not-found or nil if key not present.
    "<=":
      name: "<="
      doc: >
        Returns non-nil if nums are in monotonically non-decreasing order,
          otherwise false.
    "await":
      name: "await"
      doc: >
        Blocks the current thread (indefinitely!) until all actions
          dispatched thus far, from this thread or agent, to the agent(s) have
          occurred.  Will block on failed agents.  Will never return if
          a failed agent is restarted with :clear-actions true.
    "resolve":
      name: "resolve"
      doc: >
        same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)
    "bytes":
      name: "bytes"
      doc: >
        Casts to bytes[]
    "print-method":
      name: "print-method"
    "bound?":
      name: "bound?"
      doc: >
        Returns true if all of the vars provided as arguments have any bound value, root or thread-local.
           Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.
    "loaded-libs":
      name: "loaded-libs"
      doc: >
        Returns a sorted set of symbols naming the currently loaded libs
    "fnil":
      name: "fnil"
      doc: >
        Takes a function f, and returns a function that calls f, replacing
          a nil first argument to f with the supplied value x. Higher arity
          versions can replace arguments in the second and third
          positions (y, z). Note that the function f can take any number of
          arguments, not just the one(s) being nil-patched.
    "force":
      name: "force"
      doc: >
        If x is a Delay, returns the (possibly cached) value of its expression, else returns x
    "partial":
      name: "partial"
      doc: >
        Takes a function f and fewer than the normal arguments to f, and
          returns a fn that takes a variable number of additional args. When
          called, the returned function calls f with args + additional args.
    "pmap":
      name: "pmap"
      doc: >
        Like map, except f is applied in parallel. Semi-lazy in that the
          parallel computation stays ahead of the consumption, but doesn't
          realize the entire result unless required. Only useful for
          computationally intensive functions where the time of f dominates
          the coordination overhead.
    "if-let":
      name: "if-let"
      doc: >
        bindings => binding-form test
        
          If test is true, evaluates then with binding-form bound to the value of 
          test, if not, yields else
    "comparator":
      name: "comparator"
      doc: >
        Returns an implementation of java.util.Comparator based upon pred.
    "pos?":
      name: "pos?"
      doc: >
        Returns true if num is greater than zero, else false
    "char":
      name: "char"
      doc: >
        Coerce to char
    "take-while":
      name: "take-while"
      doc: >
        Returns a lazy sequence of successive items from coll while
          (pred item) returns true. pred must be free of side-effects.
    "extend-protocol":
      name: "extend-protocol"
      doc: >
        Useful when you want to provide several implementations of the same
          protocol all at once. Takes a single protocol and the implementation
          of that protocol for one or more types. Expands into calls to
          extend-type:
        
          (extend-protocol Protocol
            AType
              (foo [x] ...)
              (bar [x y] ...)
            BType
              (foo [x] ...)
              (bar [x y] ...)
            AClass
              (foo [x] ...)
              (bar [x y] ...)
            nil
              (foo [x] ...)
              (bar [x y] ...))
        
          expands into:
        
          (do
           (clojure.core/extend-type AType Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type BType Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type AClass Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type nil Protocol 
             (foo [x] ...) 
             (bar [x y] ...)))
    "and":
      name: "and"
      doc: >
        Evaluates exprs one at a time, from left to right. If a form
          returns logical false (nil or false), and returns that value and
          doesn't evaluate any of the other expressions, otherwise it returns
          the value of the last expr. (and) returns true.
    "refer":
      name: "refer"
      doc: >
        refers to all public vars of ns, subject to filters.
          filters can include at most one each of:
        
          :exclude list-of-symbols
          :only list-of-symbols
          :rename map-of-fromsymbol-tosymbol
        
          For each public interned var in the namespace named by the symbol,
          adds a mapping from the name of the var to the var to the current
          namespace.  Throws an exception if name is already mapped to
          something else in the current namespace. Filters can be used to
          select a subset, via inclusion or exclusion, or to provide a mapping
          to a symbol different from the var's name, in order to prevent
          clashes. Use :use in the ns macro in preference to calling this directly.
    "underive":
      name: "underive"
      doc: >
        Removes a parent/child relationship between parent and
          tag. h must be a hierarchy obtained from make-hierarchy, if not
          supplied defaults to, and modifies, the global hierarchy.
    "in-ns":
      name: "in-ns"
      doc: >
        Sets *ns* to the namespace named by the symbol, creating it if needed.
    "iterator-seq":
      name: "iterator-seq"
      doc: >
        Returns a seq on a java.util.Iterator. Note that most collections
          providing iterators implement Iterable and thus support seq directly.
    "declare":
      name: "declare"
      doc: >
        defs the supplied var names with no bindings, useful for making forward declarations.
    "ancestors":
      name: "ancestors"
      doc: >
        Returns the immediate and indirect parents of tag, either via a Java type
          inheritance relationship or a relationship established via derive. h
          must be a hierarchy obtained from make-hierarchy, if not supplied
          defaults to the global hierarchy
    "hash-combine":
      name: "hash-combine"
    "persistent!":
      name: "persistent!"
      doc: >
        Alpha - subject to change.
          Returns a new, persistent version of the transient collection, in
          constant time. The transient collection cannot be used after this
          call, any such use will throw an exception.
    "locking":
      name: "locking"
      doc: >
        Executes exprs in an implicit do, while holding the monitor of x.
          Will release the monitor of x in all circumstances.
    "partition":
      name: "partition"
      doc: >
        Returns a lazy sequence of lists of n items each, at offsets step
          apart. If step is not supplied, defaults to n, i.e. the partitions
          do not overlap. If a pad collection is supplied, use its elements as
          necessary to complete last partition upto n items. In case there are
          not enough padding elements, return a partition with less than n items.
    "map-indexed":
      name: "map-indexed"
      doc: >
        Returns a lazy sequence consisting of the result of applying f to 0
          and the first item of coll, followed by applying f to 1 and the second
          item in coll, etc, until coll is exhausted. Thus function f should
          accept 2 arguments, index and item.
    "contains?":
      name: "contains?"
      doc: >
        Returns true if key is present in the given collection, otherwise
          returns false.  Note that for numerically indexed collections like
          vectors and Java arrays, this tests if the numeric key is within the
          range of indexes. 'contains?' operates constant or logarithmic time;
          it will not perform a linear search for a value.  See also 'some'.
    "update-proxy":
      name: "update-proxy"
      doc: >
        Takes a proxy instance and a map of strings (which must
          correspond to methods of the proxy superclass/superinterfaces) to
          fns (which must take arguments matching the corresponding method,
          plus an additional (explicit) first arg corresponding to this, and
          updates (via assoc) the proxy's fn map. nil can be passed instead of
          a fn, in which case the corresponding method will revert to the
          default behavior. Note that this function can be used to update the
          behavior of an existing instance without changing its identity.
          Returns the proxy.
    "interpose":
      name: "interpose"
      doc: >
        Returns a lazy seq of the elements of coll separated by sep
    "chunk":
      name: "chunk"
    "aset-int":
      name: "aset-int"
      doc: >
        Sets the value at the index/indices. Works on arrays of int. Returns val.
    "ifn?":
      name: "ifn?"
      doc: >
        Returns true if x implements IFn. Note that many data structures
          (e.g. sets and maps) implement IFn
    "definterface":
      name: "definterface"
      doc: >
        Creates a new Java interface with the given name and method sigs.
          The method return types and parameter types may be specified with type hints,
          defaulting to Object if omitted.
        
          (definterface MyInterface
            (^int method1 [x])
            (^Bar method2 [^Baz b ^Quux q]))
    "load-file":
      name: "load-file"
      doc: >
        Sequentially read and evaluate the set of forms contained in the file.
    "delay":
      name: "delay"
      doc: >
        Takes a body of expressions and yields a Delay object that will
          invoke the body only the first time it is forced (with force or deref/@), and
          will cache the result and return it on all subsequent force
          calls. See also - realized?
    "apply":
      name: "apply"
      doc: >
        Applies fn f to the argument list formed by prepending intervening arguments to args.
    "swap!":
      name: "swap!"
      doc: >
        Atomically swaps the value of atom to be:
          (apply f current-value-of-atom args). Note that f may be called
          multiple times, and thus should be free of side effects.  Returns
          the value that was swapped in.
    "defmulti":
      name: "defmulti"
      doc: >
        Creates a new multimethod with the associated dispatch function.
          The docstring and attribute-map are optional.
        
          Options are key-value pairs and may be one of:
            :default    the default dispatch value, defaults to :default
            :hierarchy  the isa? hierarchy to use for dispatching
                        defaults to the global hierarchy
    "proxy":
      name: "proxy"
      doc: >
        class-and-interfaces - a vector of class names
        
          args - a (possibly empty) vector of arguments to the superclass
          constructor.
        
          f => (name [params*] body) or
          (name ([params*] body) ([params+] body) ...)
        
          Expands to code which creates a instance of a proxy class that
          implements the named class/interface(s) by calling the supplied
          fns. A single class, if provided, must be first. If not provided it
          defaults to Object.
        
          The interfaces names must be valid interface types. If a method fn
          is not provided for a class method, the superclass methd will be
          called. If a method fn is not provided for an interface method, an
          UnsupportedOperationException will be thrown should it be
          called. Method fns are closures and can capture the environment in
          which proxy is called. Each method fn takes an additional implicit
          first arg, which is bound to 'this. Note that while method fns can
          be provided to override protected methods, they have no other access
          to protected members, nor to super, as these capabilities cannot be
          proxied.
    "reify":
      name: "reify"
      doc: >
        reify is a macro with the following structure:
        
         (reify options* specs*)
          
          Currently there are no options.
        
          Each spec consists of the protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args+] body)*
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that the first parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations.  Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          The return type can be indicated by a type hint on the method name,
          and arg types can be indicated by a type hint on arg names. If you
          leave out all hints, reify will try to match on same name/arity
          method in the protocol(s)/interface(s) - this is preferred. If you
          supply any hints at all, no inference is done, so all hints (or
          default of Object) must be correct, for both arguments and return
          type. If a method is overloaded in a protocol/interface, multiple
          independent method definitions must be supplied.  If overloaded with
          same arity in an interface you must specify complete hints to
          disambiguate - a missing hint implies Object.
        
          recur works to method heads The method bodies of reify are lexical
          closures, and can refer to the surrounding local scope:
          
          (str (let [f "foo"] 
               (reify Object 
                 (toString [this] f))))
          == "foo"
        
          (seq (let [f "foo"] 
               (reify clojure.lang.Seqable 
                 (seq [this] (seq f)))))
          == (\f \o \o))
          
          reify always implements clojure.lang.IObj and transfers meta
          data of the form to the created object.
          
          (meta ^{:k :v} (reify Object (toString [this] "foo")))
          == {:k :v}
    "subvec":
      name: "subvec"
      doc: >
        Returns a persistent vector of the items in vector from
          start (inclusive) to end (exclusive).  If end is not supplied,
          defaults to (count vector). This operation is O(1) and very fast, as
          the resulting vector shares structure with the original and no
          trimming is done.
    "byte-array":
      name: "byte-array"
      doc: >
        Creates an array of bytes
    "rest":
      name: "rest"
      doc: >
        Returns a possibly empty seq of the items after the first. Calls seq on its
          argument.
    "keyword":
      name: "keyword"
      doc: >
        Returns a Keyword with the given namespace and name.  Do not use :
          in the keyword strings, it will be added automatically.
    "ns-map":
      name: "ns-map"
      doc: >
        Returns a map of all the mappings for the namespace.
    "set-error-mode!":
      name: "set-error-mode!"
      doc: >
        Sets the error-mode of agent a to mode-keyword, which must be
          either :fail or :continue.  If an action being run by the agent
          throws an exception or doesn't pass the validator fn, an
          error-handler may be called (see set-error-handler!), after which,
          if the mode is :continue, the agent will continue as if neither the
          action that caused the error nor the error itself ever happened.
          
          If the mode is :fail, the agent will become failed and will stop
          accepting new 'send' and 'send-off' actions, and any previously
          queued actions will be held until a 'restart-agent'.  Deref will
          still work, returning the state of the agent before the error.
    "unquote":
      name: "unquote"
    "int":
      name: "int"
      doc: >
        Coerce to int
    "release-pending-sends":
      name: "release-pending-sends"
      doc: >
        Normally, actions sent directly or indirectly during another action
          are held until the action completes (changes the agent's
          state). This function can be used to dispatch any pending sent
          actions immediately. This has no impact on actions sent during a
          transaction, which are still held until commit. If no action is
          occurring, does nothing. Returns the number of actions dispatched.
    "mod":
      name: "mod"
      doc: >
        Modulus of num and div. Truncates toward negative infinity.
    "bigdec":
      name: "bigdec"
      doc: >
        Coerce to BigDecimal
    "nfirst":
      name: "nfirst"
      doc: >
        Same as (next (first x))
    "nthnext":
      name: "nthnext"
      doc: >
        Returns the nth next of coll, (seq coll) when n is 0.
    "*agent*":
      name: "*agent*"
      doc: >
        The agent currently running an action on this thread, else nil
    "aset-long":
      name: "aset-long"
      doc: >
        Sets the value at the index/indices. Works on arrays of long. Returns val.
    "struct":
      name: "struct"
      doc: >
        Returns a new structmap instance with the keys of the
          structure-basis. vals must be supplied for basis keys in order -
          where values are not supplied they will default to nil.
    "array-map":
      name: "array-map"
      doc: >
        Constructs an array-map. If any keys are equal, they are handled as
          if by repeated uses of assoc.
    "unchecked-char":
      name: "unchecked-char"
      doc: >
        Coerce to char. Subject to rounding or truncation.
    "bigint":
      name: "bigint"
      doc: >
        Coerce to BigInt
    "dec":
      name: "dec"
      doc: >
        Returns a number one less than num. Does not auto-promote
          longs, will throw on overflow. See also: dec'
    "println":
      name: "println"
      doc: >
        Same as print followed by (newline)
    "aget":
      name: "aget"
      doc: >
        Returns the value at the index/indices. Works on Java arrays of all
          types.
    "find-keyword":
      name: "find-keyword"
      doc: >
        Returns a Keyword with the given namespace and name if one already
          exists.  This function will not intern a new keyword. If the keyword
          has not already been interned, it will return nil.  Do not use :
          in the keyword strings, it will be added automatically.
    "pr":
      name: "pr"
      doc: >
        Prints the object(s) to the output stream that is the current value
          of *out*.  Prints the object(s), separated by spaces if there is
          more than one.  By default, pr and prn print in a way that objects
          can be read by the reader
    "drop":
      name: "drop"
      doc: >
        Returns a lazy sequence of all but the first n items in coll.
    "clojure-version":
      name: "clojure-version"
      doc: >
        Returns clojure version as a printable string.
    "*print-dup*":
      name: "*print-dup*"
      doc: >
        When set to logical true, objects will be printed in a way that preserves
          their type when read in later.
        
          Defaults to false.
    "gen-class":
      name: "gen-class"
      doc: >
        When compiling, generates compiled bytecode for a class with the
          given package-qualified :name (which, as all names in these
          parameters, can be a string or symbol), and writes the .class file
          to the *compile-path* directory.  When not compiling, does
          nothing. The gen-class construct contains no implementation, as the
          implementation will be dynamically sought by the generated class in
          functions in an implementing Clojure namespace. Given a generated
          class org.mydomain.MyClass with a method named mymethod, gen-class
          will generate an implementation that looks for a function named by 
          (str prefix mymethod) (default prefix: "-") in a
          Clojure namespace specified by :impl-ns
          (defaults to the current namespace). All inherited methods,
          generated methods, and init and main functions (see :methods, :init,
          and :main below) will be found similarly prefixed. By default, the
          static initializer for the generated class will attempt to load the
          Clojure support code for the class as a resource from the classpath,
          e.g. in the example case, ``org/mydomain/MyClass__init.class``. This
          behavior can be controlled by :load-impl-ns
        
          Note that methods with a maximum of 18 parameters are supported.
        
          In all subsequent sections taking types, the primitive types can be
          referred to by their Java names (int, float etc), and classes in the
          java.lang package can be used without a package qualifier. All other
          classes must be fully qualified.
        
          Options should be a set of key/value pairs, all except for :name are optional:
        
          :name aname
        
          The package-qualified name of the class to be generated
        
          :extends aclass
        
          Specifies the superclass, the non-private methods of which will be
          overridden by the class. If not provided, defaults to Object.
        
          :implements [interface ...]
        
          One or more interfaces, the methods of which will be implemented by the class.
        
          :init name
        
          If supplied, names a function that will be called with the arguments
          to the constructor. Must return [ [superclass-constructor-args] state] 
          If not supplied, the constructor args are passed directly to
          the superclass constructor and the state will be nil
        
          :constructors {[param-types] [super-param-types], ...}
        
          By default, constructors are created for the generated class which
          match the signature(s) of the constructors for the superclass. This
          parameter may be used to explicitly specify constructors, each entry
          providing a mapping from a constructor signature to a superclass
          constructor signature. When you supply this, you must supply an :init
          specifier. 
        
          :post-init name
        
          If supplied, names a function that will be called with the object as
          the first argument, followed by the arguments to the constructor.
          It will be called every time an object of this class is created,
          immediately after all the inherited constructors have completed.
          It's return value is ignored.
        
          :methods [ [name [param-types] return-type], ...]
        
          The generated class automatically defines all of the non-private
          methods of its superclasses/interfaces. This parameter can be used
          to specify the signatures of additional methods of the generated
          class. Static methods can be specified with ^{:static true} in the
          signature's metadata. Do not repeat superclass/interface signatures
          here.
        
          :main boolean
        
          If supplied and true, a static public main function will be generated. It will
          pass each string of the String[] argument as a separate argument to
          a function called (str prefix main).
        
          :factory name
        
          If supplied, a (set of) public static factory function(s) will be
          created with the given name, and the same signature(s) as the
          constructor(s).
          
          :state name
        
          If supplied, a public final instance field with the given name will be
          created. You must supply an :init function in order to provide a
          value for the state. Note that, though final, the state can be a ref
          or agent, supporting the creation of Java objects with transactional
          or asynchronous mutation semantics.
        
          :exposes {protected-field-name {:get name :set name}, ...}
        
          Since the implementations of the methods of the generated class
          occur in Clojure functions, they have no access to the inherited
          protected fields of the superclass. This parameter can be used to
          generate public getter/setter methods exposing the protected field(s)
          for use in the implementation.
        
          :exposes-methods {super-method-name exposed-name, ...}
        
          It is sometimes necessary to call the superclass' implementation of an
          overridden method.  Those methods may be exposed and referred in 
          the new method implementation by a local name.
        
          :prefix string
        
          Default: "-" Methods called e.g. Foo will be looked up in vars called
          prefixFoo in the implementing ns.
        
          :impl-ns name
        
          Default: the name of the current ns. Implementations of methods will be 
          looked up in this namespace.
        
          :load-impl-ns boolean
        
          Default: true. Causes the static initializer for the generated class
          to reference the load code for the implementing namespace. Should be
          true when implementing-ns is the default, false if you intend to
          load the code via some other method.
    "eval":
      name: "eval"
      doc: >
        Evaluates the form data structure (not text!) and returns the result.
    "aclone":
      name: "aclone"
      doc: >
        Returns a clone of the Java array. Works on arrays of known
          types.
    "char-name-string":
      name: "char-name-string"
      doc: >
        Returns name string for char or nil if none
    "pop":
      name: "pop"
      doc: >
        For a list or queue, returns a new list/queue without the first
          item, for a vector, returns a new vector without the last item. If
          the collection is empty, throws an exception.  Note - not the same
          as next/butlast.
    "primitives-classnames":
      name: "primitives-classnames"
    "atom":
      name: "atom"
      doc: >
        Creates and returns an Atom with an initial value of x and zero or
          more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          If metadata-map is supplied, it will become the metadata on the
          atom. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception.
    "defonce":
      name: "defonce"
      doc: >
        defs name to have the root value of the expr iff the named var has no root value,
          else expr is unevaluated
    "bit-shift-right":
      name: "bit-shift-right"
      doc: >
        Bitwise shift right
    "delay?":
      name: "delay?"
      doc: >
        returns true if x is a Delay created with delay
    "num":
      name: "num"
      doc: >
        Coerce to Number
    "realized?":
      name: "realized?"
      doc: >
        Returns true if a value has been produced for a promise, delay, future or lazy sequence.
    "disj":
      name: "disj"
      doc: >
        disj[oin]. Returns a new set of the same (hashed/sorted) type, that
          does not contain key(s).
    "io!":
      name: "io!"
      doc: >
        If an io! block occurs in a transaction, throws an
          IllegalStateException, else runs body in an implicit do. If the
          first expression in body is a literal string, will use that as the
          exception message.
    "*print-readably*":
      name: "*print-readably*"
      doc: >
        When set to logical false, strings and characters will be printed with
          non-alphanumeric characters converted to the appropriate escape sequences.
        
          Defaults to true
    "rational?":
      name: "rational?"
      doc: >
        Returns true if n is a rational number
    "merge-with":
      name: "merge-with"
      doc: >
        Returns a map that consists of the rest of the maps conj-ed onto
          the first.  If a key occurs in more than one map, the mapping(s)
          from the latter (left-to-right) will be combined with the mapping in
          the result by calling (f val-in-result val-in-latter).
    "take-nth":
      name: "take-nth"
      doc: >
        Returns a lazy seq of every nth item in coll.
    "*fn-loader*":
      name: "*fn-loader*"
    "*print-meta*":
      name: "*print-meta*"
      doc: >
        If set to logical true, when printing an object, its metadata will also
          be printed in a form that can be read back by the reader.
        
          Defaults to false.
    "double":
      name: "double"
      doc: >
        Coerce to double
    "lazy-seq":
      name: "lazy-seq"
      doc: >
        Takes a body of expressions that returns an ISeq or nil, and yields
          a Seqable object that will invoke the body only the first time seq
          is called, and will cache the result and return it on all subsequent
          seq calls. See also - realized?
    "*in*":
      name: "*in*"
      doc: >
        A java.io.Reader object representing standard input for read operations.
        
          Defaults to System/in, wrapped in a LineNumberingPushbackReader
    "take-last":
      name: "take-last"
      doc: >
        Returns a seq of the last n items in coll.  Depending on the type
          of coll may be no better than linear time.  For vectors, see also subvec.
    "line-seq":
      name: "line-seq"
      doc: >
        Returns the lines of text from rdr as a lazy sequence of strings.
          rdr must implement java.io.BufferedReader.
    "take":
      name: "take"
      doc: >
        Returns a lazy sequence of the first n items in coll, or all items if
          there are fewer than n.
    "unchecked-byte":
      name: "unchecked-byte"
      doc: >
        Coerce to byte. Subject to rounding or truncation.
    "when":
      name: "when"
      doc: >
        Evaluates test. If logical true, evaluates body in an implicit do.
    "areduce":
      name: "areduce"
      doc: >
        Reduces an expression across an array a, using an index named idx,
          and return value named ret, initialized to init, setting ret to the 
          evaluation of expr at each step, returning ret.
    "set?":
      name: "set?"
      doc: >
        Returns true if x implements IPersistentSet
    "make-array":
      name: "make-array"
      doc: >
        Creates and returns an array of instances of the specified class of
          the specified dimension(s).  Note that a class object is required.
          Class objects can be obtained by using their imported or
          fully-qualified name.  Class objects for the primitive types can be
          obtained using, e.g., Integer/TYPE.
    "rand-nth":
      name: "rand-nth"
      doc: >
        Return a random element of the (sequential) collection. Will have
          the same performance characteristics as nth for the given
          collection.
    "alias":
      name: "alias"
      doc: >
        Add an alias in the current namespace to another
          namespace. Arguments are two symbols: the alias to be used, and
          the symbolic name of the target namespace. Use :as in the ns macro in preference
          to calling this directly.
    "use":
      name: "use"
      doc: >
        Like 'require, but also refers to each lib's namespace using
          clojure.core/refer. Use :use in the ns macro in preference to calling
          this directly.
        
          'use accepts additional options in libspecs: :exclude, :only, :rename.
          The arguments and semantics for :exclude, :only, and :rename are the same
          as those documented for clojure.core/refer.
    "juxt":
      name: "juxt"
      doc: >
        Takes a set of functions and returns a fn that is the juxtaposition
          of those fns.  The returned fn takes a variable number of args, and
          returns a vector containing the result of applying each fn to the
          args (left-to-right).
          ((juxt a b c) x) => [(a x) (b x) (c x)]
    "alength":
      name: "alength"
      doc: >
        Returns the length of the Java array. Works on arrays of all
          types.
    "chunk-first":
      name: "chunk-first"
    "*source-path*":
      name: "*source-path*"
    "defprotocol":
      name: "defprotocol"
      doc: >
        A protocol is a named set of named methods and their signatures:
          (defprotocol AProtocolName
        
            ;optional doc string
            "A doc string for AProtocol abstraction"
        
          ;method signatures
            (bar [this a b] "bar docs")
            (baz [this a] [this a b] [this a b c] "baz docs"))
        
          No implementations are provided. Docs can be specified for the
          protocol overall and for each method. The above yields a set of
          polymorphic functions and a protocol object. All are
          namespace-qualified by the ns enclosing the definition The resulting
          functions dispatch on the type of their first argument, which is
          required and corresponds to the implicit target object ('this' in 
          Java parlance). defprotocol is dynamic, has no special compile-time 
          effect, and defines no new types or classes. Implementations of 
          the protocol methods can be provided using extend.
        
          defprotocol will automatically generate a corresponding interface,
          with the same name as the protocol, i.e. given a protocol:
          my.ns/Protocol, an interface: my.ns.Protocol. The interface will
          have methods corresponding to the protocol functions, and the
          protocol will automatically work with instances of the interface.
        
          Note that you should not use this interface with deftype or
          reify, as they support the protocol directly:
        
          (defprotocol P 
            (foo [this]) 
            (bar-me [this] [this y]))
        
          (deftype Foo [a b c] 
           P
            (foo [this] a)
            (bar-me [this] b)
            (bar-me [this y] (+ c y)))
          
          (bar-me (Foo. 1 2 3) 42)
          => 45
        
          (foo 
            (let [x 42]
              (reify P 
                (foo [this] 17)
                (bar-me [this] x)
                (bar-me [this y] x))))
          => 17
    "to-array":
      name: "to-array"
      doc: >
        Returns an array of Objects containing the contents of coll, which
          can be any Collection.  Maps to java.util.Collection.toArray().
    "hash-map":
      name: "hash-map"
      doc: >
        keyval => key val
          Returns a new hash map with supplied mappings.  If any keys are
          equal, they are handled as if by repeated uses of assoc.
    "bit-and-not":
      name: "bit-and-not"
      doc: >
        Bitwise and with complement
    "*compiler-options*":
      name: "*compiler-options*"
      doc: >
        A map of keys to options.
          Note, when binding dynamically make sure to merge with previous value.
          Supported options:
          :elide-meta - a collection of metadata keys to elide during compilation.
          :disable-locals-clearing - set to true to disable clearing, useful for using a debugger
          Alpha, subject to change.
    "compare-and-set!":
      name: "compare-and-set!"
      doc: >
        Atomically sets the value of atom to newval if and only if the
          current value of the atom is identical to oldval. Returns true if
          set happened, else false
    "*assert*":
      name: "*assert*"
    "type":
      name: "type"
      doc: >
        Returns the :type metadata of x, or its Class if none
    "repeatedly":
      name: "repeatedly"
      doc: >
        Takes a function of no args, presumably with side effects, and
          returns an infinite (or length n if supplied) lazy sequence of calls
          to it
    "trampoline":
      name: "trampoline"
      doc: >
        trampoline can be used to convert algorithms requiring mutual
          recursion without stack consumption. Calls f with supplied args, if
          any. If f returns a fn, calls that fn with no arguments, and
          continues to repeat, until the return value is not a fn, then
          returns that non-fn value. Note that if you want to return a fn as a
          final value, you must wrap it in some data structure and unpack it
          after trampoline returns.
    "set-error-handler!":
      name: "set-error-handler!"
      doc: >
        Sets the error-handler of agent a to handler-fn.  If an action
          being run by the agent throws an exception or doesn't pass the
          validator fn, handler-fn will be called with two arguments: the
          agent and the exception.
    "remove":
      name: "remove"
      doc: >
        Returns a lazy sequence of the items in coll for which
          (pred item) returns false. pred must be free of side-effects.
    "find":
      name: "find"
      doc: >
        Returns the map entry for key, or nil if key not present.
    "coll?":
      name: "coll?"
      doc: >
        Returns true if x implements IPersistentCollection
    "drop-while":
      name: "drop-while"
      doc: >
        Returns a lazy sequence of the items in coll starting from the first
          item for which (pred item) returns logical false.
    "not-empty":
      name: "not-empty"
      doc: >
        If coll is empty, returns nil, else coll
    "flatten":
      name: "flatten"
      doc: >
        Takes any nested combination of sequential things (lists, vectors,
          etc.) and returns their contents as a single, flat sequence.
          (flatten nil) returns an empty sequence.
    "ex-data":
      name: "ex-data"
      doc: >
        Alpha - subject to change.
           Returns exception data (a map) if ex is an IExceptionInfo.
           Otherwise returns nil.
    "set-agent-send-off-executor!":
      name: "set-agent-send-off-executor!"
      doc: >
        Sets the ExecutorService to be used by send-off
    "println-str":
      name: "println-str"
      doc: >
        println to a string, returning it
    "list":
      name: "list"
      doc: >
        Creates a new list containing the items.
    "chunk-next":
      name: "chunk-next"
    "every?":
      name: "every?"
      doc: >
        Returns true if (pred x) is logical true for every x in coll, else
          false.
    "satisfies?":
      name: "satisfies?"
      doc: >
        Returns true if x satisfies the protocol
    "flush":
      name: "flush"
      doc: >
        Flushes the output stream that is the current value of
          *out*
    "some->>":
      name: "some->>"
      doc: >
        When expr is not nil, threads it into the first form (via ->>),
          and when that result is not nil, through the next etc
    "sort":
      name: "sort"
      doc: >
        Returns a sorted sequence of the items in coll. If no comparator is
          supplied, uses compare.  comparator must implement
          java.util.Comparator.  If coll is a Java array, it will be modified.
          To avoid this, sort a copy of the array.
    "dissoc":
      name: "dissoc"
      doc: >
        dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
          that does not contain a mapping for key(s).
    "cond->":
      name: "cond->"
      doc: >
        Takes an expression and a set of test/form pairs. Threads expr (via ->)
          through each form for which the corresponding test
          expression is true. Note that, unlike cond branching, cond-> threading does
          not short circuit after the first true test expression.
    "not":
      name: "not"
      doc: >
        Returns true if x is logical false, false otherwise.
    "binding":
      name: "binding"
      doc: >
        binding => var-symbol init-expr
        
          Creates new bindings for the (already-existing) vars, with the
          supplied initial values, executes the exprs in an implicit do, then
          re-establishes the bindings that existed before.  The new bindings
          are made in parallel (unlike let); all init-exprs are evaluated
          before the vars are bound to their new values.
    "error-handler":
      name: "error-handler"
      doc: >
        Returns the error-handler of agent a, or nil if there is none.
          See set-error-handler!
    "get-method":
      name: "get-method"
      doc: >
        Given a multimethod and a dispatch value, returns the dispatch fn
          that would apply to that value, or nil if none apply and no default
    "agent":
      name: "agent"
      doc: >
        Creates and returns an agent with an initial value of state and
          zero or more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          :error-handler handler-fn
        
          :error-mode mode-keyword
        
          If metadata-map is supplied, it will become the metadata on the
          agent. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception.  handler-fn is called if an
          action throws an exception or if validate-fn rejects a new state --
          see set-error-handler! for details.  The mode-keyword may be either
          :continue (the default if an error-handler is given) or :fail (the
          default if no error-handler is given) -- see set-error-mode! for
          details.
    "sorted-set":
      name: "sorted-set"
      doc: >
        Returns a new sorted set with supplied keys.  Any equal keys are
          handled as if by repeated uses of conj.
    "alter-var-root":
      name: "alter-var-root"
      doc: >
        Atomically alters the root binding of var v by applying f to its
          current value plus any args
    "merge":
      name: "merge"
      doc: >
        Returns a map that consists of the rest of the maps conj-ed onto
          the first.  If a key occurs in more than one map, the mapping from
          the latter (left-to-right) will be the mapping in the result.
    "subseq":
      name: "subseq"
      doc: >
        sc must be a sorted collection, test(s) one of <, <=, > or
          >=. Returns a seq of those entries with keys ek for
          which (test (.. sc comparator (compare ek key)) 0) is true
    "min":
      name: "min"
      doc: >
        Returns the least of the nums.
    "print-simple":
      name: "print-simple"
    "bit-test":
      name: "bit-test"
      doc: >
        Test bit at index n
    "await-for":
      name: "await-for"
      doc: >
        Blocks the current thread until all actions dispatched thus
          far (from this thread or agent) to the agents have occurred, or the
          timeout (in milliseconds) has elapsed. Returns logical false if
          returning due to timeout, logical true otherwise.
    "keep":
      name: "keep"
      doc: >
        Returns a lazy sequence of the non-nil results of (f item). Note,
          this means false return values will be included.  f must be free of
          side-effects.
    "disj!":
      name: "disj!"
      doc: >
        Alpha - subject to change.
          disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
          does not contain key(s).
    "meta":
      name: "meta"
      doc: >
        Returns the metadata of obj, returns nil if there is no metadata.
clojure.java.io:
  ns-name: "clojure.java.io"
  vars:
    "output-stream":
      name: "output-stream"
      doc: >
        Attempts to coerce its argument into an open java.io.OutputStream.
           Default implementations always return a java.io.BufferedOutputStream.
        
           Default implementations are defined for OutputStream, File, URI, URL,
           Socket, and String arguments.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the OutputStream is
           properly closed.
    "copy":
      name: "copy"
      doc: >
        Copies input to output.  Returns nil or throws IOException.
          Input may be an InputStream, Reader, File, byte[], or String.
          Output may be an OutputStream, Writer, or File.
        
          Options are key/value pairs and may be one of
        
            :buffer-size  buffer size to use, default is 1024.
            :encoding     encoding to use if converting between
                          byte and char streams.   
        
          Does not close any streams except those it opens itself 
          (on a File).
    "file":
      name: "file"
      doc: >
        Returns a java.io.File, passing each arg to as-file.  Multiple-arg
           versions treat the first argument as parent and subsequent args as
           children relative to the parent.
    "writer":
      name: "writer"
      doc: >
        Attempts to coerce its argument into an open java.io.Writer.
           Default implementations always return a java.io.BufferedWriter.
        
           Default implementations are provided for Writer, BufferedWriter,
           OutputStream, File, URI, URL, Socket, and String.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the Writer is properly
           closed.
    "as-relative-path":
      name: "as-relative-path"
      doc: >
        Take an as-file-able thing and return a string if it is
           a relative path, else IllegalArgumentException.
    "make-output-stream":
      name: "make-output-stream"
      doc: >
        Creates a BufferedOutputStream. See also IOFactory docs.
    "make-parents":
      name: "make-parents"
      doc: >
        Given the same arg(s) as for file, creates all parent directories of
           the file they represent.
    "reader":
      name: "reader"
      doc: >
        Attempts to coerce its argument into an open java.io.Reader.
           Default implementations always return a java.io.BufferedReader.
        
           Default implementations are provided for Reader, BufferedReader,
           InputStream, File, URI, URL, Socket, byte arrays, character arrays,
           and String.
        
           If argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the Reader is properly
           closed.
    "default-streams-impl":
      name: "default-streams-impl"
    "delete-file":
      name: "delete-file"
      doc: >
        Delete file f. Raise an exception if it fails unless silently is true.
    "as-file":
      name: "as-file"
      doc: >
        Coerce argument to a file.
    "resource":
      name: "resource"
      doc: >
        Returns the URL for a named resource. Use the context class loader
           if no loader is specified.
    "input-stream":
      name: "input-stream"
      doc: >
        Attempts to coerce its argument into an open java.io.InputStream.
           Default implementations always return a java.io.BufferedInputStream.
        
           Default implementations are defined for OutputStream, File, URI, URL,
           Socket, byte array, and String arguments.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the InputStream is properly
           closed.
    "Coercions":
      name: "Coercions"
      doc: >
        Coerce between various 'resource-namish' things.
    "make-input-stream":
      name: "make-input-stream"
      doc: >
        Creates a BufferedInputStream. See also IOFactory docs.
    "make-writer":
      name: "make-writer"
      doc: >
        Creates a BufferedWriter. See also IOFactory docs.
    "as-url":
      name: "as-url"
      doc: >
        Coerce argument to a URL.
    "make-reader":
      name: "make-reader"
      doc: >
        Creates a BufferedReader. See also IOFactory docs.
    "IOFactory":
      name: "IOFactory"
      doc: >
        Factory functions that create ready-to-use, buffered versions of
           the various Java I/O stream types, on top of anything that can
           be unequivocally converted to the requested kind of stream.
        
           Common options include
           
             :append    true to open stream in append mode
             :encoding  string name of encoding to use, e.g. "UTF-8".
        
           Callers should generally prefer the higher level API provided by
           reader, writer, input-stream, and output-stream.
clojure.string:
  ns-name: "clojure.string"
  vars:
    "trim":
      name: "trim"
      doc: >
        Removes whitespace from both ends of string.
    "lower-case":
      name: "lower-case"
      doc: >
        Converts string to all lower-case.
    "re-quote-replacement":
      name: "re-quote-replacement"
      doc: >
        Given a replacement string that you wish to be a literal
           replacement for a pattern match in replace or replace-first, do the
           necessary escaping of special characters in the replacement.
    "split":
      name: "split"
      doc: >
        Splits string on a regular expression.  Optional argument limit is
          the maximum number of splits. Not lazy. Returns vector of the splits.
    "join":
      name: "join"
      doc: >
        Returns a string of all elements in coll, as returned by (seq coll),
           separated by an optional separator.
    "upper-case":
      name: "upper-case"
      doc: >
        Converts string to all upper-case.
    "trimr":
      name: "trimr"
      doc: >
        Removes whitespace from the right side of string.
    "split-lines":
      name: "split-lines"
      doc: >
        Splits s on \n or \r\n.
    "triml":
      name: "triml"
      doc: >
        Removes whitespace from the left side of string.
    "replace":
      name: "replace"
      doc: >
        Replaces all instance of match with replacement in s.
        
           match/replacement can be:
        
           string / string
           char / char
           pattern / (string or function of match).
        
           See also replace-first.
        
           The replacement is literal (i.e. none of its characters are treated
           specially) for all cases above except pattern / string.
        
           For pattern / string, $1, $2, etc. in the replacement string are
           substituted with the string that matched the corresponding
           parenthesized group in the pattern.  If you wish your replacement
           string r to be used literally, use (re-quote-replacement r) as the
           replacement argument.  See also documentation for
           java.util.regex.Matcher's appendReplacement method.
        
           Example:
           (clojure.string/replace "Almost Pig Latin" #"\b(\w)(\w+)\b" "$2$1ay")
           -> "lmostAay igPay atinLay"
    "reverse":
      name: "reverse"
      doc: >
        Returns s with its characters reversed.
    "capitalize":
      name: "capitalize"
      doc: >
        Converts first character of the string to upper-case, all other
          characters to lower-case.
    "escape":
      name: "escape"
      doc: >
        Return a new string, using cmap to escape each character ch
           from s as follows:
           
           If (cmap ch) is nil, append ch to the new string.
           If (cmap ch) is non-nil, append (str (cmap ch)) instead.
    "blank?":
      name: "blank?"
      doc: >
        True if s is nil, empty, or contains only whitespace.
    "replace-first":
      name: "replace-first"
      doc: >
        Replaces the first instance of match with replacement in s.
        
           match/replacement can be:
        
           char / char
           string / string
           pattern / (string or function of match).
        
           See also replace.
        
           The replacement is literal (i.e. none of its characters are treated
           specially) for all cases above except pattern / string.
        
           For pattern / string, $1, $2, etc. in the replacement string are
           substituted with the string that matched the corresponding
           parenthesized group in the pattern.  If you wish your replacement
           string r to be used literally, use (re-quote-replacement r) as the
           replacement argument.  See also documentation for
           java.util.regex.Matcher's appendReplacement method.
        
           Example:
           (clojure.string/replace-first "swap first two words"
                                         #"(\w+)(\s+)(\w+)" "$3$2$1")
           -> "first swap two words"
    "trim-newline":
      name: "trim-newline"
      doc: >
        Removes all trailing newline \n or return \r characters from
          string.  Similar to Perl's chomp.
clojure.core.protocols:
  ns-name: "clojure.core.protocols"
  vars:
    "emit-array-impls":
      name: "emit-array-impls"
    "coll-reduce":
      name: "coll-reduce"
    "kv-reduce":
      name: "kv-reduce"
    "arr-impl":
      name: "arr-impl"
    "CollReduce":
      name: "CollReduce"
      doc: >
        Protocol for collection types that can implement reduce faster than
          first/next recursion. Called by clojure.core/reduce. Baseline
          implementation defined in terms of Iterable.
    "IKVReduce":
      name: "IKVReduce"
      doc: >
        Protocol for concrete associative types that can reduce themselves
           via a function of key and val faster than first/next recursion over map
           entries. Called by clojure.core/reduce-kv, and has same
           semantics (just different arg order).
    "InternalReduce":
      name: "InternalReduce"
      doc: >
        Protocol for concrete seq types that can reduce themselves
           faster than first/next recursion. Called by clojure.core/reduce.
    "internal-reduce":
      name: "internal-reduce"
clojure.instant:
  ns-name: "clojure.instant"
  vars:
    "read-instant-calendar":
      name: "read-instant-calendar"
      doc: >
        To read an instant as a java.util.Calendar, bind *data-readers* to a map with
        this var as the value for the 'inst key.  Calendar preserves the timezone
        offset.
    "read-instant-timestamp":
      name: "read-instant-timestamp"
      doc: >
        To read an instant as a java.sql.Timestamp, bind *data-readers* to a
        map with this var as the value for the 'inst key. Timestamp preserves
        fractional seconds with nanosecond precision. The timezone offset will
        be used to convert into UTC.
    "validated":
      name: "validated"
      doc: >
        Return a function which constructs and instant by calling constructor
        after first validting that those arguments are in range and otherwise
        plausible. The resulting function will throw an exception if called
        with invalid arguments.
    "read-instant-date":
      name: "read-instant-date"
      doc: >
        To read an instant as a java.util.Date, bind *data-readers* to a map with
        this var as the value for the 'inst key. The timezone offset will be used
        to convert into UTC.
    "parse-timestamp":
      name: "parse-timestamp"
      doc: >
        Parse a string containing an RFC3339-like like timestamp.
        
        The function new-instant is called with the following arguments.
        
                        min  max           default
                        ---  ------------  -------
          years          0           9999      N/A (s must provide years)
          months         1             12        1
          days           1             31        1 (actual max days depends
          hours          0             23        0  on month and year)
          minutes        0             59        0
          seconds        0             60        0 (though 60 is only valid
          nanoseconds    0      999999999        0  when minutes is 59)
          offset-sign   -1              1        0
          offset-hours   0             23        0
          offset-minutes 0             59        0
        
        These are all integers and will be non-nil. (The listed defaults
        will be passed if the corresponding field is not present in s.)
        
        Grammar (of s):
        
          date-fullyear   = 4DIGIT
          date-month      = 2DIGIT  ; 01-12
          date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
                                    ; month/year
          time-hour       = 2DIGIT  ; 00-23
          time-minute     = 2DIGIT  ; 00-59
          time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
                                    ; rules
          time-secfrac    = '.' 1*DIGIT
          time-numoffset  = ('+' / '-') time-hour ':' time-minute
          time-offset     = 'Z' / time-numoffset
        
          time-part       = time-hour [ ':' time-minute [ ':' time-second
                            [time-secfrac] [time-offset] ] ]
        
          timestamp       = date-year [ '-' date-month [ '-' date-mday
                            [ 'T' time-part ] ] ]
        
        Unlike RFC3339:
        
          - we only parse the timestamp format
          - timestamp can elide trailing components
          - time-offset is optional (defaults to +00:00)
        
        Though time-offset is syntactically optional, a missing time-offset
        will be treated as if the time-offset zero (+00:00) had been
        specified.
clojure.uuid:
  ns-name: "clojure.uuid"
  vars:
user:
  ns-name: "user"
  vars:
clojure.main:
  ns-name: "clojure.main"
  vars:
    "repl-requires":
      name: "repl-requires"
      doc: >
        A sequence of lib specs that are applied to `require`
        by default when a new command-line REPL is started.
    "repl-exception":
      name: "repl-exception"
      doc: >
        Returns the root cause of throwables
    "stack-element-str":
      name: "stack-element-str"
      doc: >
        Returns a (possibly unmunged) string representation of a StackTraceElement
    "repl-caught":
      name: "repl-caught"
      doc: >
        Default :caught hook for repl
    "demunge":
      name: "demunge"
      doc: >
        Given a string representation of a fn class,
          as in a stack trace element, returns a readable version.
    "load-script":
      name: "load-script"
      doc: >
        Loads Clojure source from a file or resource given its path. Paths
          beginning with @ or @/ are considered relative to classpath.
    "skip-whitespace":
      name: "skip-whitespace"
      doc: >
        Skips whitespace characters on stream s. Returns :line-start, :stream-end,
          or :body to indicate the relative location of the next character on s.
          Interprets comma as whitespace and semicolon as comment to end of line.
          Does not interpret #! as comment to end of line because only one
          character of lookahead is available. The stream must either be an
          instance of LineNumberingPushbackReader or duplicate its behavior of both
          supporting .unread and collapsing all of CR, LF, and CRLF to a single
          \newline.
    "skip-if-eol":
      name: "skip-if-eol"
      doc: >
        If the next character on stream s is a newline, skips it, otherwise
          leaves the stream untouched. Returns :line-start, :stream-end, or :body
          to indicate the relative location of the next character on s. The stream
          must either be an instance of LineNumberingPushbackReader or duplicate
          its behavior of both supporting .unread and collapsing all of CR, LF, and
          CRLF to a single \newline.
    "repl-read":
      name: "repl-read"
      doc: >
        Default :read hook for repl. Reads from *in* which must either be an
          instance of LineNumberingPushbackReader or duplicate its behavior of both
          supporting .unread and collapsing all of CR, LF, and CRLF into a single
          \newline. repl-read:
            - skips whitespace, then
              - returns request-prompt on start of line, or
              - returns request-exit on end of stream, or
              - reads an object from the input stream, then
                - skips the next input character if it's end of line, then
                - returns the object.
    "with-bindings":
      name: "with-bindings"
      doc: >
        Executes body in the context of thread-local bindings for several vars
          that often need to be set!: *ns* *warn-on-reflection* *math-context*
          *print-meta* *print-length* *print-level* *compile-path*
          *command-line-args* *1 *2 *3 *e
    "root-cause":
      name: "root-cause"
      doc: >
        Returns the initial cause of an exception or error by peeling off all of
          its wrappers
    "with-read-known":
      name: "with-read-known"
      doc: >
        Evaluates body with *read-eval* set to a "known" value,
           i.e. substituting true for :unknown if necessary.
    "repl-prompt":
      name: "repl-prompt"
      doc: >
        Default :prompt hook for repl
    "repl":
      name: "repl"
      doc: >
        Generic, reusable, read-eval-print loop. By default, reads from *in*,
          writes to *out*, and prints exception summaries to *err*. If you use the
          default :read hook, *in* must either be an instance of
          LineNumberingPushbackReader or duplicate its behavior of both supporting
          .unread and collapsing CR, LF, and CRLF into a single \newline. Options
          are sequential keyword-value pairs. Available options and their defaults:
        
             - :init, function of no arguments, initialization hook called with
               bindings for set!-able vars in place.
               default: #()
        
             - :need-prompt, function of no arguments, called before each
               read-eval-print except the first, the user will be prompted if it
               returns true.
               default: (if (instance? LineNumberingPushbackReader *in*)
                          #(.atLineStart *in*)
                          #(identity true))
        
             - :prompt, function of no arguments, prompts for more input.
               default: repl-prompt
        
             - :flush, function of no arguments, flushes output
               default: flush
        
             - :read, function of two arguments, reads from *in*:
                 - returns its first argument to request a fresh prompt
                   - depending on need-prompt, this may cause the repl to prompt
                     before reading again
                 - returns its second argument to request an exit from the repl
                 - else returns the next object read from the input stream
               default: repl-read
        
             - :eval, funtion of one argument, returns the evaluation of its
               argument
               default: eval
        
             - :print, function of one argument, prints its argument to the output
               default: prn
        
             - :caught, function of one argument, a throwable, called when
               read, eval, or print throws an exception or error
               default: repl-caught
    "main":
      name: "main"
      doc: >
        Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]
        
          With no options or args, runs an interactive Read-Eval-Print Loop
        
          init options:
            -i, --init path     Load a file or resource
            -e, --eval string   Evaluate expressions in string; print non-nil values
        
          main options:
            -m, --main ns-name  Call the -main function from a namespace with args
            -r, --repl          Run a repl
            path                Run a script from from a file or resource
            -                   Run a script from standard input
            -h, -?, --help      Print this help message and exit
        
          operation:
        
            - Establishes thread-local bindings for commonly set!-able vars
            - Enters the user namespace
            - Binds *command-line-args* to a seq of strings containing command line
              args that appear after any main option
            - Runs all init options in order
            - Calls a -main function or runs a repl or script if requested
        
          The init options may be repeated and mixed freely, but must appear before
          any main option. The appearance of any eval option before running a repl
          suppresses the usual repl greeting message: "Clojure ~(clojure-version)".
        
          Paths may be absolute or relative in the filesystem or relative to
          classpath. Classpath-relative paths have prefix of @ or @/
cljdoc.core:
  ns-name: "cljdoc.core"
  vars:
    "process-namespace-list":
      name: "process-namespace-list"
    "-main":
      name: "-main"
    "write":
      name: "write"
    "break":
      name: "break"
    "print-vars":
      name: "print-vars"
clojure.core:
  doc: "Fundamental library of the Clojure language"
  ns-name: "clojure.core"
  vars:
    "sorted-map":
      name: "sorted-map"
      doc: >
        keyval => key val
          Returns a new sorted map with supplied mappings.  If any keys are
          equal, they are handled as if by repeated uses of assoc.
    "read-line":
      name: "read-line"
      doc: >
        Reads the next line from stream that is the current value of *in* .
    "re-pattern":
      name: "re-pattern"
      doc: >
        Returns an instance of java.util.regex.Pattern, for use, e.g. in
          re-matcher.
    "cond->>":
      name: "cond->>"
      doc: >
        Takes an expression and a set of test/form pairs. Threads expr (via ->>)
          through each form for which the corresponding test expression
          is true.  Note that, unlike cond branching, cond->> threading does not short circuit
          after the first true test expression.
    "keyword?":
      name: "keyword?"
      doc: >
        Return true if x is a Keyword
    "unchecked-inc-int":
      name: "unchecked-inc-int"
      doc: >
        Returns a number one greater than x, an int.
          Note - uses a primitive operator subject to overflow.
    "val":
      name: "val"
      doc: >
        Returns the value in the map entry.
    "chunked-seq?":
      name: "chunked-seq?"
    "find-protocol-impl":
      name: "find-protocol-impl"
    "vector-of":
      name: "vector-of"
      doc: >
        Creates a new vector of a single primitive type t, where t is one
          of :int :long :float :double :byte :short :char or :boolean. The
          resulting vector complies with the interface of vectors in general,
          but stores the values unboxed internally.
        
          Optionally takes one or more elements to populate the vector.
    "object-array":
      name: "object-array"
      doc: >
        Creates an array of objects
    "*compile-path*":
      name: "*compile-path*"
      doc: >
        Specifies the directory where 'compile' will write out .class
          files. This directory must be in the classpath for 'compile' to
          work.
        
          Defaults to "classes"
    "max-key":
      name: "max-key"
      doc: >
        Returns the x for which (k x), a number, is greatest.
    "list*":
      name: "list*"
      doc: >
        Creates a new list containing the items prepended to the rest, the
          last of which will be treated as a sequence.
    "ns-aliases":
      name: "ns-aliases"
      doc: >
        Returns a map of the aliases for the namespace.
    "booleans":
      name: "booleans"
      doc: >
        Casts to boolean[]
    "the-ns":
      name: "the-ns"
      doc: >
        If passed a namespace, returns it. Else, when passed a symbol,
          returns the namespace named by it, throwing an exception if not
          found.
    "==":
      name: "=="
      doc: >
        Returns non-nil if nums all have the equivalent
          value (type-independent), otherwise false
    "chunk-buffer":
      name: "chunk-buffer"
    "longs":
      name: "longs"
      doc: >
        Casts to long[]
    "shorts":
      name: "shorts"
      doc: >
        Casts to shorts[]
    "instance?":
      name: "instance?"
      doc: >
        Evaluates x and tests if it is an instance of the class
            c. Returns true or false
    "format":
      name: "format"
      doc: >
        Formats a string using java.lang.String.format, see java.util.Formatter for format
          string syntax
    "sequential?":
      name: "sequential?"
      doc: >
        Returns true if coll implements Sequential
    "fn?":
      name: "fn?"
      doc: >
        Returns true if x implements Fn, i.e. is an object created via fn.
    "empty":
      name: "empty"
      doc: >
        Returns an empty collection of the same category as coll, or nil
    "bound-fn":
      name: "bound-fn"
      doc: >
        Returns a function defined by the given fntail, which will install the
          same bindings in effect as in the thread at the time bound-fn was called.
          This may be used to define a helper function which runs on a different
          thread, but needs the same bindings in place.
    "dorun":
      name: "dorun"
      doc: >
        When lazy sequences are produced via functions that have side
          effects, any effects other than those needed to produce the first
          element in the seq do not occur until the seq is consumed. dorun can
          be used to force any effects. Walks through the successive nexts of
          the seq, does not retain the head and returns nil.
    "time":
      name: "time"
      doc: >
        Evaluates expr and prints the time it took.  Returns the value of
         expr.
    "remove-method":
      name: "remove-method"
      doc: >
        Removes the method of multimethod associated with dispatch-value.
    "gensym":
      name: "gensym"
      doc: >
        Returns a new symbol with a unique name. If a prefix string is
          supplied, the name is prefix# where # is some unique number. If
          prefix is not supplied, the prefix is 'G__'.
    "not=":
      name: "not="
      doc: >
        Same as (not (= obj1 obj2))
    "*3":
      name: "*3"
      doc: >
        bound in a repl thread to the third most recent value printed
    "unchecked-multiply":
      name: "unchecked-multiply"
      doc: >
        Returns the product of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "doseq":
      name: "doseq"
      doc: >
        Repeatedly executes body (presumably for side-effects) with
          bindings and filtering as provided by "for".  Does not retain
          the head of the sequence. Returns nil.
    "bit-or":
      name: "bit-or"
      doc: >
        Bitwise or
    "aset-byte":
      name: "aset-byte"
      doc: >
        Sets the value at the index/indices. Works on arrays of byte. Returns val.
    "if-not":
      name: "if-not"
      doc: >
        Evaluates test. If logical false, evaluates and returns then expr, 
          otherwise else expr, if supplied, else nil.
    "send-via":
      name: "send-via"
      doc: >
        Dispatch an action to an agent. Returns the agent immediately.
          Subsequently, in a thread supplied by executor, the state of the agent
          will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "hash-set":
      name: "hash-set"
      doc: >
        Returns a new hash set with supplied keys.  Any equal keys are
          handled as if by repeated uses of conj.
    "->Vec":
      name: "->Vec"
      doc: >
        Positional factory function for class clojure.core.Vec.
    "add-watch":
      name: "add-watch"
      doc: >
        Alpha - subject to change.
          Adds a watch function to an agent/atom/var/ref reference. The watch
          fn must be a fn of 4 args: a key, the reference, its old-state, its
          new-state. Whenever the reference's state might have been changed,
          any registered watches will have their functions called. The watch fn
          will be called synchronously, on the agent's thread if an agent,
          before any pending sends if agent or ref. Note that an atom's or
          ref's state may have changed again prior to the fn call, so use
          old/new-state rather than derefing the reference. Note also that watch
          fns may be called from multiple threads simultaneously. Var watchers
          are triggered only by root binding changes, not thread-local
          set!s. Keys must be unique per reference, and can be used to remove
          the watch with remove-watch, but are otherwise considered opaque by
          the watch mechanism.
    "unchecked-dec":
      name: "unchecked-dec"
      doc: >
        Returns a number one less than x, a long.
          Note - uses a primitive operator subject to overflow.
    "some":
      name: "some"
      doc: >
        Returns the first logical true value of (pred x) for any x in coll,
          else nil.  One common idiom is to use a set as pred, for example
          this will return :fred if :fred is in the sequence, otherwise nil:
          (some #{:fred} coll)
    "nil?":
      name: "nil?"
      doc: >
        Returns true if x is nil, false otherwise.
    "string?":
      name: "string?"
      doc: >
        Return true if x is a String
    "boolean-array":
      name: "boolean-array"
      doc: >
        Creates an array of booleans
    "second":
      name: "second"
      doc: >
        Same as (first (next x))
    "letfn":
      name: "letfn"
      doc: >
        fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)
        
          Takes a vector of function specs and a body, and generates a set of
          bindings of functions to their names. All of the names are available
          in all of the definitions of the functions, as well as the body.
    "keys":
      name: "keys"
      doc: >
        Returns a sequence of the map's keys.
    "for":
      name: "for"
      doc: >
        List comprehension. Takes a vector of one or more
           binding-form/collection-expr pairs, each followed by zero or more
           modifiers, and yields a lazy sequence of evaluations of expr.
           Collections are iterated in a nested fashion, rightmost fastest,
           and nested coll-exprs can refer to bindings created in prior
           binding-forms.  Supported modifiers are: :let [binding-form expr ...],
           :while test, :when test.
        
          (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))
    "*2":
      name: "*2"
      doc: >
        bound in a repl thread to the second most recent value printed
    "long-array":
      name: "long-array"
      doc: >
        Creates an array of longs
    "pop-thread-bindings":
      name: "pop-thread-bindings"
      doc: >
        Pop one set of bindings pushed with push-binding before. It is an error to
          pop bindings without pushing before.
    "error-mode":
      name: "error-mode"
      doc: >
        Returns the error-mode of agent a.  See set-error-mode!
    "cond":
      name: "cond"
      doc: >
        Takes a set of test/expr pairs. It evaluates each test one at a
          time.  If a test returns logical true, cond evaluates and returns
          the value of the corresponding expr and doesn't evaluate any of the
          other tests or exprs. (cond) returns nil.
    "bit-set":
      name: "bit-set"
      doc: >
        Set bit at index n
    "spit":
      name: "spit"
      doc: >
        Opposite of slurp.  Opens f with writer, writes content, then
          closes f. Options passed to clojure.java.io/writer.
    "find-protocol-method":
      name: "find-protocol-method"
    "fn":
      name: "fn"
      doc: >
        params => positional-params* , or positional-params* & next-param
          positional-param => binding-form
          next-param => binding-form
          name => symbol
        
          Defines a function
    "sorted?":
      name: "sorted?"
      doc: >
        Returns true if coll implements Sorted
    "short-array":
      name: "short-array"
      doc: >
        Creates an array of shorts
    "ns-unalias":
      name: "ns-unalias"
      doc: >
        Removes the alias for the symbol from the namespace.
    "ns-publics":
      name: "ns-publics"
      doc: >
        Returns a map of the public intern mappings for the namespace.
    "EMPTY-NODE":
      name: "EMPTY-NODE"
    "char-array":
      name: "char-array"
      doc: >
        Creates an array of chars
    "dosync":
      name: "dosync"
      doc: >
        Runs the exprs (in an implicit do) in a transaction that encompasses
          exprs and any nested calls.  Starts a transaction if none is already
          running on this thread. Any uncaught exception will abort the
          transaction and flow out of dosync. The exprs may be run more than
          once, but any effects on Refs will be atomic.
    "all-ns":
      name: "all-ns"
      doc: >
        Returns a sequence of all namespaces.
    "long":
      name: "long"
      doc: >
        Coerce to long
    "with-open":
      name: "with-open"
      doc: >
        bindings => [name init ...]
        
          Evaluates body in a try expression with names bound to the values
          of the inits, and a finally clause that calls (.close name) on each
          name in reverse order.
    "init-proxy":
      name: "init-proxy"
      doc: >
        Takes a proxy instance and a map of strings (which must
          correspond to methods of the proxy superclass/superinterfaces) to
          fns (which must take arguments matching the corresponding method,
          plus an additional (explicit) first arg corresponding to this, and
          sets the proxy's fn map.  Returns the proxy.
    "add-classpath":
      name: "add-classpath"
      doc: >
        DEPRECATED 
        
          Adds the url (String or URL object) to the classpath per
          URLClassLoader.addURL
    "false?":
      name: "false?"
      doc: >
        Returns true if x is the value false, false otherwise.
    "await1":
      name: "await1"
    "true?":
      name: "true?"
      doc: >
        Returns true if x is the value true, false otherwise.
    "gen-interface":
      name: "gen-interface"
      doc: >
        When compiling, generates compiled bytecode for an interface with
          the given package-qualified :name (which, as all names in these
          parameters, can be a string or symbol), and writes the .class file
          to the *compile-path* directory.  When not compiling, does nothing.
         
          In all subsequent sections taking types, the primitive types can be
          referred to by their Java names (int, float etc), and classes in the
          java.lang package can be used without a package qualifier. All other
          classes must be fully qualified.
         
          Options should be a set of key/value pairs, all except for :name are
          optional:
        
          :name aname
        
          The package-qualified name of the class to be generated
        
          :extends [interface ...]
        
          One or more interfaces, which will be extended by this interface.
        
          :methods [ [name [param-types] return-type], ...]
        
          This parameter is used to specify the signatures of the methods of
          the generated interface.  Do not repeat superinterface signatures
          here.
    "sync":
      name: "sync"
      doc: >
        transaction-flags => TBD, pass nil for now
        
          Runs the exprs (in an implicit do) in a transaction that encompasses
          exprs and any nested calls.  Starts a transaction if none is already
          running on this thread. Any uncaught exception will abort the
          transaction and flow out of sync. The exprs may be run more than
          once, but any effects on Refs will be atomic.
    "short":
      name: "short"
      doc: >
        Coerce to short
    "ns-unmap":
      name: "ns-unmap"
      doc: >
        Removes the mappings for the symbol from the namespace.
    "repeat":
      name: "repeat"
      doc: >
        Returns a lazy (infinite!, or length n if supplied) sequence of xs.
    "zipmap":
      name: "zipmap"
      doc: >
        Returns a map with the keys mapped to the corresponding vals.
    "distinct":
      name: "distinct"
      doc: >
        Returns a lazy sequence of the elements of coll with duplicates removed
    "get-in":
      name: "get-in"
      doc: >
        Returns the value in a nested associative structure,
          where ks is a sequence of keys. Returns nil if the key
          is not present, or the not-found value if supplied.
    "bit-xor":
      name: "bit-xor"
      doc: >
        Bitwise exclusive or
    "char-escape-string":
      name: "char-escape-string"
      doc: >
        Returns escape string for char or nil if none
    "complement":
      name: "complement"
      doc: >
        Takes a fn f and returns a fn that takes the same arguments as f,
          has the same effects, if any, and returns the opposite truth value.
    "let":
      name: "let"
      doc: >
        binding => binding-form init-expr
        
          Evaluates the exprs in a lexical context in which the symbols in
          the binding-forms are bound to their respective init-exprs or parts
          therein.
    "get-validator":
      name: "get-validator"
      doc: >
        Gets the validator-fn for a var/ref/agent/atom.
    "dotimes":
      name: "dotimes"
      doc: >
        bindings => name n
        
          Repeatedly executes body (presumably for side-effects) with name
          bound to integers from 0 through n-1.
    "ref-max-history":
      name: "ref-max-history"
      doc: >
        Gets the max-history of a ref, or sets it and returns the ref
    "*ns*":
      name: "*ns*"
      doc: >
        A clojure.lang.Namespace object representing the current namespace.
    "promise":
      name: "promise"
      doc: >
        Alpha - subject to change.
          Returns a promise object that can be read with deref/@, and set,
          once only, with deliver. Calls to deref/@ prior to delivery will
          block, unless the variant of deref with timeout is used. All
          subsequent derefs will return the same delivered value without
          blocking. See also - realized?.
    "defmethod":
      name: "defmethod"
      doc: >
        Creates and installs a new method of multimethod associated with dispatch-value. 
    "set-agent-send-executor!":
      name: "set-agent-send-executor!"
      doc: >
        Sets the ExecutorService to be used by send
    "-'":
      name: "-'"
      doc: >
        If no ys are supplied, returns the negation of x, else subtracts
          the ys from x and returns the result. Supports arbitrary precision.
          See also: -
    "pop!":
      name: "pop!"
      doc: >
        Alpha - subject to change.
          Removes the last item from a transient vector. If
          the collection is empty, throws an exception. Returns coll
    "derive":
      name: "derive"
      doc: >
        Establishes a parent/child relationship between parent and
          tag. Parent must be a namespace-qualified symbol or keyword and
          child can be either a namespace-qualified symbol or keyword or a
          class. h must be a hierarchy obtained from make-hierarchy, if not
          supplied defaults to, and modifies, the global hierarchy.
    "aset-float":
      name: "aset-float"
      doc: >
        Sets the value at the index/indices. Works on arrays of float. Returns val.
    "extend":
      name: "extend"
      doc: >
        Implementations of protocol methods can be provided using the extend construct:
        
          (extend AType
            AProtocol
             {:foo an-existing-fn
              :bar (fn [a b] ...)
              :baz (fn ([a]...) ([a b] ...)...)}
            BProtocol 
              {...} 
            ...)
         
          extend takes a type/class (or interface, see below), and one or more
          protocol + method map pairs. It will extend the polymorphism of the
          protocol's methods to call the supplied methods when an AType is
          provided as the first argument. 
        
          Method maps are maps of the keyword-ized method names to ordinary
          fns. This facilitates easy reuse of existing fns and fn maps, for
          code reuse/mixins without derivation or composition. You can extend
          an interface to a protocol. This is primarily to facilitate interop
          with the host (e.g. Java) but opens the door to incidental multiple
          inheritance of implementation since a class can inherit from more
          than one interface, both of which extend the protocol. It is TBD how
          to specify which impl to use. You can extend a protocol on nil.
        
          If you are supplying the definitions explicitly (i.e. not reusing
          exsting functions or mixin maps), you may find it more convenient to
          use the extend-type or extend-protocol macros.
        
          Note that multiple independent extend clauses can exist for the same
          type, not all protocols need be defined in a single extend call.
        
          See also:
          extends?, satisfies?, extenders
    "-reset-methods":
      name: "-reset-methods"
    "lazy-cat":
      name: "lazy-cat"
      doc: >
        Expands to code which yields a lazy sequence of the concatenation
          of the supplied colls.  Each coll expr is not evaluated until it is
          needed. 
        
          (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))
    "commute":
      name: "commute"
      doc: >
        Must be called in a transaction. Sets the in-transaction-value of
          ref to:
        
          (apply fun in-transaction-value-of-ref args)
        
          and returns the in-transaction-value of ref.
        
          At the commit point of the transaction, sets the value of ref to be:
        
          (apply fun most-recently-committed-value-of-ref args)
        
          Thus fun should be commutative, or, failing that, you must accept
          last-one-in-wins behavior.  commute allows for more concurrency than
          ref-set.
    "defstruct":
      name: "defstruct"
      doc: >
        Same as (def name (create-struct keys...))
    "with-in-str":
      name: "with-in-str"
      doc: >
        Evaluates body in a context in which *in* is bound to a fresh
          StringReader initialized with the string s.
    "partition-by":
      name: "partition-by"
      doc: >
        Applies f to each value in coll, splitting it each time f returns
           a new value.  Returns a lazy seq of partitions.
    "rem":
      name: "rem"
      doc: >
        remainder of dividing numerator by denominator.
    "odd?":
      name: "odd?"
      doc: >
        Returns true if n is odd, throws an exception if n is not an integer
    "symbol?":
      name: "symbol?"
      doc: >
        Return true if x is a Symbol
    "mapv":
      name: "mapv"
      doc: >
        Returns a vector consisting of the result of applying f to the
          set of first items of each coll, followed by applying f to the set
          of second items in each coll, until any one of the colls is
          exhausted.  Any remaining items in other colls are ignored. Function
          f should accept number-of-colls arguments.
    "*print-level*":
      name: "*print-level*"
      doc: >
        *print-level* controls how many levels deep the printer will
          print nested objects. If it is bound to logical false, there is no
          limit. Otherwise, it must be bound to an integer indicating the maximum
          level to print. Each argument to print is at level 0; if an argument is a
          collection, its items are at level 1; and so on. If an object is a
          collection and is at a level greater than or equal to the value bound to
          *print-level*, the printer prints '#' to represent it. The root binding
          is nil indicating no limit.
    "*allow-unresolved-vars*":
      name: "*allow-unresolved-vars*"
    "thread-bound?":
      name: "thread-bound?"
      doc: >
        Returns true if all of the vars provided as arguments have thread-local bindings.
           Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.
    "*data-readers*":
      name: "*data-readers*"
      doc: >
        Map from reader tag symbols to data reader Vars.
        
          When Clojure starts, it searches for files named 'data_readers.clj'
          at the root of the classpath. Each such file must contain a literal
          map of symbols, like this:
        
              {foo/bar my.project.foo/bar
               foo/baz my.project/baz}
        
          The first symbol in each pair is a tag that will be recognized by
          the Clojure reader. The second symbol in the pair is the
          fully-qualified name of a Var which will be invoked by the reader to
          parse the form following the tag. For example, given the
          data_readers.clj file above, the Clojure reader would parse this
          form:
        
              #foo/bar [1 2 3]
        
          by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The
          data reader function is invoked on the form AFTER it has been read
          as a normal Clojure data structure by the reader.
        
          Reader tags without namespace qualifiers are reserved for
          Clojure. Default reader tags are defined in
          clojure.core/default-data-readers but may be overridden in
          data_readers.clj or by rebinding this Var.
    "filterv":
      name: "filterv"
      doc: >
        Returns a vector of the items in coll for which
          (pred item) returns true. pred must be free of side-effects.
    "proxy-call-with-super":
      name: "proxy-call-with-super"
    "*unchecked-math*":
      name: "*unchecked-math*"
      doc: >
        While bound to true, compilations of +, -, *, inc, dec and the
          coercions will be done without overflow checks. Default: false.
    "ns-interns":
      name: "ns-interns"
      doc: >
        Returns a map of the intern mappings for the namespace.
    "re-matches":
      name: "re-matches"
      doc: >
        Returns the match, if any, of string to pattern, using
          java.util.regex.Matcher.matches().  Uses re-groups to return the
          groups.
    "split-with":
      name: "split-with"
      doc: >
        Returns a vector of [(take-while pred coll) (drop-while pred coll)]
    "munge":
      name: "munge"
    "loop":
      name: "loop"
      doc: >
        Evaluates the exprs in a lexical context in which the symbols in
          the binding-forms are bound to their respective init-exprs or parts
          therein. Acts as a recur target.
    "future-done?":
      name: "future-done?"
      doc: >
        Returns true if future f is done
    "next":
      name: "next"
      doc: >
        Returns a seq of the items after the first. Calls seq on its
          argument.  If there are no more items, returns nil.
    "import":
      name: "import"
      doc: >
        import-list => (package-symbol class-name-symbols*)
        
          For each name in class-name-symbols, adds a mapping from name to the
          class named by package.name to the current namespace. Use :import in the ns
          macro in preference to calling this directly.
    "deliver":
      name: "deliver"
      doc: >
        Alpha - subject to change.
          Delivers the supplied value to the promise, releasing any pending
          derefs. A subsequent call to deliver on a promise will have no effect.
    "symbol":
      name: "symbol"
      doc: >
        Returns a Symbol with the given namespace and name.
    "vals":
      name: "vals"
      doc: >
        Returns a sequence of the map's values.
    "->ArrayChunk":
      name: "->ArrayChunk"
      doc: >
        Positional factory function for class clojure.core.ArrayChunk.
    "select-keys":
      name: "select-keys"
      doc: >
        Returns a map containing only those entries in map whose key is in keys
    "re-matcher":
      name: "re-matcher"
      doc: >
        Returns an instance of java.util.regex.Matcher, for use, e.g. in
          re-find.
    "rand":
      name: "rand"
      doc: >
        Returns a random floating point number between 0 (inclusive) and
          n (default 1) (exclusive).
    "deref":
      name: "deref"
      doc: >
        Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
          returns the in-transaction-value of ref, else returns the
          most-recently-committed value of ref. When applied to a var, agent
          or atom, returns its current state. When applied to a delay, forces
          it if not already forced. When applied to a future, will block if
          computation not complete. When applied to a promise, will block
          until a value is delivered.  The variant taking a timeout can be
          used for blocking references (futures and promises), and will return
          timeout-val if the timeout (in milliseconds) is reached before a
          value is available. See also - realized?.
    "some->":
      name: "some->"
      doc: >
        When expr is not nil, threads it into the first form (via ->),
          and when that result is not nil, through the next etc
    "unchecked-inc":
      name: "unchecked-inc"
      doc: >
        Returns a number one greater than x, a long.
          Note - uses a primitive operator subject to overflow.
    "*math-context*":
      name: "*math-context*"
    "read":
      name: "read"
      doc: >
        Reads the next object from stream, which must be an instance of
          java.io.PushbackReader or some derivee.  stream defaults to the
          current value of *in*.
        
          Note that read can execute code (controlled by *read-eval*),
          and as such should be used only with trusted sources.
        
          For data structure interop use clojure.edn/read
    "sequence":
      name: "sequence"
      doc: >
        Coerces coll to a (possibly empty) sequence, if it is not already
          one. Will not force a lazy seq. (sequence nil) yields ()
    "make-hierarchy":
      name: "make-hierarchy"
      doc: >
        Creates a hierarchy object for use with derive, isa? etc.
    "+":
      name: "+"
      doc: >
        Returns the sum of nums. (+) returns 0. Does not auto-promote
          longs, will throw on overflow. See also: +'
    "number?":
      name: "number?"
      doc: >
        Returns true if x is a Number
    "assoc!":
      name: "assoc!"
      doc: >
        Alpha - subject to change.
          When applied to a transient map, adds mapping of key(s) to
          val(s). When applied to a transient vector, sets the val at index.
          Note - index must be <= (count vector). Returns coll.
    "descendants":
      name: "descendants"
      doc: >
        Returns the immediate and indirect children of tag, through a
          relationship established via derive. h must be a hierarchy obtained
          from make-hierarchy, if not supplied defaults to the global
          hierarchy. Note: does not work on Java type inheritance
          relationships.
    "into-array":
      name: "into-array"
      doc: >
        Returns an array with components set to the values in aseq. The array's
          component type is type if provided, or the type of the first value in
          aseq if present, or Object. All values in aseq must be compatible with
          the component type. Class objects for the primitive types can be obtained
          using, e.g., Integer/TYPE.
    "last":
      name: "last"
      doc: >
        Return the last item in coll, in linear time
    "some-fn":
      name: "some-fn"
      doc: >
        Takes a set of predicates and returns a function f that returns the first logical true value
          returned by one of its composing predicates against any of its arguments, else it returns
          logical false. Note that f is short-circuiting in that it will stop execution on the first
          argument that triggers a logical true result against the original predicates.
    "unchecked-negate":
      name: "unchecked-negate"
      doc: >
        Returns the negation of x, a long.
          Note - uses a primitive operator subject to overflow.
    "integer?":
      name: "integer?"
      doc: >
        Returns true if n is an integer
    "defrecord":
      name: "defrecord"
      doc: >
        Alpha - subject to change
          
          (defrecord name [fields*]  options* specs*)
          
          Currently there are no options.
        
          Each spec consists of a protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args*] body)*
        
          Dynamically generates compiled bytecode for class with the given
          name, in a package with the same name as the current namespace, the
          given fields, and, optionally, methods for protocols and/or
          interfaces.
        
          The class will have the (immutable) fields named by
          fields, which can have type hints. Protocols/interfaces and methods
          are optional. The only methods that can be supplied are those
          declared in the protocols/interfaces.  Note that method bodies are
          not closures, the local environment includes only the named fields,
          and those fields can be accessed directy.
        
          Method definitions take the form:
        
          (methodname [args*] body)
        
          The argument and return types can be hinted on the arg and
          methodname symbols. If not supplied, they will be inferred, so type
          hints should be reserved for disambiguation.
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that a parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations. Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          In the method bodies, the (unqualified) name can be used to name the
          class (for calls to new, instance? etc).
        
          The class will have implementations of several (clojure.lang)
          interfaces generated automatically: IObj (metadata support) and
          IPersistentMap, and all of their superinterfaces.
        
          In addition, defrecord will define type-and-value-based =,
          and will defined Java .hashCode and .equals consistent with the
          contract for java.util.Map.
        
          When AOT compiling, generates compiled bytecode for a class with the
          given name (a symbol), prepends the current ns as the package, and
          writes the .class file to the *compile-path* directory.
        
          Two constructors will be defined, one taking the designated fields
          followed by a metadata map (nil for none) and an extension field
          map (nil for none), and one taking only the fields (using nil for
          meta and extension fields). Note that the field names __meta
          and __extmap are currently reserved and should not be used when
          defining your own records.
        
          Given (defrecord TypeName ...), two factory functions will be
          defined: ->TypeName, taking positional parameters for the fields,
          and map->TypeName, taking a map of keywords to field values.
    "reduced?":
      name: "reduced?"
      doc: >
        Returns true if x is the result of a call to reduced
    "*read-eval*":
      name: "*read-eval*"
      doc: >
        Defaults to true (or value specified by system property, see below)
          ***This setting implies that the full power of the reader is in play,
          including syntax that can cause code to execute. It should never be
          used with untrusted sources. See also: clojure.edn/read.***
        
          When set to logical false in the thread-local binding,
          the eval reader (#=) and record/type literal syntax are disabled in read/load.
          Example (will fail): (binding [*read-eval* false] (read-string "#=(* 2 21)"))
        
          The default binding can be controlled by the system property
          'clojure.read.eval' System properties can be set on the command line
          like this:
        
          java -Dclojure.read.eval=false ...
        
          The system property can also be set to 'unknown' via
          -Dclojure.read.eval=unknown, in which case the default binding
          is :unknown and all reads will fail in contexts where *read-eval*
          has not been explicitly bound to either true or false. This setting
          can be a useful diagnostic tool to ensure that all of your reads
          occur in considered contexts. You can also accomplish this in a
          particular scope by binding *read-eval* to :unknown
          
    "alter":
      name: "alter"
      doc: >
        Must be called in a transaction. Sets the in-transaction-value of
          ref to:
        
          (apply fun in-transaction-value-of-ref args)
        
          and returns the in-transaction-value of ref.
    "prn":
      name: "prn"
      doc: >
        Same as pr followed by (newline). Observes *flush-on-newline*
    "with-meta":
      name: "with-meta"
      doc: >
        Returns an object of the same type and value as obj, with
            map m as its metadata.
    "with-out-str":
      name: "with-out-str"
      doc: >
        Evaluates exprs in a context in which *out* is bound to a fresh
          StringWriter.  Returns the string created by any nested printing
          calls.
    "floats":
      name: "floats"
      doc: >
        Casts to float[]
    "*":
      name: "*"
      doc: >
        Returns the product of nums. (*) returns 1. Does not auto-promote
          longs, will throw on overflow. See also: *'
    "*compile-files*":
      name: "*compile-files*"
      doc: >
        Set to true when compiling files, false otherwise.
    "when-not":
      name: "when-not"
      doc: >
        Evaluates test. If logical false, evaluates body in an implicit do.
    "butlast":
      name: "butlast"
      doc: >
        Return a seq of all but the last item in coll, in linear time
    "-":
      name: "-"
      doc: >
        If no ys are supplied, returns the negation of x, else subtracts
          the ys from x and returns the result. Does not auto-promote
          longs, will throw on overflow. See also: -'
    "->>":
      name: "->>"
      doc: >
        Threads the expr through the forms. Inserts x as the
          last item in the first form, making a list of it if it is not a
          list already. If there are more forms, inserts the first form as the
          last item in second form, etc.
    "reversible?":
      name: "reversible?"
      doc: >
        Returns true if coll implements Reversible
    "rseq":
      name: "rseq"
      doc: >
        Returns, in constant time, a seq of the items in rev (which
          can be a vector or sorted-map), in reverse order. If rev is empty returns nil
    "send-off":
      name: "send-off"
      doc: >
        Dispatch a potentially blocking action to an agent. Returns the
          agent immediately. Subsequently, in a separate thread, the state of
          the agent will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "seq?":
      name: "seq?"
      doc: >
        Return true if x implements ISeq
    "refer-clojure":
      name: "refer-clojure"
      doc: >
        Same as (refer 'clojure.core <filters>)
    "identical?":
      name: "identical?"
      doc: >
        Tests if 2 arguments are the same object
    "..":
      name: ".."
      doc: >
        form => fieldName-symbol or (instanceMethodName-symbol args*)
        
          Expands into a member access (.) of the first member on the first
          argument, followed by the next member on the result, etc. For
          instance:
        
          (.. System (getProperties) (get "os.name"))
        
          expands to:
        
          (. (. System (getProperties)) (get "os.name"))
        
          but is easier to write, read, and understand.
    "print":
      name: "print"
      doc: >
        Prints the object(s) to the output stream that is the current value
          of *out*.  print and println produce output for human consumption.
    "vary-meta":
      name: "vary-meta"
      doc: >
        Returns an object of the same type and value as obj, with
          (apply f (meta obj) args) as its metadata.
    "with-loading-context":
      name: "with-loading-context"
    "agent-error":
      name: "agent-error"
      doc: >
        Returns the exception thrown during an asynchronous action of the
          agent if the agent is failed.  Returns nil if the agent is not
          failed.
    "*command-line-args*":
      name: "*command-line-args*"
      doc: >
        A sequence of the supplied command line arguments, or nil if
          none were supplied
    "bit-flip":
      name: "bit-flip"
      doc: >
        Flip bit at index n
    "zero?":
      name: "zero?"
      doc: >
        Returns true if num is zero, else false
    "bit-and":
      name: "bit-and"
      doc: >
        Bitwise and
    "unquote-splicing":
      name: "unquote-splicing"
    "future":
      name: "future"
      doc: >
        Takes a body of expressions and yields a future object that will
          invoke the body in another thread, and will cache the result and
          return it on all subsequent calls to deref/@. If the computation has
          not yet finished, calls to deref/@ will block, unless the variant of
          deref with timeout is used. See also - realized?.
    "re-groups":
      name: "re-groups"
      doc: >
        Returns the groups from the most recent match/find. If there are no
          nested groups, returns a string of the entire match. If there are
          nested groups, returns a vector of the groups, the first element
          being the entire match.
    "*warn-on-reflection*":
      name: "*warn-on-reflection*"
      doc: >
        When set to true, the compiler will emit warnings when reflection is
          needed to resolve Java method calls or field accesses.
        
          Defaults to false.
    "newline":
      name: "newline"
      doc: >
        Writes a platform-specific newline to *out*
    "replicate":
      name: "replicate"
      doc: >
        DEPRECATED: Use 'repeat' instead.
           Returns a lazy seq of n xs.
    "keep-indexed":
      name: "keep-indexed"
      doc: >
        Returns a lazy sequence of the non-nil results of (f index item). Note,
          this means false return values will be included.  f must be free of
          side-effects.
    "char?":
      name: "char?"
      doc: >
        Return true if x is a Character
    "distinct?":
      name: "distinct?"
      doc: >
        Returns true if no two of the arguments are =
    "remove-ns":
      name: "remove-ns"
      doc: >
        Removes the namespace named by the symbol. Use with caution.
          Cannot be used to remove the clojure namespace.
    "ratio?":
      name: "ratio?"
      doc: >
        Returns true if n is a Ratio
    "xml-seq":
      name: "xml-seq"
      doc: >
        A tree seq on the xml elements as per xml/parse
    "vec":
      name: "vec"
      doc: >
        Creates a new vector containing the contents of coll. Java arrays
          will be aliased and should not be modified.
    "concat":
      name: "concat"
      doc: >
        Returns a lazy seq representing the concatenation of the elements in the supplied colls.
    "update-in":
      name: "update-in"
      doc: >
        'Updates' a value in a nested associative structure, where ks is a
          sequence of keys and f is a function that will take the old value
          and any supplied args and return the new value, and returns a new
          nested structure.  If any levels do not exist, hash-maps will be
          created.
    "vector":
      name: "vector"
      doc: >
        Creates a new vector containing the args.
    "with-bindings*":
      name: "with-bindings*"
      doc: >
        Takes a map of Var/value pairs. Installs for the given Vars the associated
          values as thread-local bindings. Then calls f with the supplied arguments.
          Pops the installed bindings after f returned. Returns whatever f returns.
    "conj":
      name: "conj"
      doc: >
        conj[oin]. Returns a new collection with the xs
            'added'. (conj nil item) returns (item).  The 'addition' may
            happen at different 'places' depending on the concrete type.
    "bases":
      name: "bases"
      doc: >
        Returns the immediate superclass and direct interfaces of c, if any
    "with-redefs":
      name: "with-redefs"
      doc: >
        binding => var-symbol temp-value-expr
        
          Temporarily redefines Vars while executing the body.  The
          temp-value-exprs will be evaluated and each resulting value will
          replace in parallel the root value of its Var.  After the body is
          executed, the root values of all the Vars will be set back to their
          old values.  These temporary changes will be visible in all threads.
          Useful for mocking out functions during testing.
    "/":
      name: "/"
      doc: >
        If no denominators are supplied, returns 1/numerator,
          else returns numerator divided by all of the denominators.
    "unchecked-add":
      name: "unchecked-add"
      doc: >
        Returns the sum of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "ref-set":
      name: "ref-set"
      doc: >
        Must be called in a transaction. Sets the value of ref.
          Returns val.
    "assoc":
      name: "assoc"
      doc: >
        assoc[iate]. When applied to a map, returns a new map of the
            same (hashed/sorted) type, that contains the mapping of key(s) to
            val(s). When applied to a vector, returns a new vector that
            contains val at index. Note - index must be <= (count vector).
    "unchecked-remainder-int":
      name: "unchecked-remainder-int"
      doc: >
        Returns the remainder of division of x by y, both int.
          Note - uses a primitive operator subject to truncation.
    "seque":
      name: "seque"
      doc: >
        Creates a queued seq on another (presumably lazy) seq s. The queued
          seq will produce a concrete seq in the background, and can get up to
          n items ahead of the consumer. n-or-q can be an integer n buffer
          size, or an instance of java.util.concurrent BlockingQueue. Note
          that reading from a seque can block if the reader gets ahead of the
          producer.
    "aset-char":
      name: "aset-char"
      doc: >
        Sets the value at the index/indices. Works on arrays of char. Returns val.
    "boolean":
      name: "boolean"
      doc: >
        Coerce to boolean
    "read-string":
      name: "read-string"
      doc: >
        Reads one object from the string s.
        
          Note that read-string can execute code (controlled by *read-eval*),
          and as such should be used only with trusted sources.
        
          For data structure interop use clojure.edn/read-string
    "neg?":
      name: "neg?"
      doc: >
        Returns true if num is less than zero, else false
    "float-array":
      name: "float-array"
      doc: >
        Creates an array of floats
    "doubles":
      name: "doubles"
      doc: >
        Casts to double[]
    "isa?":
      name: "isa?"
      doc: >
        Returns true if (= child parent), or child is directly or indirectly derived from
          parent, either via a Java type inheritance relationship or a
          relationship established via derive. h must be a hierarchy obtained
          from make-hierarchy, if not supplied defaults to the global
          hierarchy
    "future-call":
      name: "future-call"
      doc: >
        Takes a function of no args and yields a future object that will
          invoke the function in another thread, and will cache the result and
          return it on all subsequent calls to deref/@. If the computation has
          not yet finished, calls to deref/@ will block, unless the variant
          of deref with timeout is used. See also - realized?.
    "doto":
      name: "doto"
      doc: >
        Evaluates x then calls all of the methods and functions with the
          value of x supplied at the front of the given arguments.  The forms
          are evaluated in order.  Returns x.
        
          (doto (new java.util.HashMap) (.put "a" 1) (.put "b" 2))
    "extends?":
      name: "extends?"
      doc: >
        Returns true if atype extends protocol
    "remove-watch":
      name: "remove-watch"
      doc: >
        Alpha - subject to change.
          Removes a watch (set by add-watch) from a reference
    "print-str":
      name: "print-str"
      doc: >
        print to a string, returning it
    "*e":
      name: "*e"
      doc: >
        bound in a repl thread to the most recent exception caught by the repl
    "ref-history-count":
      name: "ref-history-count"
      doc: >
        Returns the history count of a ref
    "rsubseq":
      name: "rsubseq"
      doc: >
        sc must be a sorted collection, test(s) one of <, <=, > or
          >=. Returns a reverse seq of those entries with keys ek for
          which (test (.. sc comparator (compare ek key)) 0) is true
    "*flush-on-newline*":
      name: "*flush-on-newline*"
      doc: >
        When set to true, output will be flushed whenever a newline is printed.
        
          Defaults to true.
    "*out*":
      name: "*out*"
      doc: >
        A java.io.Writer object representing standard output for print operations.
        
          Defaults to System/out, wrapped in an OutputStreamWriter
    "future?":
      name: "future?"
      doc: >
        Returns true if x is a future
    "vector?":
      name: "vector?"
      doc: >
        Return true if x implements IPersistentVector
    "split-at":
      name: "split-at"
      doc: >
        Returns a vector of [(take n coll) (drop n coll)]
    "chunk-cons":
      name: "chunk-cons"
    "ns-refers":
      name: "ns-refers"
      doc: >
        Returns a map of the refer mappings for the namespace.
    "create-struct":
      name: "create-struct"
      doc: >
        Returns a structure basis object.
    "proxy-super":
      name: "proxy-super"
      doc: >
        Use to call a superclass method in the body of a proxy method. 
          Note, expansion captures 'this
    "int-array":
      name: "int-array"
      doc: >
        Creates an array of ints
    "unchecked-long":
      name: "unchecked-long"
      doc: >
        Coerce to long. Subject to rounding or truncation.
    "float":
      name: "float"
      doc: >
        Coerce to float
    "assert":
      name: "assert"
      doc: >
        Evaluates expr and throws an exception if it does not evaluate to
          logical true.
    "map":
      name: "map"
      doc: >
        Returns a lazy sequence consisting of the result of applying f to the
          set of first items of each coll, followed by applying f to the set
          of second items in each coll, until any one of the colls is
          exhausted.  Any remaining items in other colls are ignored. Function
          f should accept number-of-colls arguments.
    "+'":
      name: "+'"
      doc: >
        Returns the sum of nums. (+) returns 0. Supports arbitrary precision.
          See also: +
    "counted?":
      name: "counted?"
      doc: >
        Returns true if coll implements count in constant time
    "memfn":
      name: "memfn"
      doc: >
        Expands into code that creates a fn that expects to be passed an
          object and any args and calls the named instance method on the
          object passing the args. Use when you want to treat a Java method as
          a first-class fn. name may be type-hinted with the method receiver's
          type in order to avoid reflective calls.
    "double-array":
      name: "double-array"
      doc: >
        Creates an array of doubles
    "accessor":
      name: "accessor"
      doc: >
        Returns a fn that, given an instance of a structmap with the basis,
          returns the value at the key.  The key must be in the basis. The
          returned function should be (slightly) more efficient than using
          get, but such use of accessors should be limited to known
          performance-critical areas.
    "*print-length*":
      name: "*print-length*"
      doc: >
        *print-length* controls how many items of each collection the
          printer will print. If it is bound to logical false, there is no
          limit. Otherwise, it must be bound to an integer indicating the maximum
          number of items of each collection to print. If a collection contains
          more items, the printer will print items up to the limit followed by
          '...' to represent the remaining items. The root binding is nil
          indicating no limit.
    "frequencies":
      name: "frequencies"
      doc: >
        Returns a map from distinct items in coll to the number of times
          they appear.
    "chars":
      name: "chars"
      doc: >
        Casts to chars[]
    "class?":
      name: "class?"
      doc: >
        Returns true if x is an instance of Class
    "rand-int":
      name: "rand-int"
      doc: >
        Returns a random integer between 0 (inclusive) and n (exclusive).
    "*1":
      name: "*1"
      doc: >
        bound in a repl thread to the most recent value printed
    "aset-short":
      name: "aset-short"
      doc: >
        Sets the value at the index/indices. Works on arrays of short. Returns val.
    "unchecked-short":
      name: "unchecked-short"
      doc: >
        Coerce to short. Subject to rounding or truncation.
    "prn-str":
      name: "prn-str"
      doc: >
        prn to a string, returning it
    "iterate":
      name: "iterate"
      doc: >
        Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
    "chunk-append":
      name: "chunk-append"
    "when-first":
      name: "when-first"
      doc: >
        bindings => x xs
        
          Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once
    "unchecked-double":
      name: "unchecked-double"
      doc: >
        Coerce to double. Subject to rounding.
    "slurp":
      name: "slurp"
      doc: >
        Opens a reader on f and reads all its contents, returning a string.
          See clojure.java.io/reader for a complete list of supported arguments.
    "restart-agent":
      name: "restart-agent"
      doc: >
        When an agent is failed, changes the agent state to new-state and
          then un-fails the agent so that sends are allowed again.  If
          a :clear-actions true option is given, any actions queued on the
          agent that were being held while it was failed will be discarded,
          otherwise those held actions will proceed.  The new-state must pass
          the validator if any, or restart will throw an exception and the
          agent will remain failed with its old state and error.  Watchers, if
          any, will NOT be notified of the new state.  Throws an exception if
          the agent is not failed.
    "unchecked-int":
      name: "unchecked-int"
      doc: >
        Coerce to int. Subject to rounding or truncation.
    "mapcat":
      name: "mapcat"
      doc: >
        Returns the result of applying concat to the result of applying map
          to f and colls.  Thus function f should return a collection.
    "assoc-in":
      name: "assoc-in"
      doc: >
        Associates a value in a nested associative structure, where ks is a
          sequence of keys and v is the new value and returns a new nested structure.
          If any levels do not exist, hash-maps will be created.
    "get-thread-bindings":
      name: "get-thread-bindings"
      doc: >
        Get a map with the Var/value pairs which is currently in effect for the
          current thread.
    "special-symbol?":
      name: "special-symbol?"
      doc: >
        Returns true if s names a special form
    "ref":
      name: "ref"
      doc: >
        Creates and returns a Ref with an initial value of x and zero or
          more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          :min-history (default 0)
          :max-history (default 10)
        
          If metadata-map is supplied, it will become the metadata on the
          ref. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception. validate-fn will be called on
          transaction commit, when all refs have their final values.
        
          Normally refs accumulate history dynamically as needed to deal with
          read demands. If you know in advance you will need history you can
          set :min-history to ensure it will be available when first needed (instead
          of after a read fault). History is limited, and the limit can be set
          with :max-history.
    "conj!":
      name: "conj!"
      doc: >
        Alpha - subject to change.
          Adds x to the transient collection, and return coll. The 'addition'
          may happen at different 'places' depending on the concrete type.
    "find-var":
      name: "find-var"
      doc: >
        Returns the global var named by the namespace-qualified symbol, or
          nil if no var with that name.
    "inc":
      name: "inc"
      doc: >
        Returns a number one greater than num. Does not auto-promote
          longs, will throw on overflow. See also: inc'
    "future-cancel":
      name: "future-cancel"
      doc: >
        Cancels the future, if possible.
    "every-pred":
      name: "every-pred"
      doc: >
        Takes a set of predicates and returns a function f that returns true if all of its
          composing predicates return a logical true value against all of its arguments, else it returns
          false. Note that f is short-circuiting in that it will stop execution on the first
          argument that triggers a logical false result against the original predicates.
    "definline":
      name: "definline"
      doc: >
        Experimental - like defmacro, except defines a named function whose
          body is the expansion, calls to which may be expanded inline as if
          it were a macro. Cannot be used with variadic (&) args.
    "bound-fn*":
      name: "bound-fn*"
      doc: >
        Returns a function, which will install the same bindings in effect as in
          the thread at the time bound-fn* was called and then call f with any given
          arguments. This may be used to define a helper function which runs on a
          different thread, but needs the same bindings in place.
    "default-data-readers":
      name: "default-data-readers"
      doc: >
        Default map of data reader functions provided by Clojure. May be
          overridden by binding *data-readers*.
    "unchecked-subtract":
      name: "unchecked-subtract"
      doc: >
        Returns the difference of x and y, both long.
          Note - uses a primitive operator subject to overflow.
    "ns-name":
      name: "ns-name"
      doc: >
        Returns the name of the namespace, a symbol.
    "shuffle":
      name: "shuffle"
      doc: >
        Return a random permutation of coll
    "defn-":
      name: "defn-"
      doc: >
        same as defn, yielding non-public def
    "*file*":
      name: "*file*"
      doc: >
        The path of the file being evaluated, as a String.
        
          Evaluates to nil when there is no file, eg. in the REPL.
    "re-find":
      name: "re-find"
      doc: >
        Returns the next regex match, if any, of string to pattern, using
          java.util.regex.Matcher.find().  Uses re-groups to return the
          groups.
    "bit-not":
      name: "bit-not"
      doc: >
        Bitwise complement
    "construct-proxy":
      name: "construct-proxy"
      doc: >
        Takes a proxy class and any arguments for its superclass ctor and
          creates and returns an instance of the proxy.
    "ref-min-history":
      name: "ref-min-history"
      doc: >
        Gets the min-history of a ref, or sets it and returns the ref
    "destructure":
      name: "destructure"
    "seq":
      name: "seq"
      doc: >
        Returns a seq on the collection. If the collection is
            empty, returns nil.  (seq nil) returns nil. seq also works on
            Strings, native Java arrays (of reference types) and any objects
            that implement Iterable.
    "intern":
      name: "intern"
      doc: >
        Finds or creates a var named by the symbol name in the namespace
          ns (which can be a symbol or a namespace), setting its root binding
          to val if supplied. The namespace must exist. The var will adopt any
          metadata from the name symbol.  Returns the var.
    "unchecked-multiply-int":
      name: "unchecked-multiply-int"
      doc: >
        Returns the product of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "pvalues":
      name: "pvalues"
      doc: >
        Returns a lazy sequence of the values of the exprs, which are
          evaluated in parallel
    "to-array-2d":
      name: "to-array-2d"
      doc: >
        Returns a (potentially-ragged) 2-dimensional array of Objects
          containing the contents of coll, which can be any Collection of any
          Collection.
    "sorted-map-by":
      name: "sorted-map-by"
      doc: >
        keyval => key val
          Returns a new sorted map with supplied mappings, using the supplied
          comparator.  If any keys are equal, they are handled as if by
          repeated uses of assoc.
    "filter":
      name: "filter"
      doc: >
        Returns a lazy sequence of the items in coll for which
          (pred item) returns true. pred must be free of side-effects.
    "->VecNode":
      name: "->VecNode"
      doc: >
        Positional factory function for class clojure.core.VecNode.
    "*verbose-defrecords*":
      name: "*verbose-defrecords*"
    "*clojure-version*":
      name: "*clojure-version*"
      doc: >
        The version info for Clojure core, as a map containing :major :minor 
          :incremental and :qualifier keys. Feature releases may increment 
          :minor and/or :major, bugfix releases will increment :incremental. 
          Possible values of :qualifier include "GA", "SNAPSHOT", "RC-x" "BETA-x"
    "var?":
      name: "var?"
      doc: >
        Returns true if v is of type clojure.lang.Var
    "alter-meta!":
      name: "alter-meta!"
      doc: >
        Atomically sets the metadata for a namespace/var/ref/agent/atom to be:
        
          (apply f its-current-meta args)
        
          f must be free of side-effects
    "unchecked-dec-int":
      name: "unchecked-dec-int"
      doc: >
        Returns a number one less than x, an int.
          Note - uses a primitive operator subject to overflow.
    "comment":
      name: "comment"
      doc: >
        Ignores body, yields nil
    "key":
      name: "key"
      doc: >
        Returns the key of the map entry.
    "class":
      name: "class"
      doc: >
        Returns the Class of x
    "re-seq":
      name: "re-seq"
      doc: >
        Returns a lazy sequence of successive matches of pattern in string,
          using java.util.regex.Matcher.find(), each such match processed with
          re-groups.
    "-cache-protocol-fn":
      name: "-cache-protocol-fn"
    "ns":
      name: "ns"
      doc: >
        Sets *ns* to the namespace named by name (unevaluated), creating it
          if needed.  references can be zero or more of: (:refer-clojure ...)
          (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)
          with the syntax of refer-clojure/require/use/import/load/gen-class
          respectively, except the arguments are unevaluated and need not be
          quoted. (:gen-class ...), when supplied, defaults to :name
          corresponding to the ns name, :main true, :impl-ns same as ns, and
          :init-impl-ns true. All options of gen-class are
          supported. The :gen-class directive is ignored when not
          compiling. If :gen-class is not supplied, when compiled only an
          nsname__init.class will be generated. If :refer-clojure is not used, a
          default (refer 'clojure) is used.  Use of ns is preferred to
          individual calls to in-ns/require/use/import:
        
          (ns foo.bar
            (:refer-clojure :exclude [ancestors printf])
            (:require (clojure.contrib sql combinatorics))
            (:use (my.lib this that))
            (:import (java.util Date Timer Random)
                     (java.sql Connection Statement)))
    "empty?":
      name: "empty?"
      doc: >
        Returns true if coll has no items - same as (not (seq coll)).
          Please use the idiom (seq x) rather than (not (empty? x))
    "test":
      name: "test"
      doc: >
        test [v] finds fn at key :test in var metadata and calls it,
          presuming failure will throw exception
    "print-dup":
      name: "print-dup"
    "create-ns":
      name: "create-ns"
      doc: >
        Create a new namespace named by the symbol if one doesn't already
          exist, returns it or the already-existing namespace of the same
          name.
    "name":
      name: "name"
      doc: >
        Returns the name String of a string, symbol or keyword.
    "list?":
      name: "list?"
      doc: >
        Returns true if x implements IPersistentList
    "nthrest":
      name: "nthrest"
      doc: >
        Returns the nth rest of coll, coll when n is 0.
    "aset":
      name: "aset"
      doc: >
        Sets the value at the index/indices. Works on Java arrays of
          reference types. Returns val.
    "nnext":
      name: "nnext"
      doc: >
        Same as (next (next x))
    "doall":
      name: "doall"
      doc: >
        When lazy sequences are produced via functions that have side
          effects, any effects other than those needed to produce the first
          element in the seq do not occur until the seq is consumed. doall can
          be used to force any effects. Walks through the successive nexts of
          the seq, retains the head and returns it, thus causing the entire
          seq to reside in memory at one time.
    "extenders":
      name: "extenders"
      doc: >
        Returns a collection of the types explicitly extending protocol
    "macroexpand-1":
      name: "macroexpand-1"
      doc: >
        If form represents a macro form, returns its expansion,
          else returns form.
    "not-any?":
      name: "not-any?"
      doc: >
        Returns false if (pred x) is logical true for any x in coll,
          else true.
    "resultset-seq":
      name: "resultset-seq"
      doc: >
        Creates and returns a lazy sequence of structmaps corresponding to
          the rows in the java.sql.ResultSet rs
    "reductions":
      name: "reductions"
      doc: >
        Returns a lazy seq of the intermediate values of the reduction (as
          per reduce) of coll by f, starting with init.
    "into":
      name: "into"
      doc: >
        Returns a new coll consisting of to-coll with all of the items of
          from-coll conjoined.
    "with-precision":
      name: "with-precision"
      doc: >
        Sets the precision and rounding mode to be used for BigDecimal operations.
        
          Usage: (with-precision 10 (/ 1M 3))
          or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))
        
          The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,
          HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.
    "*use-context-classloader*":
      name: "*use-context-classloader*"
    "transient":
      name: "transient"
      doc: >
        Alpha - subject to change.
          Returns a new, transient version of the collection, in constant time.
    "ffirst":
      name: "ffirst"
      doc: >
        Same as (first (first x))
    "bit-clear":
      name: "bit-clear"
      doc: >
        Clear bit at index n
    "proxy-name":
      name: "proxy-name"
    "extend-type":
      name: "extend-type"
      doc: >
        A macro that expands into an extend call. Useful when you are
          supplying the definitions explicitly inline, extend-type
          automatically creates the maps required by extend.  Propagates the
          class as a type hint on the first argument of all fns.
        
          (extend-type MyType 
            Countable
              (cnt [c] ...)
            Foo
              (bar [x y] ...)
              (baz ([x] ...) ([x y & zs] ...)))
        
          expands into:
        
          (extend MyType
           Countable
             {:cnt (fn [c] ...)}
           Foo
             {:baz (fn ([x] ...) ([x y & zs] ...))
              :bar (fn [x y] ...)})
    "load-reader":
      name: "load-reader"
      doc: >
        Sequentially read and evaluate the set of forms contained in the
          stream/file
    "with-redefs-fn":
      name: "with-redefs-fn"
      doc: >
        Temporarily redefines Vars during a call to func.  Each val of
          binding-map will replace the root value of its key which must be
          a Var.  After func is called with no args, the root values of all
          the Vars will be set back to their old values.  These temporary
          changes will be visible in all threads.  Useful for mocking out
          functions during testing.
    "or":
      name: "or"
      doc: >
        Evaluates exprs one at a time, from left to right. If a form
          returns a logical true value, or returns that value and doesn't
          evaluate any of the other expressions, otherwise it returns the
          value of the last expression. (or) returns nil.
    "hash":
      name: "hash"
      doc: >
        Returns the hash code of its argument. Note this is the hash code
          consistent with =, and thus is different than .hashCode for Integer,
          Short, Byte and Clojure collections.
    "as->":
      name: "as->"
      doc: >
        Binds name to expr, evaluates the first form in the lexical context
          of that binding, then binds name to that result, repeating for each
          successive form, returning the result of the last form.
    "inc'":
      name: "inc'"
      doc: >
        Returns a number one greater than num. Supports arbitrary precision.
          See also: inc
    "print-ctor":
      name: "print-ctor"
    "associative?":
      name: "associative?"
      doc: >
        Returns true if coll implements Associative
    "float?":
      name: "float?"
      doc: >
        Returns true if n is a floating point number
    "drop-last":
      name: "drop-last"
      doc: >
        Return a lazy sequence of all but the last n (default 1) items in coll
    "replace":
      name: "replace"
      doc: >
        Given a map of replacement pairs and a vector/collection, returns a
          vector/seq with any elements = a key in smap replaced with the
          corresponding val in smap
    "decimal?":
      name: "decimal?"
      doc: >
        Returns true if n is a BigDecimal
    "defn":
      name: "defn"
      doc: >
        Same as (def name (fn [params* ] exprs*)) or (def
            name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
            to the var metadata. prepost-map defines a map with optional keys
            :pre and :post that contain collections of pre or post conditions.
    "parents":
      name: "parents"
      doc: >
        Returns the immediate parents of tag, either via a Java type
          inheritance relationship or a relationship established via derive. h
          must be a hierarchy obtained from make-hierarchy, if not supplied
          defaults to the global hierarchy
    "map?":
      name: "map?"
      doc: >
        Return true if x implements IPersistentMap
    "prefers":
      name: "prefers"
      doc: >
        Given a multimethod, returns a map of preferred value -> set of other values
    "numerator":
      name: "numerator"
      doc: >
        Returns the numerator part of a Ratio.
    "condp":
      name: "condp"
      doc: >
        Takes a binary predicate, an expression, and a set of clauses.
          Each clause can take the form of either:
        
          test-expr result-expr
        
          test-expr :>> result-fn
        
          Note :>> is an ordinary keyword.
        
          For each clause, (pred test-expr expr) is evaluated. If it returns
          logical true, the clause is a match. If a binary clause matches, the
          result-expr is returned, if a ternary clause matches, its result-fn,
          which must be a unary function, is called with the result of the
          predicate as its argument, the result of that call being the return
          value of condp. A single default expression can follow the clauses,
          and its value will be returned if no clause matches. If no default
          expression is provided and no clause matches, an
          IllegalArgumentException is thrown.
    "quot":
      name: "quot"
      doc: >
        quot[ient] of dividing numerator by denominator.
    "chunk-rest":
      name: "chunk-rest"
    "unchecked-negate-int":
      name: "unchecked-negate-int"
      doc: >
        Returns the negation of x, an int.
          Note - uses a primitive operator subject to overflow.
    "file-seq":
      name: "file-seq"
      doc: >
        A tree seq on java.io.Files
    "send":
      name: "send"
      doc: >
        Dispatch an action to an agent. Returns the agent immediately.
          Subsequently, in a thread from a thread pool, the state of the agent
          will be set to the value of:
        
          (apply action-fn state-of-agent args)
    "with-local-vars":
      name: "with-local-vars"
      doc: >
        varbinding=> symbol init-expr
        
          Executes the exprs in a context in which the symbols are bound to
          vars with per-thread bindings to the init-exprs.  The symbols refer
          to the var objects themselves, and must be accessed with var-get and
          var-set
    "reverse":
      name: "reverse"
      doc: >
        Returns a seq of the items in coll in reverse order. Not lazy.
    "with-bindings":
      name: "with-bindings"
      doc: >
        Takes a map of Var/value pairs. Installs for the given Vars the associated
          values as thread-local bindings. The executes body. Pops the installed
          bindings after body was evaluated. Returns the value of body.
    "count":
      name: "count"
      doc: >
        Returns the number of items in the collection. (count nil) returns
          0.  Also works on strings, arrays, and Java Collections and Maps
    "get-proxy-class":
      name: "get-proxy-class"
      doc: >
        Takes an optional single class followed by zero or more
          interfaces. If not supplied class defaults to Object.  Creates an
          returns an instance of a proxy class derived from the supplied
          classes. The resulting value is cached and used for any subsequent
          requests for the same class set. Returns a Class object.
    "set":
      name: "set"
      doc: >
        Returns a set of the distinct elements of coll.
    "ex-info":
      name: "ex-info"
      doc: >
        Alpha - subject to change.
           Create an instance of ExceptionInfo, a RuntimeException subclass
           that carries a map of additional data.
    "unchecked-subtract-int":
      name: "unchecked-subtract-int"
      doc: >
        Returns the difference of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "when-let":
      name: "when-let"
      doc: >
        bindings => binding-form test
        
          When test is true, evaluates body with binding-form bound to the value of test
    "comp":
      name: "comp"
      doc: >
        Takes a set of functions and returns a fn that is the composition
          of those fns.  The returned fn takes a variable number of args,
          applies the rightmost of fns to the args, the next
          fn (right-to-left) to the result, etc.
    "nth":
      name: "nth"
      doc: >
        Returns the value at the index. get returns nil if index out of
          bounds, nth throws an exception unless not-found is supplied.  nth
          also works for strings, Java arrays, regex Matchers and Lists, and,
          in O(n) time, for sequences.
    "byte":
      name: "byte"
      doc: >
        Coerce to byte
    "dissoc!":
      name: "dissoc!"
      doc: >
        Alpha - subject to change.
          Returns a transient map that doesn't contain a mapping for key(s).
    "*err*":
      name: "*err*"
      doc: >
        A java.io.Writer object representing standard error for print operations.
        
          Defaults to System/err, wrapped in a PrintWriter
    "constantly":
      name: "constantly"
      doc: >
        Returns a function that takes any number of arguments and returns x.
    "load":
      name: "load"
      doc: >
        Loads Clojure code from resources in classpath. A path is interpreted as
          classpath-relative if it begins with a slash or relative to the root
          directory for the current namespace otherwise.
    "namespace":
      name: "namespace"
      doc: >
        Returns the namespace String of a symbol or keyword, or nil if not present.
    "pr-str":
      name: "pr-str"
      doc: >
        pr to a string, returning it
    "<":
      name: "<"
      doc: >
        Returns non-nil if nums are in monotonically increasing order,
          otherwise false.
    "rationalize":
      name: "rationalize"
      doc: >
        returns the rational value of num
    "sort-by":
      name: "sort-by"
      doc: >
        Returns a sorted sequence of the items in coll, where the sort
          order is determined by comparing (keyfn item).  If no comparator is
          supplied, uses compare.  comparator must implement
          java.util.Comparator.  If coll is a Java array, it will be modified.
          To avoid this, sort a copy of the array.
    "->VecSeq":
      name: "->VecSeq"
      doc: >
        Positional factory function for class clojure.core.VecSeq.
    "cycle":
      name: "cycle"
      doc: >
        Returns a lazy (infinite!) sequence of repetitions of the items in coll.
    "peek":
      name: "peek"
      doc: >
        For a list or queue, same as first, for a vector, same as, but much
          more efficient than, last. If the collection is empty, returns nil.
    "denominator":
      name: "denominator"
      doc: >
        Returns the denominator part of a Ratio.
    "reduce":
      name: "reduce"
      doc: >
        f should be a function of 2 arguments. If val is not supplied,
          returns the result of applying f to the first 2 items in coll, then
          applying f to that result and the 3rd item, etc. If coll contains no
          items, f must accept no arguments as well, and reduce returns the
          result of calling f with no arguments.  If coll has only 1 item, it
          is returned and f is not called.  If val is supplied, returns the
          result of applying f to val and the first item in coll, then
          applying f to that result and the 2nd item, etc. If coll contains no
          items, returns val and f is not called.
    "interleave":
      name: "interleave"
      doc: >
        Returns a lazy seq of the first item in each coll, then the second etc.
    "amap":
      name: "amap"
      doc: >
        Maps an expression across an array a, using an index named idx, and
          return value named ret, initialized to a clone of a, then setting 
          each element of ret to the evaluation of expr, returning the new 
          array ret.
    "->":
      name: "->"
      doc: >
        Threads the expr through the forms. Inserts x as the
          second item in the first form, making a list of it if it is not a
          list already. If there are more forms, inserts the first form as the
          second item in second form, etc.
    "cons":
      name: "cons"
      doc: >
        Returns a new seq where x is the first element and seq is
            the rest.
    "macroexpand":
      name: "macroexpand"
      doc: >
        Repeatedly calls macroexpand-1 on form until it no longer
          represents a macro form, then returns it.  Note neither
          macroexpand-1 nor macroexpand expand macros in subforms.
    "var-set":
      name: "var-set"
      doc: >
        Sets the value in the var object to val. The var must be
         thread-locally bound.
    "str":
      name: "str"
      doc: >
        With no args, returns the empty string. With one arg x, returns
          x.toString().  (str nil) returns the empty string. With more than
          one arg, returns the concatenation of the str values of the args.
    "aset-boolean":
      name: "aset-boolean"
      doc: >
        Sets the value at the index/indices. Works on arrays of boolean. Returns val.
    "ns-imports":
      name: "ns-imports"
      doc: >
        Returns a map of the import mappings for the namespace.
    "while":
      name: "while"
      doc: >
        Repeatedly executes body while test expression is true. Presumes
          some side-effect will cause test to become false/nil. Returns nil
    "remove-all-methods":
      name: "remove-all-methods"
      doc: >
        Removes all of the methods of multimethod.
    "first":
      name: "first"
      doc: >
        Returns the first item in the collection. Calls seq on its
            argument. If coll is nil, returns nil.
    "bean":
      name: "bean"
      doc: >
        Takes a Java object and returns a read-only implementation of the
          map abstraction based upon its JavaBean properties.
    "=":
      name: "="
      doc: >
        Equality. Returns true if x equals y, false if not. Same as
          Java x.equals(y) except it also works for nil, and compares
          numbers and collections in a type-independent manner.  Clojure's immutable data
          structures define equals() (and thus =) as a value, not an identity,
          comparison.
    "memoize":
      name: "memoize"
      doc: >
        Returns a memoized version of a referentially transparent function. The
          memoized version of the function keeps a cache of the mapping from arguments
          to results and, when calls with the same arguments are repeated often, has
          higher performance at the expense of higher memory use.
    "var-get":
      name: "var-get"
      doc: >
        Gets the value in the var object
    "unchecked-float":
      name: "unchecked-float"
      doc: >
        Coerce to float. Subject to rounding.
    "range":
      name: "range"
      doc: >
        Returns a lazy seq of nums from start (inclusive) to end
          (exclusive), by step, where start defaults to 0, step to 1, and end
          to infinity.
    "tree-seq":
      name: "tree-seq"
      doc: >
        Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
           branch? must be a fn of one arg that returns true if passed a node
           that can have children (but may not).  children must be a fn of one
           arg that returns a sequence of the children. Will only be called on
           nodes for which branch? returns true. Root is the root node of the
          tree.
    "defmacro":
      name: "defmacro"
      doc: >
        Like defn, but the resulting function name is declared as a
          macro and will be used as a macro by the compiler when it is
          called.
    "set-validator!":
      name: "set-validator!"
      doc: >
        Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a
          side-effect-free fn of one argument, which will be passed the intended
          new state on any state change. If the new state is unacceptable, the
          validator-fn should return false or throw an exception. If the current state (root
          value if var) is not acceptable to the new validator, an exception
          will be thrown and the validator will not be changed.
    "aset-double":
      name: "aset-double"
      doc: >
        Sets the value at the index/indices. Works on arrays of double. Returns val.
    "*'":
      name: "*'"
      doc: >
        Returns the product of nums. (*) returns 1. Supports arbitrary precision.
          See also: *
    "case":
      name: "case"
      doc: >
        Takes an expression, and a set of clauses.
        
          Each clause can take the form of either:
        
          test-constant result-expr
        
          (test-constant1 ... test-constantN)  result-expr
        
          The test-constants are not evaluated. They must be compile-time
          literals, and need not be quoted.  If the expression is equal to a
          test-constant, the corresponding result-expr is returned. A single
          default expression can follow the clauses, and its value will be
          returned if no clause matches. If no default expression is provided
          and no clause matches, an IllegalArgumentException is thrown.
        
          Unlike cond and condp, case does a constant-time dispatch, the
          clauses are not considered sequentially.  All manner of constant
          expressions are acceptable in case, including numbers, strings,
          symbols, keywords, and (Clojure) composites thereof. Note that since
          lists are used to group multiple constants that map to the same
          expression, a vector can be used to match a list if needed. The
          test-constants need not be all of the same type.
    "unchecked-divide-int":
      name: "unchecked-divide-int"
      doc: >
        Returns the division of x by y, both int.
          Note - uses a primitive operator subject to truncation.
    "enumeration-seq":
      name: "enumeration-seq"
      doc: >
        Returns a seq on a java.util.Enumeration
    "prefer-method":
      name: "prefer-method"
      doc: >
        Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y 
           when there is a conflict
    "partition-all":
      name: "partition-all"
      doc: >
        Returns a lazy sequence of lists like partition, but may include
          partitions with fewer than n items at the end.
    "ensure":
      name: "ensure"
      doc: >
        Must be called in a transaction. Protects the ref from modification
          by other transactions.  Returns the in-transaction-value of
          ref. Allows for more concurrency than (ref-set ref @ref)
    "reduced":
      name: "reduced"
      doc: >
        Wraps x in a way such that a reduce will terminate with the value x
    "find-ns":
      name: "find-ns"
      doc: >
        Returns the namespace named by the symbol or nil if it doesn't exist.
    "not-every?":
      name: "not-every?"
      doc: >
        Returns false if (pred x) is logical true for every x in
          coll, else true.
    "struct-map":
      name: "struct-map"
      doc: >
        Returns a new structmap instance with the keys of the
          structure-basis. keyvals may contain all, some or none of the basis
          keys - where values are not supplied they will default to nil.
          keyvals can also contain keys not in the basis.
    ">":
      name: ">"
      doc: >
        Returns non-nil if nums are in monotonically decreasing order,
          otherwise false.
    "max":
      name: "max"
      doc: >
        Returns the greatest of the nums.
    "proxy-mappings":
      name: "proxy-mappings"
      doc: >
        Takes a proxy instance and returns the proxy's fn map.
    "identity":
      name: "identity"
      doc: >
        Returns its argument.
    "ints":
      name: "ints"
      doc: >
        Casts to int[]
    "fnext":
      name: "fnext"
      doc: >
        Same as (first (next x))
    "biginteger":
      name: "biginteger"
      doc: >
        Coerce to BigInteger
    "min-key":
      name: "min-key"
      doc: >
        Returns the x for which (k x), a number, is least.
    "reset-meta!":
      name: "reset-meta!"
      doc: >
        Atomically resets the metadata for a namespace/var/ref/agent/atom
    "push-thread-bindings":
      name: "push-thread-bindings"
      doc: >
        WARNING: This is a low-level function. Prefer high-level macros like
          binding where ever possible.
        
          Takes a map of Var/value pairs. Binds each Var to the associated value for
          the current thread. Each call *MUST* be accompanied by a matching call to
          pop-thread-bindings wrapped in a try-finally!
          
              (push-thread-bindings bindings)
              (try
                ...
                (finally
                  (pop-thread-bindings)))
    "unchecked-add-int":
      name: "unchecked-add-int"
      doc: >
        Returns the sum of x and y, both int.
          Note - uses a primitive operator subject to overflow.
    "subs":
      name: "subs"
      doc: >
        Returns the substring of s beginning at start inclusive, and ending
          at end (defaults to length of string), exclusive.
    "compile":
      name: "compile"
      doc: >
        Compiles the namespace named by the symbol lib into a set of
          classfiles. The source for the lib must be in a proper
          classpath-relative directory. The output files will go into the
          directory specified by *compile-path*, and that directory too must
          be in the classpath.
    "agent-errors":
      name: "agent-errors"
      doc: >
        DEPRECATED: Use 'agent-error' instead.
          Returns a sequence of the exceptions thrown during asynchronous
          actions of the agent.
    "clear-agent-errors":
      name: "clear-agent-errors"
      doc: >
        DEPRECATED: Use 'restart-agent' instead.
          Clears any exceptions thrown during asynchronous actions of the
          agent, allowing subsequent actions to occur.
    "printf":
      name: "printf"
      doc: >
        Prints formatted output, as per format
    "ns-resolve":
      name: "ns-resolve"
      doc: >
        Returns the var or Class to which a symbol will be resolved in the
          namespace (unless found in the environment), else nil.  Note that
          if the symbol is fully qualified, the var/Class to which it resolves
          need not be present in the namespace.
    "method-sig":
      name: "method-sig"
    "*default-data-reader-fn*":
      name: "*default-data-reader-fn*"
      doc: >
        When no data reader is found for a tag and *default-data-reader-fn*
          is non-nil, it will be called with two arguments,
          the tag and the value.  If *default-data-reader-fn* is nil (the
          default), an exception will be thrown for the unknown tag.
    ">=":
      name: ">="
      doc: >
        Returns non-nil if nums are in monotonically non-increasing order,
          otherwise false.
    "shutdown-agents":
      name: "shutdown-agents"
      doc: >
        Initiates a shutdown of the thread pools that back the agent
          system. Running actions will complete, but no new actions will be
          accepted
    "reduce-kv":
      name: "reduce-kv"
      doc: >
        Reduces an associative collection. f should be a function of 3
          arguments. Returns the result of applying f to init, the first key
          and the first value in coll, then applying f to that result and the
          2nd key and value, etc. If coll contains no entries, returns init
          and f is not called. Note that reduce-kv is supported on vectors,
          where the keys will be the ordinals.
    "reset!":
      name: "reset!"
      doc: >
        Sets the value of atom to newval without regard for the
          current value. Returns newval.
    "even?":
      name: "even?"
      doc: >
        Returns true if n is even, throws an exception if n is not an integer
    "require":
      name: "require"
      doc: >
        Loads libs, skipping any that are already loaded. Each argument is
          either a libspec that identifies a lib, a prefix list that identifies
          multiple libs whose names share a common prefix, or a flag that modifies
          how all the identified libs are loaded. Use :require in the ns macro
          in preference to calling this directly.
        
          Libs
        
          A 'lib' is a named set of resources in classpath whose contents define a
          library of Clojure code. Lib names are symbols and each lib is associated
          with a Clojure namespace and a Java package that share its name. A lib's
          name also locates its root directory within classpath using Java's
          package name to classpath-relative path mapping. All resources in a lib
          should be contained in the directory structure under its root directory.
          All definitions a lib makes should be in its associated namespace.
        
          'require loads a lib by loading its root resource. The root resource path
          is derived from the lib name in the following manner:
          Consider a lib named by the symbol 'x.y.z; it has the root directory
          <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root
          resource should contain code to create the lib's namespace (usually by using
          the ns macro) and load any additional lib resources.
        
          Libspecs
        
          A libspec is a lib name or a vector containing a lib name followed by
          options expressed as sequential keywords and arguments.
        
          Recognized options:
          :as takes a symbol as its argument and makes that symbol an alias to the
            lib's namespace in the current namespace.
          :refer takes a list of symbols to refer from the namespace or the :all
            keyword to bring in all public vars.
        
          Prefix Lists
        
          It's common for Clojure code to depend on several libs whose names have
          the same prefix. When specifying libs, prefix lists can be used to reduce
          repetition. A prefix list contains the shared prefix followed by libspecs
          with the shared prefix removed from the lib names. After removing the
          prefix, the names that remain must not contain any periods.
        
          Flags
        
          A flag is a keyword.
          Recognized flags: :reload, :reload-all, :verbose
          :reload forces loading of all the identified libs even if they are
            already loaded
          :reload-all implies :reload and also forces loading of all libs that the
            identified libs directly or indirectly load via require or use
          :verbose triggers printing information about each load, alias, and refer
        
          Example:
        
          The following would load the libraries clojure.zip and clojure.set
          abbreviated as 's'.
        
          (require '(clojure zip [set :as s]))
    "bit-shift-left":
      name: "bit-shift-left"
      doc: >
        Bitwise shift left
    "dec'":
      name: "dec'"
      doc: >
        Returns a number one less than num. Supports arbitrary precision.
          See also: dec
    "methods":
      name: "methods"
      doc: >
        Given a multimethod, returns a map of dispatch values -> dispatch fns
    "future-cancelled?":
      name: "future-cancelled?"
      doc: >
        Returns true if future f is cancelled
    "compare":
      name: "compare"
      doc: >
        Comparator. Returns a negative number, zero, or a positive number
          when x is logically 'less than', 'equal to', or 'greater than'
          y. Same as Java x.compareTo(y) except it also works for nil, and
          compares numbers and collections in a type-independent manner. x
          must implement Comparable
    "deftype":
      name: "deftype"
      doc: >
        Alpha - subject to change
          
          (deftype name [fields*]  options* specs*)
          
          Currently there are no options.
        
          Each spec consists of a protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args*] body)*
        
          Dynamically generates compiled bytecode for class with the given
          name, in a package with the same name as the current namespace, the
          given fields, and, optionally, methods for protocols and/or
          interfaces. 
        
          The class will have the (by default, immutable) fields named by
          fields, which can have type hints. Protocols/interfaces and methods
          are optional. The only methods that can be supplied are those
          declared in the protocols/interfaces.  Note that method bodies are
          not closures, the local environment includes only the named fields,
          and those fields can be accessed directy. Fields can be qualified
          with the metadata :volatile-mutable true or :unsynchronized-mutable
          true, at which point (set! afield aval) will be supported in method
          bodies. Note well that mutable fields are extremely difficult to use
          correctly, and are present only to facilitate the building of higher
          level constructs, such as Clojure's reference types, in Clojure
          itself. They are for experts only - if the semantics and
          implications of :volatile-mutable or :unsynchronized-mutable are not
          immediately apparent to you, you should not be using them.
        
          Method definitions take the form:
        
          (methodname [args*] body)
        
          The argument and return types can be hinted on the arg and
          methodname symbols. If not supplied, they will be inferred, so type
          hints should be reserved for disambiguation.
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that a parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations. Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          In the method bodies, the (unqualified) name can be used to name the
          class (for calls to new, instance? etc).
        
          When AOT compiling, generates compiled bytecode for a class with the
          given name (a symbol), prepends the current ns as the package, and
          writes the .class file to the *compile-path* directory.
        
          One constructor will be defined, taking the designated fields.  Note
          that the field names __meta and __extmap are currently reserved and
          should not be used when defining your own types.
        
          Given (deftype TypeName ...), a factory function called ->TypeName
          will be defined, taking positional parameters for the fields
    "sorted-set-by":
      name: "sorted-set-by"
      doc: >
        Returns a new sorted set with supplied keys, using the supplied
          comparator.  Any equal keys are handled as if by repeated uses of
          conj.
    "cast":
      name: "cast"
      doc: >
        Throws a ClassCastException if x is not a c, else returns x.
    "namespace-munge":
      name: "namespace-munge"
      doc: >
        Convert a Clojure namespace name to a legal Java package name.
    "supers":
      name: "supers"
      doc: >
        Returns the immediate and indirect superclasses and interfaces of c, if any
    "pcalls":
      name: "pcalls"
      doc: >
        Executes the no-arg fns in parallel, returning a lazy sequence of
          their values
    "load-string":
      name: "load-string"
      doc: >
        Sequentially read and evaluate the set of forms contained in the
          string
    "group-by":
      name: "group-by"
      doc: >
        Returns a map of the elements of coll keyed by the result of
          f on each element. The value at each key will be a vector of the
          corresponding elements, in the order they appeared in coll.
    "get":
      name: "get"
      doc: >
        Returns the value mapped to key, not-found or nil if key not present.
    "<=":
      name: "<="
      doc: >
        Returns non-nil if nums are in monotonically non-decreasing order,
          otherwise false.
    "await":
      name: "await"
      doc: >
        Blocks the current thread (indefinitely!) until all actions
          dispatched thus far, from this thread or agent, to the agent(s) have
          occurred.  Will block on failed agents.  Will never return if
          a failed agent is restarted with :clear-actions true.
    "resolve":
      name: "resolve"
      doc: >
        same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)
    "bytes":
      name: "bytes"
      doc: >
        Casts to bytes[]
    "print-method":
      name: "print-method"
    "bound?":
      name: "bound?"
      doc: >
        Returns true if all of the vars provided as arguments have any bound value, root or thread-local.
           Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.
    "loaded-libs":
      name: "loaded-libs"
      doc: >
        Returns a sorted set of symbols naming the currently loaded libs
    "fnil":
      name: "fnil"
      doc: >
        Takes a function f, and returns a function that calls f, replacing
          a nil first argument to f with the supplied value x. Higher arity
          versions can replace arguments in the second and third
          positions (y, z). Note that the function f can take any number of
          arguments, not just the one(s) being nil-patched.
    "force":
      name: "force"
      doc: >
        If x is a Delay, returns the (possibly cached) value of its expression, else returns x
    "partial":
      name: "partial"
      doc: >
        Takes a function f and fewer than the normal arguments to f, and
          returns a fn that takes a variable number of additional args. When
          called, the returned function calls f with args + additional args.
    "pmap":
      name: "pmap"
      doc: >
        Like map, except f is applied in parallel. Semi-lazy in that the
          parallel computation stays ahead of the consumption, but doesn't
          realize the entire result unless required. Only useful for
          computationally intensive functions where the time of f dominates
          the coordination overhead.
    "if-let":
      name: "if-let"
      doc: >
        bindings => binding-form test
        
          If test is true, evaluates then with binding-form bound to the value of 
          test, if not, yields else
    "comparator":
      name: "comparator"
      doc: >
        Returns an implementation of java.util.Comparator based upon pred.
    "pos?":
      name: "pos?"
      doc: >
        Returns true if num is greater than zero, else false
    "char":
      name: "char"
      doc: >
        Coerce to char
    "take-while":
      name: "take-while"
      doc: >
        Returns a lazy sequence of successive items from coll while
          (pred item) returns true. pred must be free of side-effects.
    "extend-protocol":
      name: "extend-protocol"
      doc: >
        Useful when you want to provide several implementations of the same
          protocol all at once. Takes a single protocol and the implementation
          of that protocol for one or more types. Expands into calls to
          extend-type:
        
          (extend-protocol Protocol
            AType
              (foo [x] ...)
              (bar [x y] ...)
            BType
              (foo [x] ...)
              (bar [x y] ...)
            AClass
              (foo [x] ...)
              (bar [x y] ...)
            nil
              (foo [x] ...)
              (bar [x y] ...))
        
          expands into:
        
          (do
           (clojure.core/extend-type AType Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type BType Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type AClass Protocol 
             (foo [x] ...) 
             (bar [x y] ...))
           (clojure.core/extend-type nil Protocol 
             (foo [x] ...) 
             (bar [x y] ...)))
    "and":
      name: "and"
      doc: >
        Evaluates exprs one at a time, from left to right. If a form
          returns logical false (nil or false), and returns that value and
          doesn't evaluate any of the other expressions, otherwise it returns
          the value of the last expr. (and) returns true.
    "refer":
      name: "refer"
      doc: >
        refers to all public vars of ns, subject to filters.
          filters can include at most one each of:
        
          :exclude list-of-symbols
          :only list-of-symbols
          :rename map-of-fromsymbol-tosymbol
        
          For each public interned var in the namespace named by the symbol,
          adds a mapping from the name of the var to the var to the current
          namespace.  Throws an exception if name is already mapped to
          something else in the current namespace. Filters can be used to
          select a subset, via inclusion or exclusion, or to provide a mapping
          to a symbol different from the var's name, in order to prevent
          clashes. Use :use in the ns macro in preference to calling this directly.
    "underive":
      name: "underive"
      doc: >
        Removes a parent/child relationship between parent and
          tag. h must be a hierarchy obtained from make-hierarchy, if not
          supplied defaults to, and modifies, the global hierarchy.
    "in-ns":
      name: "in-ns"
      doc: >
        Sets *ns* to the namespace named by the symbol, creating it if needed.
    "iterator-seq":
      name: "iterator-seq"
      doc: >
        Returns a seq on a java.util.Iterator. Note that most collections
          providing iterators implement Iterable and thus support seq directly.
    "declare":
      name: "declare"
      doc: >
        defs the supplied var names with no bindings, useful for making forward declarations.
    "ancestors":
      name: "ancestors"
      doc: >
        Returns the immediate and indirect parents of tag, either via a Java type
          inheritance relationship or a relationship established via derive. h
          must be a hierarchy obtained from make-hierarchy, if not supplied
          defaults to the global hierarchy
    "hash-combine":
      name: "hash-combine"
    "persistent!":
      name: "persistent!"
      doc: >
        Alpha - subject to change.
          Returns a new, persistent version of the transient collection, in
          constant time. The transient collection cannot be used after this
          call, any such use will throw an exception.
    "locking":
      name: "locking"
      doc: >
        Executes exprs in an implicit do, while holding the monitor of x.
          Will release the monitor of x in all circumstances.
    "partition":
      name: "partition"
      doc: >
        Returns a lazy sequence of lists of n items each, at offsets step
          apart. If step is not supplied, defaults to n, i.e. the partitions
          do not overlap. If a pad collection is supplied, use its elements as
          necessary to complete last partition upto n items. In case there are
          not enough padding elements, return a partition with less than n items.
    "map-indexed":
      name: "map-indexed"
      doc: >
        Returns a lazy sequence consisting of the result of applying f to 0
          and the first item of coll, followed by applying f to 1 and the second
          item in coll, etc, until coll is exhausted. Thus function f should
          accept 2 arguments, index and item.
    "contains?":
      name: "contains?"
      doc: >
        Returns true if key is present in the given collection, otherwise
          returns false.  Note that for numerically indexed collections like
          vectors and Java arrays, this tests if the numeric key is within the
          range of indexes. 'contains?' operates constant or logarithmic time;
          it will not perform a linear search for a value.  See also 'some'.
    "update-proxy":
      name: "update-proxy"
      doc: >
        Takes a proxy instance and a map of strings (which must
          correspond to methods of the proxy superclass/superinterfaces) to
          fns (which must take arguments matching the corresponding method,
          plus an additional (explicit) first arg corresponding to this, and
          updates (via assoc) the proxy's fn map. nil can be passed instead of
          a fn, in which case the corresponding method will revert to the
          default behavior. Note that this function can be used to update the
          behavior of an existing instance without changing its identity.
          Returns the proxy.
    "interpose":
      name: "interpose"
      doc: >
        Returns a lazy seq of the elements of coll separated by sep
    "chunk":
      name: "chunk"
    "aset-int":
      name: "aset-int"
      doc: >
        Sets the value at the index/indices. Works on arrays of int. Returns val.
    "ifn?":
      name: "ifn?"
      doc: >
        Returns true if x implements IFn. Note that many data structures
          (e.g. sets and maps) implement IFn
    "definterface":
      name: "definterface"
      doc: >
        Creates a new Java interface with the given name and method sigs.
          The method return types and parameter types may be specified with type hints,
          defaulting to Object if omitted.
        
          (definterface MyInterface
            (^int method1 [x])
            (^Bar method2 [^Baz b ^Quux q]))
    "load-file":
      name: "load-file"
      doc: >
        Sequentially read and evaluate the set of forms contained in the file.
    "delay":
      name: "delay"
      doc: >
        Takes a body of expressions and yields a Delay object that will
          invoke the body only the first time it is forced (with force or deref/@), and
          will cache the result and return it on all subsequent force
          calls. See also - realized?
    "apply":
      name: "apply"
      doc: >
        Applies fn f to the argument list formed by prepending intervening arguments to args.
    "swap!":
      name: "swap!"
      doc: >
        Atomically swaps the value of atom to be:
          (apply f current-value-of-atom args). Note that f may be called
          multiple times, and thus should be free of side effects.  Returns
          the value that was swapped in.
    "defmulti":
      name: "defmulti"
      doc: >
        Creates a new multimethod with the associated dispatch function.
          The docstring and attribute-map are optional.
        
          Options are key-value pairs and may be one of:
            :default    the default dispatch value, defaults to :default
            :hierarchy  the isa? hierarchy to use for dispatching
                        defaults to the global hierarchy
    "proxy":
      name: "proxy"
      doc: >
        class-and-interfaces - a vector of class names
        
          args - a (possibly empty) vector of arguments to the superclass
          constructor.
        
          f => (name [params*] body) or
          (name ([params*] body) ([params+] body) ...)
        
          Expands to code which creates a instance of a proxy class that
          implements the named class/interface(s) by calling the supplied
          fns. A single class, if provided, must be first. If not provided it
          defaults to Object.
        
          The interfaces names must be valid interface types. If a method fn
          is not provided for a class method, the superclass methd will be
          called. If a method fn is not provided for an interface method, an
          UnsupportedOperationException will be thrown should it be
          called. Method fns are closures and can capture the environment in
          which proxy is called. Each method fn takes an additional implicit
          first arg, which is bound to 'this. Note that while method fns can
          be provided to override protected methods, they have no other access
          to protected members, nor to super, as these capabilities cannot be
          proxied.
    "reify":
      name: "reify"
      doc: >
        reify is a macro with the following structure:
        
         (reify options* specs*)
          
          Currently there are no options.
        
          Each spec consists of the protocol or interface name followed by zero
          or more method bodies:
        
          protocol-or-interface-or-Object
          (methodName [args+] body)*
        
          Methods should be supplied for all methods of the desired
          protocol(s) and interface(s). You can also define overrides for
          methods of Object. Note that the first parameter must be supplied to
          correspond to the target object ('this' in Java parlance). Thus
          methods for interfaces will take one more argument than do the
          interface declarations.  Note also that recur calls to the method
          head should *not* pass the target object, it will be supplied
          automatically and can not be substituted.
        
          The return type can be indicated by a type hint on the method name,
          and arg types can be indicated by a type hint on arg names. If you
          leave out all hints, reify will try to match on same name/arity
          method in the protocol(s)/interface(s) - this is preferred. If you
          supply any hints at all, no inference is done, so all hints (or
          default of Object) must be correct, for both arguments and return
          type. If a method is overloaded in a protocol/interface, multiple
          independent method definitions must be supplied.  If overloaded with
          same arity in an interface you must specify complete hints to
          disambiguate - a missing hint implies Object.
        
          recur works to method heads The method bodies of reify are lexical
          closures, and can refer to the surrounding local scope:
          
          (str (let [f "foo"] 
               (reify Object 
                 (toString [this] f))))
          == "foo"
        
          (seq (let [f "foo"] 
               (reify clojure.lang.Seqable 
                 (seq [this] (seq f)))))
          == (\f \o \o))
          
          reify always implements clojure.lang.IObj and transfers meta
          data of the form to the created object.
          
          (meta ^{:k :v} (reify Object (toString [this] "foo")))
          == {:k :v}
    "subvec":
      name: "subvec"
      doc: >
        Returns a persistent vector of the items in vector from
          start (inclusive) to end (exclusive).  If end is not supplied,
          defaults to (count vector). This operation is O(1) and very fast, as
          the resulting vector shares structure with the original and no
          trimming is done.
    "byte-array":
      name: "byte-array"
      doc: >
        Creates an array of bytes
    "rest":
      name: "rest"
      doc: >
        Returns a possibly empty seq of the items after the first. Calls seq on its
          argument.
    "keyword":
      name: "keyword"
      doc: >
        Returns a Keyword with the given namespace and name.  Do not use :
          in the keyword strings, it will be added automatically.
    "ns-map":
      name: "ns-map"
      doc: >
        Returns a map of all the mappings for the namespace.
    "set-error-mode!":
      name: "set-error-mode!"
      doc: >
        Sets the error-mode of agent a to mode-keyword, which must be
          either :fail or :continue.  If an action being run by the agent
          throws an exception or doesn't pass the validator fn, an
          error-handler may be called (see set-error-handler!), after which,
          if the mode is :continue, the agent will continue as if neither the
          action that caused the error nor the error itself ever happened.
          
          If the mode is :fail, the agent will become failed and will stop
          accepting new 'send' and 'send-off' actions, and any previously
          queued actions will be held until a 'restart-agent'.  Deref will
          still work, returning the state of the agent before the error.
    "unquote":
      name: "unquote"
    "int":
      name: "int"
      doc: >
        Coerce to int
    "release-pending-sends":
      name: "release-pending-sends"
      doc: >
        Normally, actions sent directly or indirectly during another action
          are held until the action completes (changes the agent's
          state). This function can be used to dispatch any pending sent
          actions immediately. This has no impact on actions sent during a
          transaction, which are still held until commit. If no action is
          occurring, does nothing. Returns the number of actions dispatched.
    "mod":
      name: "mod"
      doc: >
        Modulus of num and div. Truncates toward negative infinity.
    "bigdec":
      name: "bigdec"
      doc: >
        Coerce to BigDecimal
    "nfirst":
      name: "nfirst"
      doc: >
        Same as (next (first x))
    "nthnext":
      name: "nthnext"
      doc: >
        Returns the nth next of coll, (seq coll) when n is 0.
    "*agent*":
      name: "*agent*"
      doc: >
        The agent currently running an action on this thread, else nil
    "aset-long":
      name: "aset-long"
      doc: >
        Sets the value at the index/indices. Works on arrays of long. Returns val.
    "struct":
      name: "struct"
      doc: >
        Returns a new structmap instance with the keys of the
          structure-basis. vals must be supplied for basis keys in order -
          where values are not supplied they will default to nil.
    "array-map":
      name: "array-map"
      doc: >
        Constructs an array-map. If any keys are equal, they are handled as
          if by repeated uses of assoc.
    "unchecked-char":
      name: "unchecked-char"
      doc: >
        Coerce to char. Subject to rounding or truncation.
    "bigint":
      name: "bigint"
      doc: >
        Coerce to BigInt
    "dec":
      name: "dec"
      doc: >
        Returns a number one less than num. Does not auto-promote
          longs, will throw on overflow. See also: dec'
    "println":
      name: "println"
      doc: >
        Same as print followed by (newline)
    "aget":
      name: "aget"
      doc: >
        Returns the value at the index/indices. Works on Java arrays of all
          types.
    "find-keyword":
      name: "find-keyword"
      doc: >
        Returns a Keyword with the given namespace and name if one already
          exists.  This function will not intern a new keyword. If the keyword
          has not already been interned, it will return nil.  Do not use :
          in the keyword strings, it will be added automatically.
    "pr":
      name: "pr"
      doc: >
        Prints the object(s) to the output stream that is the current value
          of *out*.  Prints the object(s), separated by spaces if there is
          more than one.  By default, pr and prn print in a way that objects
          can be read by the reader
    "drop":
      name: "drop"
      doc: >
        Returns a lazy sequence of all but the first n items in coll.
    "clojure-version":
      name: "clojure-version"
      doc: >
        Returns clojure version as a printable string.
    "*print-dup*":
      name: "*print-dup*"
      doc: >
        When set to logical true, objects will be printed in a way that preserves
          their type when read in later.
        
          Defaults to false.
    "gen-class":
      name: "gen-class"
      doc: >
        When compiling, generates compiled bytecode for a class with the
          given package-qualified :name (which, as all names in these
          parameters, can be a string or symbol), and writes the .class file
          to the *compile-path* directory.  When not compiling, does
          nothing. The gen-class construct contains no implementation, as the
          implementation will be dynamically sought by the generated class in
          functions in an implementing Clojure namespace. Given a generated
          class org.mydomain.MyClass with a method named mymethod, gen-class
          will generate an implementation that looks for a function named by 
          (str prefix mymethod) (default prefix: "-") in a
          Clojure namespace specified by :impl-ns
          (defaults to the current namespace). All inherited methods,
          generated methods, and init and main functions (see :methods, :init,
          and :main below) will be found similarly prefixed. By default, the
          static initializer for the generated class will attempt to load the
          Clojure support code for the class as a resource from the classpath,
          e.g. in the example case, ``org/mydomain/MyClass__init.class``. This
          behavior can be controlled by :load-impl-ns
        
          Note that methods with a maximum of 18 parameters are supported.
        
          In all subsequent sections taking types, the primitive types can be
          referred to by their Java names (int, float etc), and classes in the
          java.lang package can be used without a package qualifier. All other
          classes must be fully qualified.
        
          Options should be a set of key/value pairs, all except for :name are optional:
        
          :name aname
        
          The package-qualified name of the class to be generated
        
          :extends aclass
        
          Specifies the superclass, the non-private methods of which will be
          overridden by the class. If not provided, defaults to Object.
        
          :implements [interface ...]
        
          One or more interfaces, the methods of which will be implemented by the class.
        
          :init name
        
          If supplied, names a function that will be called with the arguments
          to the constructor. Must return [ [superclass-constructor-args] state] 
          If not supplied, the constructor args are passed directly to
          the superclass constructor and the state will be nil
        
          :constructors {[param-types] [super-param-types], ...}
        
          By default, constructors are created for the generated class which
          match the signature(s) of the constructors for the superclass. This
          parameter may be used to explicitly specify constructors, each entry
          providing a mapping from a constructor signature to a superclass
          constructor signature. When you supply this, you must supply an :init
          specifier. 
        
          :post-init name
        
          If supplied, names a function that will be called with the object as
          the first argument, followed by the arguments to the constructor.
          It will be called every time an object of this class is created,
          immediately after all the inherited constructors have completed.
          It's return value is ignored.
        
          :methods [ [name [param-types] return-type], ...]
        
          The generated class automatically defines all of the non-private
          methods of its superclasses/interfaces. This parameter can be used
          to specify the signatures of additional methods of the generated
          class. Static methods can be specified with ^{:static true} in the
          signature's metadata. Do not repeat superclass/interface signatures
          here.
        
          :main boolean
        
          If supplied and true, a static public main function will be generated. It will
          pass each string of the String[] argument as a separate argument to
          a function called (str prefix main).
        
          :factory name
        
          If supplied, a (set of) public static factory function(s) will be
          created with the given name, and the same signature(s) as the
          constructor(s).
          
          :state name
        
          If supplied, a public final instance field with the given name will be
          created. You must supply an :init function in order to provide a
          value for the state. Note that, though final, the state can be a ref
          or agent, supporting the creation of Java objects with transactional
          or asynchronous mutation semantics.
        
          :exposes {protected-field-name {:get name :set name}, ...}
        
          Since the implementations of the methods of the generated class
          occur in Clojure functions, they have no access to the inherited
          protected fields of the superclass. This parameter can be used to
          generate public getter/setter methods exposing the protected field(s)
          for use in the implementation.
        
          :exposes-methods {super-method-name exposed-name, ...}
        
          It is sometimes necessary to call the superclass' implementation of an
          overridden method.  Those methods may be exposed and referred in 
          the new method implementation by a local name.
        
          :prefix string
        
          Default: "-" Methods called e.g. Foo will be looked up in vars called
          prefixFoo in the implementing ns.
        
          :impl-ns name
        
          Default: the name of the current ns. Implementations of methods will be 
          looked up in this namespace.
        
          :load-impl-ns boolean
        
          Default: true. Causes the static initializer for the generated class
          to reference the load code for the implementing namespace. Should be
          true when implementing-ns is the default, false if you intend to
          load the code via some other method.
    "eval":
      name: "eval"
      doc: >
        Evaluates the form data structure (not text!) and returns the result.
    "aclone":
      name: "aclone"
      doc: >
        Returns a clone of the Java array. Works on arrays of known
          types.
    "char-name-string":
      name: "char-name-string"
      doc: >
        Returns name string for char or nil if none
    "pop":
      name: "pop"
      doc: >
        For a list or queue, returns a new list/queue without the first
          item, for a vector, returns a new vector without the last item. If
          the collection is empty, throws an exception.  Note - not the same
          as next/butlast.
    "primitives-classnames":
      name: "primitives-classnames"
    "atom":
      name: "atom"
      doc: >
        Creates and returns an Atom with an initial value of x and zero or
          more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          If metadata-map is supplied, it will become the metadata on the
          atom. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception.
    "defonce":
      name: "defonce"
      doc: >
        defs name to have the root value of the expr iff the named var has no root value,
          else expr is unevaluated
    "bit-shift-right":
      name: "bit-shift-right"
      doc: >
        Bitwise shift right
    "delay?":
      name: "delay?"
      doc: >
        returns true if x is a Delay created with delay
    "num":
      name: "num"
      doc: >
        Coerce to Number
    "realized?":
      name: "realized?"
      doc: >
        Returns true if a value has been produced for a promise, delay, future or lazy sequence.
    "disj":
      name: "disj"
      doc: >
        disj[oin]. Returns a new set of the same (hashed/sorted) type, that
          does not contain key(s).
    "io!":
      name: "io!"
      doc: >
        If an io! block occurs in a transaction, throws an
          IllegalStateException, else runs body in an implicit do. If the
          first expression in body is a literal string, will use that as the
          exception message.
    "*print-readably*":
      name: "*print-readably*"
      doc: >
        When set to logical false, strings and characters will be printed with
          non-alphanumeric characters converted to the appropriate escape sequences.
        
          Defaults to true
    "rational?":
      name: "rational?"
      doc: >
        Returns true if n is a rational number
    "merge-with":
      name: "merge-with"
      doc: >
        Returns a map that consists of the rest of the maps conj-ed onto
          the first.  If a key occurs in more than one map, the mapping(s)
          from the latter (left-to-right) will be combined with the mapping in
          the result by calling (f val-in-result val-in-latter).
    "take-nth":
      name: "take-nth"
      doc: >
        Returns a lazy seq of every nth item in coll.
    "*fn-loader*":
      name: "*fn-loader*"
    "*print-meta*":
      name: "*print-meta*"
      doc: >
        If set to logical true, when printing an object, its metadata will also
          be printed in a form that can be read back by the reader.
        
          Defaults to false.
    "double":
      name: "double"
      doc: >
        Coerce to double
    "lazy-seq":
      name: "lazy-seq"
      doc: >
        Takes a body of expressions that returns an ISeq or nil, and yields
          a Seqable object that will invoke the body only the first time seq
          is called, and will cache the result and return it on all subsequent
          seq calls. See also - realized?
    "*in*":
      name: "*in*"
      doc: >
        A java.io.Reader object representing standard input for read operations.
        
          Defaults to System/in, wrapped in a LineNumberingPushbackReader
    "take-last":
      name: "take-last"
      doc: >
        Returns a seq of the last n items in coll.  Depending on the type
          of coll may be no better than linear time.  For vectors, see also subvec.
    "line-seq":
      name: "line-seq"
      doc: >
        Returns the lines of text from rdr as a lazy sequence of strings.
          rdr must implement java.io.BufferedReader.
    "take":
      name: "take"
      doc: >
        Returns a lazy sequence of the first n items in coll, or all items if
          there are fewer than n.
    "unchecked-byte":
      name: "unchecked-byte"
      doc: >
        Coerce to byte. Subject to rounding or truncation.
    "when":
      name: "when"
      doc: >
        Evaluates test. If logical true, evaluates body in an implicit do.
    "areduce":
      name: "areduce"
      doc: >
        Reduces an expression across an array a, using an index named idx,
          and return value named ret, initialized to init, setting ret to the 
          evaluation of expr at each step, returning ret.
    "set?":
      name: "set?"
      doc: >
        Returns true if x implements IPersistentSet
    "make-array":
      name: "make-array"
      doc: >
        Creates and returns an array of instances of the specified class of
          the specified dimension(s).  Note that a class object is required.
          Class objects can be obtained by using their imported or
          fully-qualified name.  Class objects for the primitive types can be
          obtained using, e.g., Integer/TYPE.
    "rand-nth":
      name: "rand-nth"
      doc: >
        Return a random element of the (sequential) collection. Will have
          the same performance characteristics as nth for the given
          collection.
    "alias":
      name: "alias"
      doc: >
        Add an alias in the current namespace to another
          namespace. Arguments are two symbols: the alias to be used, and
          the symbolic name of the target namespace. Use :as in the ns macro in preference
          to calling this directly.
    "use":
      name: "use"
      doc: >
        Like 'require, but also refers to each lib's namespace using
          clojure.core/refer. Use :use in the ns macro in preference to calling
          this directly.
        
          'use accepts additional options in libspecs: :exclude, :only, :rename.
          The arguments and semantics for :exclude, :only, and :rename are the same
          as those documented for clojure.core/refer.
    "juxt":
      name: "juxt"
      doc: >
        Takes a set of functions and returns a fn that is the juxtaposition
          of those fns.  The returned fn takes a variable number of args, and
          returns a vector containing the result of applying each fn to the
          args (left-to-right).
          ((juxt a b c) x) => [(a x) (b x) (c x)]
    "alength":
      name: "alength"
      doc: >
        Returns the length of the Java array. Works on arrays of all
          types.
    "chunk-first":
      name: "chunk-first"
    "*source-path*":
      name: "*source-path*"
    "defprotocol":
      name: "defprotocol"
      doc: >
        A protocol is a named set of named methods and their signatures:
          (defprotocol AProtocolName
        
            ;optional doc string
            "A doc string for AProtocol abstraction"
        
          ;method signatures
            (bar [this a b] "bar docs")
            (baz [this a] [this a b] [this a b c] "baz docs"))
        
          No implementations are provided. Docs can be specified for the
          protocol overall and for each method. The above yields a set of
          polymorphic functions and a protocol object. All are
          namespace-qualified by the ns enclosing the definition The resulting
          functions dispatch on the type of their first argument, which is
          required and corresponds to the implicit target object ('this' in 
          Java parlance). defprotocol is dynamic, has no special compile-time 
          effect, and defines no new types or classes. Implementations of 
          the protocol methods can be provided using extend.
        
          defprotocol will automatically generate a corresponding interface,
          with the same name as the protocol, i.e. given a protocol:
          my.ns/Protocol, an interface: my.ns.Protocol. The interface will
          have methods corresponding to the protocol functions, and the
          protocol will automatically work with instances of the interface.
        
          Note that you should not use this interface with deftype or
          reify, as they support the protocol directly:
        
          (defprotocol P 
            (foo [this]) 
            (bar-me [this] [this y]))
        
          (deftype Foo [a b c] 
           P
            (foo [this] a)
            (bar-me [this] b)
            (bar-me [this y] (+ c y)))
          
          (bar-me (Foo. 1 2 3) 42)
          => 45
        
          (foo 
            (let [x 42]
              (reify P 
                (foo [this] 17)
                (bar-me [this] x)
                (bar-me [this y] x))))
          => 17
    "to-array":
      name: "to-array"
      doc: >
        Returns an array of Objects containing the contents of coll, which
          can be any Collection.  Maps to java.util.Collection.toArray().
    "hash-map":
      name: "hash-map"
      doc: >
        keyval => key val
          Returns a new hash map with supplied mappings.  If any keys are
          equal, they are handled as if by repeated uses of assoc.
    "bit-and-not":
      name: "bit-and-not"
      doc: >
        Bitwise and with complement
    "*compiler-options*":
      name: "*compiler-options*"
      doc: >
        A map of keys to options.
          Note, when binding dynamically make sure to merge with previous value.
          Supported options:
          :elide-meta - a collection of metadata keys to elide during compilation.
          :disable-locals-clearing - set to true to disable clearing, useful for using a debugger
          Alpha, subject to change.
    "compare-and-set!":
      name: "compare-and-set!"
      doc: >
        Atomically sets the value of atom to newval if and only if the
          current value of the atom is identical to oldval. Returns true if
          set happened, else false
    "*assert*":
      name: "*assert*"
    "type":
      name: "type"
      doc: >
        Returns the :type metadata of x, or its Class if none
    "repeatedly":
      name: "repeatedly"
      doc: >
        Takes a function of no args, presumably with side effects, and
          returns an infinite (or length n if supplied) lazy sequence of calls
          to it
    "trampoline":
      name: "trampoline"
      doc: >
        trampoline can be used to convert algorithms requiring mutual
          recursion without stack consumption. Calls f with supplied args, if
          any. If f returns a fn, calls that fn with no arguments, and
          continues to repeat, until the return value is not a fn, then
          returns that non-fn value. Note that if you want to return a fn as a
          final value, you must wrap it in some data structure and unpack it
          after trampoline returns.
    "set-error-handler!":
      name: "set-error-handler!"
      doc: >
        Sets the error-handler of agent a to handler-fn.  If an action
          being run by the agent throws an exception or doesn't pass the
          validator fn, handler-fn will be called with two arguments: the
          agent and the exception.
    "remove":
      name: "remove"
      doc: >
        Returns a lazy sequence of the items in coll for which
          (pred item) returns false. pred must be free of side-effects.
    "find":
      name: "find"
      doc: >
        Returns the map entry for key, or nil if key not present.
    "coll?":
      name: "coll?"
      doc: >
        Returns true if x implements IPersistentCollection
    "drop-while":
      name: "drop-while"
      doc: >
        Returns a lazy sequence of the items in coll starting from the first
          item for which (pred item) returns logical false.
    "not-empty":
      name: "not-empty"
      doc: >
        If coll is empty, returns nil, else coll
    "flatten":
      name: "flatten"
      doc: >
        Takes any nested combination of sequential things (lists, vectors,
          etc.) and returns their contents as a single, flat sequence.
          (flatten nil) returns an empty sequence.
    "ex-data":
      name: "ex-data"
      doc: >
        Alpha - subject to change.
           Returns exception data (a map) if ex is an IExceptionInfo.
           Otherwise returns nil.
    "set-agent-send-off-executor!":
      name: "set-agent-send-off-executor!"
      doc: >
        Sets the ExecutorService to be used by send-off
    "println-str":
      name: "println-str"
      doc: >
        println to a string, returning it
    "list":
      name: "list"
      doc: >
        Creates a new list containing the items.
    "chunk-next":
      name: "chunk-next"
    "every?":
      name: "every?"
      doc: >
        Returns true if (pred x) is logical true for every x in coll, else
          false.
    "satisfies?":
      name: "satisfies?"
      doc: >
        Returns true if x satisfies the protocol
    "flush":
      name: "flush"
      doc: >
        Flushes the output stream that is the current value of
          *out*
    "some->>":
      name: "some->>"
      doc: >
        When expr is not nil, threads it into the first form (via ->>),
          and when that result is not nil, through the next etc
    "sort":
      name: "sort"
      doc: >
        Returns a sorted sequence of the items in coll. If no comparator is
          supplied, uses compare.  comparator must implement
          java.util.Comparator.  If coll is a Java array, it will be modified.
          To avoid this, sort a copy of the array.
    "dissoc":
      name: "dissoc"
      doc: >
        dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
          that does not contain a mapping for key(s).
    "cond->":
      name: "cond->"
      doc: >
        Takes an expression and a set of test/form pairs. Threads expr (via ->)
          through each form for which the corresponding test
          expression is true. Note that, unlike cond branching, cond-> threading does
          not short circuit after the first true test expression.
    "not":
      name: "not"
      doc: >
        Returns true if x is logical false, false otherwise.
    "binding":
      name: "binding"
      doc: >
        binding => var-symbol init-expr
        
          Creates new bindings for the (already-existing) vars, with the
          supplied initial values, executes the exprs in an implicit do, then
          re-establishes the bindings that existed before.  The new bindings
          are made in parallel (unlike let); all init-exprs are evaluated
          before the vars are bound to their new values.
    "error-handler":
      name: "error-handler"
      doc: >
        Returns the error-handler of agent a, or nil if there is none.
          See set-error-handler!
    "get-method":
      name: "get-method"
      doc: >
        Given a multimethod and a dispatch value, returns the dispatch fn
          that would apply to that value, or nil if none apply and no default
    "agent":
      name: "agent"
      doc: >
        Creates and returns an agent with an initial value of state and
          zero or more options (in any order):
        
          :meta metadata-map
        
          :validator validate-fn
        
          :error-handler handler-fn
        
          :error-mode mode-keyword
        
          If metadata-map is supplied, it will become the metadata on the
          agent. validate-fn must be nil or a side-effect-free fn of one
          argument, which will be passed the intended new state on any state
          change. If the new state is unacceptable, the validate-fn should
          return false or throw an exception.  handler-fn is called if an
          action throws an exception or if validate-fn rejects a new state --
          see set-error-handler! for details.  The mode-keyword may be either
          :continue (the default if an error-handler is given) or :fail (the
          default if no error-handler is given) -- see set-error-mode! for
          details.
    "sorted-set":
      name: "sorted-set"
      doc: >
        Returns a new sorted set with supplied keys.  Any equal keys are
          handled as if by repeated uses of conj.
    "alter-var-root":
      name: "alter-var-root"
      doc: >
        Atomically alters the root binding of var v by applying f to its
          current value plus any args
    "merge":
      name: "merge"
      doc: >
        Returns a map that consists of the rest of the maps conj-ed onto
          the first.  If a key occurs in more than one map, the mapping from
          the latter (left-to-right) will be the mapping in the result.
    "subseq":
      name: "subseq"
      doc: >
        sc must be a sorted collection, test(s) one of <, <=, > or
          >=. Returns a seq of those entries with keys ek for
          which (test (.. sc comparator (compare ek key)) 0) is true
    "min":
      name: "min"
      doc: >
        Returns the least of the nums.
    "print-simple":
      name: "print-simple"
    "bit-test":
      name: "bit-test"
      doc: >
        Test bit at index n
    "await-for":
      name: "await-for"
      doc: >
        Blocks the current thread until all actions dispatched thus
          far (from this thread or agent) to the agents have occurred, or the
          timeout (in milliseconds) has elapsed. Returns logical false if
          returning due to timeout, logical true otherwise.
    "keep":
      name: "keep"
      doc: >
        Returns a lazy sequence of the non-nil results of (f item). Note,
          this means false return values will be included.  f must be free of
          side-effects.
    "disj!":
      name: "disj!"
      doc: >
        Alpha - subject to change.
          disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
          does not contain key(s).
    "meta":
      name: "meta"
      doc: >
        Returns the metadata of obj, returns nil if there is no metadata.
clojure.java.io:
  ns-name: "clojure.java.io"
  vars:
    "output-stream":
      name: "output-stream"
      doc: >
        Attempts to coerce its argument into an open java.io.OutputStream.
           Default implementations always return a java.io.BufferedOutputStream.
        
           Default implementations are defined for OutputStream, File, URI, URL,
           Socket, and String arguments.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the OutputStream is
           properly closed.
    "copy":
      name: "copy"
      doc: >
        Copies input to output.  Returns nil or throws IOException.
          Input may be an InputStream, Reader, File, byte[], or String.
          Output may be an OutputStream, Writer, or File.
        
          Options are key/value pairs and may be one of
        
            :buffer-size  buffer size to use, default is 1024.
            :encoding     encoding to use if converting between
                          byte and char streams.   
        
          Does not close any streams except those it opens itself 
          (on a File).
    "file":
      name: "file"
      doc: >
        Returns a java.io.File, passing each arg to as-file.  Multiple-arg
           versions treat the first argument as parent and subsequent args as
           children relative to the parent.
    "writer":
      name: "writer"
      doc: >
        Attempts to coerce its argument into an open java.io.Writer.
           Default implementations always return a java.io.BufferedWriter.
        
           Default implementations are provided for Writer, BufferedWriter,
           OutputStream, File, URI, URL, Socket, and String.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the Writer is properly
           closed.
    "as-relative-path":
      name: "as-relative-path"
      doc: >
        Take an as-file-able thing and return a string if it is
           a relative path, else IllegalArgumentException.
    "make-output-stream":
      name: "make-output-stream"
      doc: >
        Creates a BufferedOutputStream. See also IOFactory docs.
    "make-parents":
      name: "make-parents"
      doc: >
        Given the same arg(s) as for file, creates all parent directories of
           the file they represent.
    "reader":
      name: "reader"
      doc: >
        Attempts to coerce its argument into an open java.io.Reader.
           Default implementations always return a java.io.BufferedReader.
        
           Default implementations are provided for Reader, BufferedReader,
           InputStream, File, URI, URL, Socket, byte arrays, character arrays,
           and String.
        
           If argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the Reader is properly
           closed.
    "default-streams-impl":
      name: "default-streams-impl"
    "delete-file":
      name: "delete-file"
      doc: >
        Delete file f. Raise an exception if it fails unless silently is true.
    "as-file":
      name: "as-file"
      doc: >
        Coerce argument to a file.
    "resource":
      name: "resource"
      doc: >
        Returns the URL for a named resource. Use the context class loader
           if no loader is specified.
    "input-stream":
      name: "input-stream"
      doc: >
        Attempts to coerce its argument into an open java.io.InputStream.
           Default implementations always return a java.io.BufferedInputStream.
        
           Default implementations are defined for OutputStream, File, URI, URL,
           Socket, byte array, and String arguments.
        
           If the argument is a String, it tries to resolve it first as a URI, then
           as a local file name.  URIs with a 'file' protocol are converted to
           local file names.
        
           Should be used inside with-open to ensure the InputStream is properly
           closed.
    "Coercions":
      name: "Coercions"
      doc: >
        Coerce between various 'resource-namish' things.
    "make-input-stream":
      name: "make-input-stream"
      doc: >
        Creates a BufferedInputStream. See also IOFactory docs.
    "make-writer":
      name: "make-writer"
      doc: >
        Creates a BufferedWriter. See also IOFactory docs.
    "as-url":
      name: "as-url"
      doc: >
        Coerce argument to a URL.
    "make-reader":
      name: "make-reader"
      doc: >
        Creates a BufferedReader. See also IOFactory docs.
    "IOFactory":
      name: "IOFactory"
      doc: >
        Factory functions that create ready-to-use, buffered versions of
           the various Java I/O stream types, on top of anything that can
           be unequivocally converted to the requested kind of stream.
        
           Common options include
           
             :append    true to open stream in append mode
             :encoding  string name of encoding to use, e.g. "UTF-8".
        
           Callers should generally prefer the higher level API provided by
           reader, writer, input-stream, and output-stream.
clojure.string:
  ns-name: "clojure.string"
  vars:
    "trim":
      name: "trim"
      doc: >
        Removes whitespace from both ends of string.
    "lower-case":
      name: "lower-case"
      doc: >
        Converts string to all lower-case.
    "re-quote-replacement":
      name: "re-quote-replacement"
      doc: >
        Given a replacement string that you wish to be a literal
           replacement for a pattern match in replace or replace-first, do the
           necessary escaping of special characters in the replacement.
    "split":
      name: "split"
      doc: >
        Splits string on a regular expression.  Optional argument limit is
          the maximum number of splits. Not lazy. Returns vector of the splits.
    "join":
      name: "join"
      doc: >
        Returns a string of all elements in coll, as returned by (seq coll),
           separated by an optional separator.
    "upper-case":
      name: "upper-case"
      doc: >
        Converts string to all upper-case.
    "trimr":
      name: "trimr"
      doc: >
        Removes whitespace from the right side of string.
    "split-lines":
      name: "split-lines"
      doc: >
        Splits s on \n or \r\n.
    "triml":
      name: "triml"
      doc: >
        Removes whitespace from the left side of string.
    "replace":
      name: "replace"
      doc: >
        Replaces all instance of match with replacement in s.
        
           match/replacement can be:
        
           string / string
           char / char
           pattern / (string or function of match).
        
           See also replace-first.
        
           The replacement is literal (i.e. none of its characters are treated
           specially) for all cases above except pattern / string.
        
           For pattern / string, $1, $2, etc. in the replacement string are
           substituted with the string that matched the corresponding
           parenthesized group in the pattern.  If you wish your replacement
           string r to be used literally, use (re-quote-replacement r) as the
           replacement argument.  See also documentation for
           java.util.regex.Matcher's appendReplacement method.
        
           Example:
           (clojure.string/replace "Almost Pig Latin" #"\b(\w)(\w+)\b" "$2$1ay")
           -> "lmostAay igPay atinLay"
    "reverse":
      name: "reverse"
      doc: >
        Returns s with its characters reversed.
    "capitalize":
      name: "capitalize"
      doc: >
        Converts first character of the string to upper-case, all other
          characters to lower-case.
    "escape":
      name: "escape"
      doc: >
        Return a new string, using cmap to escape each character ch
           from s as follows:
           
           If (cmap ch) is nil, append ch to the new string.
           If (cmap ch) is non-nil, append (str (cmap ch)) instead.
    "blank?":
      name: "blank?"
      doc: >
        True if s is nil, empty, or contains only whitespace.
    "replace-first":
      name: "replace-first"
      doc: >
        Replaces the first instance of match with replacement in s.
        
           match/replacement can be:
        
           char / char
           string / string
           pattern / (string or function of match).
        
           See also replace.
        
           The replacement is literal (i.e. none of its characters are treated
           specially) for all cases above except pattern / string.
        
           For pattern / string, $1, $2, etc. in the replacement string are
           substituted with the string that matched the corresponding
           parenthesized group in the pattern.  If you wish your replacement
           string r to be used literally, use (re-quote-replacement r) as the
           replacement argument.  See also documentation for
           java.util.regex.Matcher's appendReplacement method.
        
           Example:
           (clojure.string/replace-first "swap first two words"
                                         #"(\w+)(\s+)(\w+)" "$3$2$1")
           -> "first swap two words"
    "trim-newline":
      name: "trim-newline"
      doc: >
        Removes all trailing newline \n or return \r characters from
          string.  Similar to Perl's chomp.
clojure.core.protocols:
  ns-name: "clojure.core.protocols"
  vars:
    "emit-array-impls":
      name: "emit-array-impls"
    "coll-reduce":
      name: "coll-reduce"
    "kv-reduce":
      name: "kv-reduce"
    "arr-impl":
      name: "arr-impl"
    "CollReduce":
      name: "CollReduce"
      doc: >
        Protocol for collection types that can implement reduce faster than
          first/next recursion. Called by clojure.core/reduce. Baseline
          implementation defined in terms of Iterable.
    "IKVReduce":
      name: "IKVReduce"
      doc: >
        Protocol for concrete associative types that can reduce themselves
           via a function of key and val faster than first/next recursion over map
           entries. Called by clojure.core/reduce-kv, and has same
           semantics (just different arg order).
    "InternalReduce":
      name: "InternalReduce"
      doc: >
        Protocol for concrete seq types that can reduce themselves
           faster than first/next recursion. Called by clojure.core/reduce.
    "internal-reduce":
      name: "internal-reduce"
clojure.instant:
  ns-name: "clojure.instant"
  vars:
    "read-instant-calendar":
      name: "read-instant-calendar"
      doc: >
        To read an instant as a java.util.Calendar, bind *data-readers* to a map with
        this var as the value for the 'inst key.  Calendar preserves the timezone
        offset.
    "read-instant-timestamp":
      name: "read-instant-timestamp"
      doc: >
        To read an instant as a java.sql.Timestamp, bind *data-readers* to a
        map with this var as the value for the 'inst key. Timestamp preserves
        fractional seconds with nanosecond precision. The timezone offset will
        be used to convert into UTC.
    "validated":
      name: "validated"
      doc: >
        Return a function which constructs and instant by calling constructor
        after first validting that those arguments are in range and otherwise
        plausible. The resulting function will throw an exception if called
        with invalid arguments.
    "read-instant-date":
      name: "read-instant-date"
      doc: >
        To read an instant as a java.util.Date, bind *data-readers* to a map with
        this var as the value for the 'inst key. The timezone offset will be used
        to convert into UTC.
    "parse-timestamp":
      name: "parse-timestamp"
      doc: >
        Parse a string containing an RFC3339-like like timestamp.
        
        The function new-instant is called with the following arguments.
        
                        min  max           default
                        ---  ------------  -------
          years          0           9999      N/A (s must provide years)
          months         1             12        1
          days           1             31        1 (actual max days depends
          hours          0             23        0  on month and year)
          minutes        0             59        0
          seconds        0             60        0 (though 60 is only valid
          nanoseconds    0      999999999        0  when minutes is 59)
          offset-sign   -1              1        0
          offset-hours   0             23        0
          offset-minutes 0             59        0
        
        These are all integers and will be non-nil. (The listed defaults
        will be passed if the corresponding field is not present in s.)
        
        Grammar (of s):
        
          date-fullyear   = 4DIGIT
          date-month      = 2DIGIT  ; 01-12
          date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
                                    ; month/year
          time-hour       = 2DIGIT  ; 00-23
          time-minute     = 2DIGIT  ; 00-59
          time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
                                    ; rules
          time-secfrac    = '.' 1*DIGIT
          time-numoffset  = ('+' / '-') time-hour ':' time-minute
          time-offset     = 'Z' / time-numoffset
        
          time-part       = time-hour [ ':' time-minute [ ':' time-second
                            [time-secfrac] [time-offset] ] ]
        
          timestamp       = date-year [ '-' date-month [ '-' date-mday
                            [ 'T' time-part ] ] ]
        
        Unlike RFC3339:
        
          - we only parse the timestamp format
          - timestamp can elide trailing components
          - time-offset is optional (defaults to +00:00)
        
        Though time-offset is syntactically optional, a missing time-offset
        will be treated as if the time-offset zero (+00:00) had been
        specified.
